{"doc": "/// <summary>\r\n/// Delete the specified rows from the worksheet.\r\n/// </summary>\r\n/// <param name = \"rowFrom\">The start row</param>\r\n/// <param name = \"rows\">Number of rows to delete</param>", "signature": {"name": "DeleteRow", "returns": "void", "params": ["int rowFrom", "int rows"], "modifier": ["public"], "annotations": [], "generics": []}, "language": "csharp", "parent": {"name": "ExcelWorksheet", "doc": "/// <summary>\r\n/// Represents an Excel worksheet and provides access to its properties and methods\r\n/// </summary>", "other_methods": [{"doc": "/// <summary>\r\n/// Removes all formulas within the entire worksheet, but keeps the calculated values.\r\n/// </summary>", "signature": {"name": "ClearFormulas", "returns": "void", "params": [], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            var formulaCells = new CellStoreEnumerator<object>(_formulas, Dimension.Start.Row, Dimension.Start.Column, Dimension.End.Row, Dimension.End.Column);\r\n            while (formulaCells.Next())\r\n            {\r\n                formulaCells.Value = null;\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Removes all values of cells with formulas in the entire worksheet, but keeps the formulas.\r\n/// </summary>", "signature": {"name": "ClearFormulaValues", "returns": "void", "params": [], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            var formulaCell = new CellStoreEnumerator<object>(_formulas, Dimension.Start.Row, Dimension.Start.Column, Dimension.End.Row, Dimension.End.Column);\r\n            while (formulaCell.Next())\r\n            {\r\n\r\n                var val = _values.GetValue(formulaCell.Row, formulaCell.Column);\r\n                val._value = null;\r\n                _values.SetValue(formulaCell.Row, formulaCell.Column, val);\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "LoadComments", "returns": "void", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            CreateVmlCollection();\r\n            _comments = new ExcelCommentCollection(_package, this, NameSpaceManager);\r\n        }"}, {"doc": "", "signature": {"name": "LoadThreadedComments", "returns": "void", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            _threadedComments = new ExcelWorksheetThreadedComments(Workbook.ThreadedCommentPersons, this);\r\n        }"}, {"doc": "", "signature": {"name": "NameNeedsApostrophes", "returns": "bool", "params": ["string ws"], "modifier": ["internal", "static"], "annotations": [], "generics": []}, "code": "{\r\n            if (ws[0] >= '0' && ws[0] <= '9')\r\n            {\r\n                return true;\r\n            }\r\n            if (StartsWithR1C1(ws))\r\n            {\r\n                return true;\r\n            }\r\n            foreach (var c in ws)\r\n            {\r\n                if (!(char.IsLetterOrDigit(c) || c == '_'))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }"}, {"doc": "", "signature": {"name": "StartsWithR1C1", "returns": "bool", "params": ["string ws"], "modifier": ["private", "static"], "annotations": [], "generics": []}, "code": "{\r\n            if (ws[0] == 'c' || ws[0] == 'C' || ws[0] == 'r' || ws[0] == 'R')\r\n            {\r\n                int ix = 1;\r\n                if (ws.StartsWith(\"rc\", StringComparison.OrdinalIgnoreCase)) ix = 2;\r\n                if (ws.Length > ix && (ws[ix] >= '0' && ws[ix] <= '9'))\r\n                {\r\n                    if (ws[ix] == '0')\r\n                    {\r\n                        for (int i = ix + 1; i < ws.Length; i++)\r\n                        {\r\n                            if (ws[i] != '0')\r\n                            {\r\n                                if (ws[i] >= '1' && ws[i] <= '9')\r\n                                {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }"}, {"doc": "", "signature": {"name": "CheckSheetType", "returns": "void", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            if (this is ExcelChartsheet)\r\n            {\r\n                throw (new NotSupportedException(\"This property or method is not supported for a Chartsheet\"));\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "ChangeNames", "returns": "void", "params": ["string value"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            //Renames name in this Worksheet;\r\n            foreach (var n in Workbook.Names)\r\n            {\r\n                if (string.IsNullOrEmpty(n.NameFormula) && n.NameValue == null)\r\n                {\r\n                    n.ChangeWorksheet(_name, value);\r\n                }\r\n            }\r\n            foreach (var ws in Workbook.Worksheets)\r\n            {\r\n                if (!(ws is ExcelChartsheet))\r\n                {\r\n                    foreach (var n in ws.Names)\r\n                    {\r\n                        if (string.IsNullOrEmpty(n.NameFormula) && n.NameValue == null)\r\n                        {\r\n                            n.ChangeWorksheet(_name, value);\r\n                        }\r\n                    }\r\n                    ws.UpdateSheetNameInFormulas(_name, value);\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "DeactivateTab", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (PositionId == Workbook.View.ActiveTab)\r\n            {\r\n                var worksheets = Workbook.Worksheets;\r\n                for (int i = PositionId + 1; i < worksheets.Count; i++)\r\n                {\r\n                    if (worksheets[i + _package._worksheetAdd].Hidden == eWorkSheetHidden.Visible)\r\n                    {\r\n                        Workbook.View.ActiveTab = i;\r\n                        return;\r\n                    }\r\n                }\r\n                for (int i = PositionId - 1; i >= 0; i++)\r\n                {\r\n                    if (worksheets[i + _package._worksheetAdd].Hidden == eWorkSheetHidden.Visible)\r\n                    {\r\n                        Workbook.View.ActiveTab = i;\r\n                        return;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetRowHeightFromNormalStyle", "returns": "double", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var ix = Workbook.Styles.NamedStyles.FindIndexById(\"Normal\");\r\n            if (ix >= 0)\r\n            {\r\n                var f = Workbook.Styles.NamedStyles[ix].Style.Font;\r\n                return ExcelFontXml.GetFontHeight(f.Name, f.Size) * 0.75;\r\n            }\r\n            else\r\n            {\r\n                return 15;   //Default Calibri 11\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "CodeNameChange", "returns": "void", "params": ["string value"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            CodeModuleName = value;\r\n        }"}, {"doc": "", "signature": {"name": "GetThreadedCommentUri", "returns": "Uri", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var index = 1;\r\n            var uri = new Uri(\"/xl/threadedComments/threadedComment\" + index + \".xml\", UriKind.Relative);\r\n            uri = UriHelper.ResolvePartUri(Workbook.WorkbookUri, uri);\r\n            while (Part.Package.PartExists(uri))\r\n            {\r\n                uri = new Uri(\"/xl/threadedComments/threadedComment\" + (++index) + \".xml\", UriKind.Relative);\r\n                uri = UriHelper.ResolvePartUri(Workbook.WorkbookUri, uri);\r\n            }\r\n\r\n            return uri;\r\n        }"}, {"doc": "", "signature": {"name": "CreateVmlCollection", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var relIdNode = _worksheetXml.DocumentElement.SelectSingleNode(\"d:legacyDrawing/@r:id\", NameSpaceManager);\r\n            if (relIdNode == null)\r\n            {\r\n                _vmlDrawings = new ExcelVmlDrawingCollection(this, null);\r\n            }\r\n            else\r\n            {\r\n                if (Part.RelationshipExists(relIdNode.Value))\r\n                {\r\n                    var rel = Part.GetRelationship(relIdNode.Value);\r\n                    var vmlUri = UriHelper.ResolvePartUri(rel.SourceUri, rel.TargetUri);\r\n\r\n                    _vmlDrawings = new ExcelVmlDrawingCollection(this, vmlUri);\r\n                    _vmlDrawings.RelId = rel.Id;\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "CreateXml", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            _worksheetXml = new XmlDocument();\r\n            _worksheetXml.PreserveWhitespace = ExcelPackage.preserveWhitespace;\r\n            Packaging.ZipPackagePart packPart = _package.ZipPackage.GetPart(WorksheetUri);\r\n            string xml = \"\";\r\n\r\n            // First Columns, rows, cells, mergecells, hyperlinks and pagebreakes are loaded from a xmlstream to optimize speed...\r\n            bool doAdjust = _package.DoAdjustDrawings;\r\n            _package.DoAdjustDrawings = false;\r\n            Stream stream = packPart.GetStream();\r\n\r\n#if Core\r\n            var xr = XmlReader.Create(stream,new XmlReaderSettings() { DtdProcessing = DtdProcessing.Prohibit, IgnoreWhitespace = true });\r\n#else\r\n            var xr = new XmlTextReader(stream);\r\n            xr.ProhibitDtd = true;\r\n            xr.WhitespaceHandling = WhitespaceHandling.None;\r\n#endif\r\n            LoadColumns(xr);    //columnXml\r\n            long start = stream.Position;\r\n            LoadCells(xr);\r\n            var nextElementLength = GetAttributeLength(xr);\r\n            long end = stream.Position - nextElementLength;\r\n            LoadMergeCells(xr);\r\n            LoadHyperLinks(xr);\r\n            LoadRowPageBreakes(xr);\r\n            LoadColPageBreakes(xr);\r\n            //...then the rest of the Xml is extracted and loaded into the WorksheetXml document.\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n            Encoding encoding;\r\n            xml = GetWorkSheetXml(stream, start, end, out encoding);\r\n\r\n            // now release stream buffer (already converted whole Xml into XmlDocument Object and String)\r\n            stream.Dispose();\r\n            packPart.Stream = new MemoryStream();\r\n\r\n            //first char is invalid sometimes?? \r\n            if (xml[0] != '<')\r\n                LoadXmlSafe(_worksheetXml, xml.Substring(1, xml.Length - 1), encoding);\r\n            else\r\n                LoadXmlSafe(_worksheetXml, xml, encoding);\r\n\r\n            _package.DoAdjustDrawings = doAdjust;\r\n            ClearNodes();\r\n        }"}, {"doc": "/// <summary>\r\n/// Get the lenth of the attributes\r\n/// Conditional formatting attributes can be extremly long som get length of the attributes to finetune position.\r\n/// </summary>\r\n/// <param name = \"xr\"></param>\r\n/// <returns></returns>", "signature": {"name": "GetAttributeLength", "returns": "int", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (xr.NodeType != XmlNodeType.Element) return 0;\r\n            var length = 0;\r\n\r\n            for (int i = 0; i < xr.AttributeCount; i++)\r\n            {\r\n                var a = xr.GetAttribute(i);\r\n                length += string.IsNullOrEmpty(a) ? 0 : a.Length;\r\n            }\r\n            return length;\r\n        }"}, {"doc": "", "signature": {"name": "LoadRowPageBreakes", "returns": "void", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (!ReadUntil(xr, 1, \"rowBreaks\", \"colBreaks\")) return;\r\n            while (xr.Read())\r\n            {\r\n                if (xr.LocalName == \"brk\")\r\n                {\r\n                    if (xr.NodeType == XmlNodeType.Element)\r\n                    {\r\n                        int id;\r\n                        if (int.TryParse(xr.GetAttribute(\"id\"), NumberStyles.Number, CultureInfo.InvariantCulture, out id))\r\n                        {\r\n                            Row(id).PageBreak = true;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "LoadColPageBreakes", "returns": "void", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (!ReadUntil(xr, 1, \"colBreaks\")) return;\r\n            while (xr.Read())\r\n            {\r\n                if (xr.LocalName == \"brk\")\r\n                {\r\n                    if (xr.NodeType == XmlNodeType.Element)\r\n                    {\r\n                        int id;\r\n                        if (int.TryParse(xr.GetAttribute(\"id\"), NumberStyles.Number, CultureInfo.InvariantCulture, out id))\r\n                        {\r\n                            Column(id).PageBreak = true;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "ClearNodes", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (_worksheetXml.SelectSingleNode(\"//d:cols\", NameSpaceManager) != null)\r\n            {\r\n                _worksheetXml.SelectSingleNode(\"//d:cols\", NameSpaceManager).RemoveAll();\r\n            }\r\n            if (_worksheetXml.SelectSingleNode(\"//d:mergeCells\", NameSpaceManager) != null)\r\n            {\r\n                _worksheetXml.SelectSingleNode(\"//d:mergeCells\", NameSpaceManager).RemoveAll();\r\n            }\r\n            if (_worksheetXml.SelectSingleNode(\"//d:hyperlinks\", NameSpaceManager) != null)\r\n            {\r\n                _worksheetXml.SelectSingleNode(\"//d:hyperlinks\", NameSpaceManager).RemoveAll();\r\n            }\r\n            if (_worksheetXml.SelectSingleNode(\"//d:rowBreaks\", NameSpaceManager) != null)\r\n            {\r\n                _worksheetXml.SelectSingleNode(\"//d:rowBreaks\", NameSpaceManager).RemoveAll();\r\n            }\r\n            if (_worksheetXml.SelectSingleNode(\"//d:colBreaks\", NameSpaceManager) != null)\r\n            {\r\n                _worksheetXml.SelectSingleNode(\"//d:colBreaks\", NameSpaceManager).RemoveAll();\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Extracts the workbook XML without the sheetData-element (containing all cell data).\r\n/// Xml-Cell data can be extreemly large (GB), so we find the sheetdata element in the streem (position start) and \r\n/// then tries to find the &lt;/sheetData&gt; element from the end-parameter.\r\n/// This approach is to avoid out of memory exceptions reading large packages\r\n/// </summary>\r\n/// <param name = \"stream\">the worksheet stream</param>\r\n/// <param name = \"start\">Position from previous reading where we found the sheetData element</param>\r\n/// <param name = \"end\">End position, where &lt;/sheetData&gt; or &lt;sheetData/&gt; is found</param>\r\n/// <param name = \"encoding\">Encoding</param>\r\n/// <returns>The worksheet xml, with an empty sheetdata. (Sheetdata is in memory in the worksheet)</returns>", "signature": {"name": "GetWorkSheetXml", "returns": "string", "params": ["Stream stream", "long start", "long end", "out Encoding encoding"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            StreamReader sr = new StreamReader(stream);\r\n            int length = 0;\r\n            char[] block;\r\n            int pos;\r\n            StringBuilder sb = new StringBuilder();\r\n            Match startmMatch, endMatch;\r\n            do\r\n            {\r\n                int size = stream.Length < BLOCKSIZE ? (int)stream.Length : BLOCKSIZE;\r\n                block = new char[size];\r\n                pos = sr.ReadBlock(block, 0, size);\r\n                sb.Append(block, 0, pos);\r\n                length += size;\r\n                startmMatch = Regex.Match(sb.ToString(), string.Format(\"(<[^>]*{0}[^>]*>)\", \"sheetData\"));\r\n            }\r\n            while (length < start + 20 && length < end || (startmMatch.Success == false && length < stream.Length));    //the  start-pos contains the stream position of the sheetData element. Add 20 (with some safty for whitespace, streampointer diff etc, just so be sure). \r\n            if (!startmMatch.Success) //Not found\r\n            {\r\n                encoding = sr.CurrentEncoding;\r\n                return sb.ToString();\r\n            }\r\n            else\r\n            {\r\n                string s = sb.ToString();\r\n                string xml = s.Substring(0, startmMatch.Index);\r\n                var tag = GetSheetDataTag(startmMatch.Value);\r\n                if (Utils.ConvertUtil._invariantCompareInfo.IsSuffix(startmMatch.Value, \"/>\"))        //Empty sheetdata\r\n                {\r\n                    xml += s.Substring(startmMatch.Index, s.Length - startmMatch.Index);\r\n                }\r\n                else\r\n                {\r\n                    if (sr.Peek() != -1)        //Now find the end tag </sheetdata> so we can add the end of the xml document\r\n                    {\r\n                        /**** Fixes issue 14788. Fix by Philip Garrett ****/\r\n\r\n                        long endSeekStart = Math.Max(end - BLOCKSIZE, 0);\r\n                        while (endSeekStart < stream.Length)\r\n                        {\r\n                            int size = stream.Length - endSeekStart < BLOCKSIZE ? (int)(stream.Length - endSeekStart) : BLOCKSIZE;\r\n                            stream.Seek(endSeekStart, SeekOrigin.Begin);\r\n                            block = new char[size];\r\n                            sr = new StreamReader(stream);\r\n                            pos = sr.ReadBlock(block, 0, size);\r\n                            sb = new StringBuilder();\r\n                            sb.Append(block, 0, pos);\r\n                            s = sb.ToString();\r\n                            endMatch = Regex.Match(s, string.Format(\"(</[^>]*{0}[^>]*>)\", \"sheetData\"));\r\n                            if (endMatch.Success)\r\n                            {\r\n                                break;\r\n                            }\r\n                            endSeekStart += size;\r\n                        }\r\n                    }\r\n                    endMatch = Regex.Match(s, string.Format(\"(</[^>]*{0}[^>]*>)\", \"sheetData\"));\r\n                    xml += $\"<{tag}/>\" + s.Substring(endMatch.Index + endMatch.Length, s.Length - (endMatch.Index + endMatch.Length));\r\n                }\r\n                if (sr.Peek() > -1)\r\n                {\r\n                    xml += sr.ReadToEnd();\r\n                }\r\n\r\n                encoding = sr.CurrentEncoding;\r\n                return xml;\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetSheetDataTag", "returns": "string", "params": ["string s"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (s.Length < 3) throw (new InvalidDataException(\"sheetData Tag not found\"));\r\n            return s.Substring(1, s.Length - 2).Replace(\"/\", \"\");\r\n        }"}, {"doc": "", "signature": {"name": "GetBlockPos", "returns": "void", "params": ["string xml", "string tag", "ref int start", "ref int end"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            Match startmMatch, endMatch;\r\n            startmMatch = Regex.Match(xml.Substring(start), string.Format(\"(<[^>]*{0}[^>]*>)\", tag)); //\"<[a-zA-Z:]*\" + tag + \"[?]*>\");\r\n\r\n            if (!startmMatch.Success) //Not found\r\n            {\r\n                start = -1;\r\n                end = -1;\r\n                return;\r\n            }\r\n            var startPos = startmMatch.Index + start;\r\n            if (startmMatch.Value.Substring(startmMatch.Value.Length - 2, 1) == \"/\")\r\n            {\r\n                end = startPos + startmMatch.Length;\r\n            }\r\n            else\r\n            {\r\n                endMatch = Regex.Match(xml.Substring(start), string.Format(\"(</[^>]*{0}[^>]*>)\", tag));\r\n                if (endMatch.Success)\r\n                {\r\n                    end = endMatch.Index + endMatch.Length + start;\r\n                }\r\n            }\r\n            start = startPos;\r\n        }"}, {"doc": "", "signature": {"name": "ReadUntil", "returns": "bool", "params": ["XmlReader xr", "int depth", "params string[] tagName"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (xr.EOF) return false;\r\n            while ((xr.Depth == depth && Array.Exists(tagName, tag => Utils.ConvertUtil._invariantCompareInfo.IsSuffix(xr.LocalName, tag))) == false)\r\n            {\r\n                do\r\n                {\r\n                    xr.Read();\r\n                    if (xr.EOF) return false;\r\n                } while (xr.Depth != depth);\r\n            }\r\n            return (Utils.ConvertUtil._invariantCompareInfo.IsSuffix(xr.LocalName, tagName[0]));\r\n        }"}, {"doc": "", "signature": {"name": "LoadColumns", "returns": "void", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (ReadUntil(xr, 1, \"cols\", \"sheetData\"))\r\n            {\r\n                while (xr.Read())\r\n                {\r\n                    if (xr.NodeType == XmlNodeType.Whitespace) continue;\r\n                    if (xr.LocalName != \"col\") break;\r\n                    if (xr.NodeType == XmlNodeType.Element)\r\n                    {\r\n                        int min = int.Parse(xr.GetAttribute(\"min\"));\r\n\r\n                        ExcelColumn col = new ExcelColumn(this, min);\r\n\r\n                        col.ColumnMax = int.Parse(xr.GetAttribute(\"max\"));\r\n                        col.Width = xr.GetAttribute(\"width\") == null ? 0 : double.Parse(xr.GetAttribute(\"width\"), CultureInfo.InvariantCulture);\r\n                        col.BestFit = GetBoolFromString(xr.GetAttribute(\"bestFit\"));\r\n                        col.Collapsed = GetBoolFromString(xr.GetAttribute(\"collapsed\"));\r\n                        col.Phonetic = GetBoolFromString(xr.GetAttribute(\"phonetic\"));\r\n                        col.OutlineLevel = (short)(xr.GetAttribute(\"outlineLevel\") == null ? 0 : int.Parse(xr.GetAttribute(\"outlineLevel\"), CultureInfo.InvariantCulture));\r\n                        col.Hidden = GetBoolFromString(xr.GetAttribute(\"hidden\"));\r\n                        SetValueInner(0, min, col);\r\n\r\n                        int style;\r\n                        if (!(xr.GetAttribute(\"style\") == null || !int.TryParse(xr.GetAttribute(\"style\"), NumberStyles.Number, CultureInfo.InvariantCulture, out style)))\r\n                        {\r\n                            SetStyleInner(0, min, style);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Read until the node is found. If not found the xmlreader is reseted.\r\n/// </summary>\r\n/// <param name = \"xr\">The reader</param>\r\n/// <param name = \"nodeText\">Text to search for</param>\r\n/// <param name = \"altNode\">Alternative text to search for</param>\r\n/// <returns></returns>", "signature": {"name": "ReadXmlReaderUntil", "returns": "bool", "params": ["XmlReader xr", "string nodeText", "string altNode"], "modifier": ["private", "static"], "annotations": [], "generics": []}, "code": "{\r\n            do\r\n            {\r\n                if (xr.LocalName == nodeText || xr.LocalName == altNode) return true;\r\n            }\r\n            while (xr.Read());\r\n#if !Core\r\n            xr.Close();\r\n#endif\r\n            return false;\r\n        }"}, {"doc": "/// <summary>\r\n/// Load Hyperlinks\r\n/// </summary>\r\n/// <param name = \"xr\">The reader</param>", "signature": {"name": "LoadHyperLinks", "returns": "void", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (!ReadUntil(xr, 1, \"hyperlinks\", \"rowBreaks\", \"colBreaks\")) return;\r\n            while (xr.Read())\r\n            {\r\n                if (xr.LocalName == \"hyperlink\")\r\n                {\r\n                    int fromRow, fromCol, toRow, toCol;\r\n                    var reference = xr.GetAttribute(\"ref\");\r\n                    if (reference != null && ExcelCellBase.IsValidAddress(reference))\r\n                    {\r\n                        ExcelCellBase.GetRowColFromAddress(xr.GetAttribute(\"ref\"), out fromRow, out fromCol, out toRow, out toCol);\r\n                        ExcelHyperLink hl = null;\r\n                        if (xr.GetAttribute(\"id\", ExcelPackage.schemaRelationships) != null)\r\n                        {\r\n                            var rId = xr.GetAttribute(\"id\", ExcelPackage.schemaRelationships);\r\n                            var rel = Part.GetRelationship(rId);\r\n                            if (rel.TargetUri == null)\r\n                            {\r\n                                if (rel.Target.StartsWith(\"#\", StringComparison.OrdinalIgnoreCase) && ExcelCellBase.IsValidAddress(rel.Target.Substring(1)))\r\n                                {\r\n                                    var a = new ExcelAddressBase(rel.Target.Substring(1));\r\n                                    hl = new ExcelHyperLink(a.FullAddress, string.IsNullOrEmpty(a.WorkSheetName) ? a.Address : a.WorkSheetName);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                var uri = rel.TargetUri;\r\n                                if (uri.IsAbsoluteUri)\r\n                                {\r\n                                    try\r\n                                    {\r\n                                        hl = new ExcelHyperLink(uri.AbsoluteUri);\r\n                                    }\r\n                                    catch\r\n                                    {\r\n                                        hl = new ExcelHyperLink(uri.OriginalString, UriKind.Absolute);\r\n                                    }\r\n                                }\r\n                                else\r\n                                {\r\n                                    hl = new ExcelHyperLink(uri.OriginalString, UriKind.Relative);\r\n                                }\r\n                            }\r\n                            hl.RId = rId;\r\n                            Part.DeleteRelationship(rId); //Delete the relationship, it is recreated when we save the package.\r\n                        }\r\n                        else if (xr.GetAttribute(\"location\") != null)\r\n                        {\r\n                            hl = GetHyperlinkFromRef(xr, \"location\", fromRow, toRow, fromCol, toCol);\r\n                        }\r\n                        else if (xr.GetAttribute(\"ref\") != null)\r\n                        {\r\n                            hl = GetHyperlinkFromRef(xr, \"ref\", fromRow, toRow, fromCol, toCol);\r\n                        }\r\n                        else\r\n                        {\r\n                            // not enough info to create a hyperlink\r\n                            break;\r\n                        }\r\n\r\n                        string tt = xr.GetAttribute(\"tooltip\");\r\n                        if (!string.IsNullOrEmpty(tt))\r\n                        {\r\n                            hl.ToolTip = tt;\r\n                        }\r\n                        _hyperLinks.SetValue(fromRow, fromCol, hl);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetRichText", "returns": "ExcelRichTextCollection", "params": ["int row", "int col", "ExcelRangeBase r"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            XmlDocument xml = new XmlDocument();\r\n            var v = GetValueInner(row, col);\r\n            var isRt = _flags.GetFlagValue(row, col, CellFlags.RichText);\r\n            if (v != null)\r\n            {\r\n                if (isRt)\r\n                {\r\n                    XmlHelper.LoadXmlSafe(xml, \"<d:si xmlns:d=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\" >\" + v.ToString() + \"</d:si>\", Encoding.UTF8);\r\n                }\r\n                else\r\n                {\r\n                    xml.LoadXml(\"<d:si xmlns:d=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\" ><d:r><d:t>\" + OfficeOpenXml.Utils.ConvertUtil.ExcelEscapeString(v.ToString()) + \"</d:t></d:r></d:si>\");\r\n                }\r\n            }\r\n            else\r\n            {\r\n                xml.LoadXml(\"<d:si xmlns:d=\\\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\\\" />\");\r\n            }\r\n            var rtc = new ExcelRichTextCollection(NameSpaceManager, xml.SelectSingleNode(\"d:si\", NameSpaceManager), r);\r\n            return rtc;\r\n        }"}, {"doc": "", "signature": {"name": "GetHyperlinkFromRef", "returns": "ExcelHyperLink", "params": ["XmlReader xr", "string refTag", "int fromRow = 0", "int toRow = 0", "int fromCol = 0", "int toCol = 0"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var hl = new ExcelHyperLink(xr.GetAttribute(refTag), xr.GetAttribute(\"display\"));\r\n            hl.RowSpann = toRow - fromRow;\r\n            hl.ColSpann = toCol - fromCol;\r\n            return hl;\r\n        }"}, {"doc": "/// <summary>\r\n/// Load cells\r\n/// </summary>\r\n/// <param name = \"xr\">The reader</param>", "signature": {"name": "LoadCells", "returns": "void", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            ReadUntil(xr, 1, \"sheetData\", \"mergeCells\", \"hyperlinks\", \"rowBreaks\", \"colBreaks\");\r\n            ExcelAddressBase address = null;\r\n            string type = \"\";\r\n            int style = 0;\r\n            int row = 0;\r\n            int col = 0;\r\n            xr.Read();\r\n\r\n            while (!xr.EOF)\r\n            {\r\n                while (xr.NodeType == XmlNodeType.EndElement || xr.NodeType == XmlNodeType.None)\r\n                {\r\n                    xr.Read();\r\n                    if (xr.EOF) return;\r\n                    continue;\r\n                }\r\n                if (xr.LocalName == \"row\")\r\n                {\r\n                    col = 0;\r\n                    var r = xr.GetAttribute(\"r\");\r\n                    if (r == null)\r\n                    {\r\n                        row++;\r\n                    }\r\n                    else\r\n                    {\r\n                        row = Convert.ToInt32(r);\r\n                    }\r\n\r\n                    if (DoAddRow(xr))\r\n                    {\r\n                        SetValueInner(row, 0, AddRow(xr, row));\r\n                        if (xr.GetAttribute(\"s\") != null)\r\n                        {\r\n                            var styleId = int.Parse(xr.GetAttribute(\"s\"), CultureInfo.InvariantCulture);\r\n                            SetStyleInner(row, 0, (styleId < 0 ? 0 : styleId));\r\n                        }\r\n                    }\r\n                    xr.Read();\r\n                }\r\n                else if (xr.LocalName == \"c\")\r\n                {\r\n                    var r = xr.GetAttribute(\"r\");\r\n                    if (r == null)\r\n                    {\r\n                        //Handle cells with no reference\r\n                        col++;\r\n                        address = new ExcelAddressBase(row, col, row, col);\r\n                    }\r\n                    else\r\n                    {\r\n                        address = new ExcelAddressBase(r);\r\n                        col = address._fromCol;\r\n                    }\r\n\r\n\r\n                    //Datetype\r\n                    if (xr.GetAttribute(\"t\") != null)\r\n                    {\r\n                        type = xr.GetAttribute(\"t\");\r\n                        //_types.SetValue(address._fromRow, address._fromCol, type); \r\n                    }\r\n                    else\r\n                    {\r\n                        type = \"\";\r\n                    }\r\n                    //Style\r\n                    if (xr.GetAttribute(\"s\") != null)\r\n                    {\r\n                        style = int.Parse(xr.GetAttribute(\"s\"));\r\n                        SetStyleInner(address._fromRow, address._fromCol, style < 0 ? 0 : style);\r\n                        //SetValueInner(address._fromRow, address._fromCol, null); //TODO:Better Performance ??\r\n                    }\r\n                    else\r\n                    {\r\n                        style = 0;\r\n                    }\r\n                    //Meta data. Meta data is only preserved by EPPlus at this point\r\n                    var cm = xr.GetAttribute(\"cm\");\r\n                    var vm = xr.GetAttribute(\"vm\");\r\n                    if (cm != null || vm != null)\r\n                    {\r\n                        _metadataStore.SetValue(\r\n                            address._fromRow,\r\n                            address._fromCol,\r\n                            new MetaDataReference()\r\n                            {\r\n                                cm = string.IsNullOrEmpty(cm) ? 0 : int.Parse(cm),\r\n                                vm = string.IsNullOrEmpty(vm) ? 0 : int.Parse(vm)\r\n                            });\r\n                    }\r\n                    ;\r\n\r\n                    xr.Read();\r\n                }\r\n                else if (xr.LocalName == \"v\")\r\n                {\r\n                    SetValueFromXml(xr, type, style, address._fromRow, address._fromCol);\r\n\r\n                    xr.Read();\r\n                }\r\n                else if (xr.LocalName == \"f\")\r\n                {\r\n                    string t = xr.GetAttribute(\"t\");\r\n\r\n                    var aca = xr.GetAttribute(\"aca\");\r\n                    var ca = xr.GetAttribute(\"ca\");\r\n                    //Meta data and formula settings. Meta data is only preserved by EPPlus at this point\r\n                    if (aca != null || ca != null)\r\n                    {\r\n                        var md = _metadataStore.GetValue(row, col);\r\n                        md.aca = aca == \"1\";\r\n                        md.ca = ca == \"1\";\r\n                        _metadataStore.SetValue(\r\n                            row,\r\n                            col,\r\n                            md);\r\n                    }\r\n\r\n                    if (t == null || t == \"normal\")\r\n                    {\r\n                        var formula = ConvertUtil.ExcelDecodeString(xr.ReadElementContentAsString());\r\n                        if (!string.IsNullOrEmpty(formula))\r\n                        {\r\n                            _formulas.SetValue(address._fromRow, address._fromCol, formula);\r\n                        }\r\n                        SetValueInner(address._fromRow, address._fromCol, null);\r\n                    }\r\n                    else if (t == \"shared\")\r\n                    {\r\n\r\n                        string si = xr.GetAttribute(\"si\");\r\n                        if (si != null)\r\n                        {\r\n                            var sfIndex = int.Parse(si);\r\n                            _formulas.SetValue(address._fromRow, address._fromCol, sfIndex);\r\n                            SetValueInner(address._fromRow, address._fromCol, null);\r\n                            string fAddress = xr.GetAttribute(\"ref\");\r\n                            string formula = ConvertUtil.ExcelDecodeString(xr.ReadElementContentAsString());\r\n                            if (formula != \"\")\r\n                            {\r\n                                _sharedFormulas.Add(sfIndex, new Formulas(SourceCodeTokenizer.Default) { Index = sfIndex, Formula = formula, Address = fAddress, StartRow = address._fromRow, StartCol = address._fromCol });\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            xr.Read();  //Something is wrong in the sheet, read next\r\n                        }\r\n                    }\r\n                    else if (t == \"array\")\r\n                    {\r\n                        string refAddress = xr.GetAttribute(\"ref\");\r\n                        string formula = xr.ReadElementContentAsString();\r\n                        var afIndex = GetMaxShareFunctionIndex(true);\r\n                        if (!string.IsNullOrEmpty(refAddress))\r\n                        {\r\n                            WriteArrayFormulaRange(refAddress, afIndex);\r\n                        }\r\n\r\n                        _sharedFormulas.Add(afIndex, new Formulas(SourceCodeTokenizer.Default) { Index = afIndex, Formula = formula, Address = refAddress, StartRow = address._fromRow, StartCol = address._fromCol, IsArray = true });\r\n                    }\r\n                    else if (t == \"dataTable\") //Unsupported\r\n                    {\r\n                        //TODO:Add support.\r\n                        xr.Read();\r\n                    }\r\n                    else // ??? some other type\r\n                    {\r\n                        xr.Read();  //Something is wrong in the sheet, read next\r\n                    }\r\n\r\n                }\r\n                else if (xr.LocalName == \"is\")   //Inline string\r\n                {\r\n                    xr.Read();\r\n                    if (xr.LocalName == \"t\")\r\n                    {\r\n                        SetValueInner(address._fromRow, address._fromCol, ConvertUtil.ExcelDecodeString(xr.ReadElementContentAsString()));\r\n                    }\r\n                    else\r\n                    {\r\n                        if (xr.LocalName == \"r\")\r\n                        {\r\n                            var rXml = xr.ReadOuterXml();\r\n                            while (xr.LocalName == \"r\")\r\n                            {\r\n                                rXml += xr.ReadOuterXml();\r\n                            }\r\n                            SetValueInner(address._fromRow, address._fromCol, rXml);\r\n                        }\r\n                        else\r\n                        {\r\n                            SetValueInner(address._fromRow, address._fromCol, xr.ReadOuterXml());\r\n                        }\r\n                        _flags.SetFlagValue(address._fromRow, address._fromCol, true, CellFlags.RichText);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "WriteArrayFormulaRange", "returns": "void", "params": ["string address", "int index"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var refAddress = new ExcelAddressBase(address);\r\n            for (int r = refAddress._fromRow; r <= refAddress._toRow; r++)\r\n            {\r\n                for (int c = refAddress._fromCol; c <= refAddress._toCol; c++)\r\n                {\r\n                    _formulas.SetValue(r, c, index);\r\n                    SetValueInner(r, c, null);\r\n                    _flags.SetFlagValue(r, c, true, CellFlags.ArrayFormula);\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "DoAddRow", "returns": "bool", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var c = xr.GetAttribute(\"r\") == null ? 0 : 1;\r\n            if (xr.GetAttribute(\"spans\") != null)\r\n            {\r\n                c++;\r\n            }\r\n            return xr.AttributeCount > c;\r\n        }"}, {"doc": "/// <summary>\r\n/// Load merged cells\r\n/// </summary>\r\n/// <param name = \"xr\"></param>", "signature": {"name": "LoadMergeCells", "returns": "void", "params": ["XmlReader xr"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (ReadUntil(xr, 1, \"mergeCells\", \"hyperlinks\", \"rowBreaks\", \"colBreaks\") && !xr.EOF)\r\n            {\r\n                while (xr.Read())\r\n                {\r\n                    if (xr.LocalName != \"mergeCell\") break;\r\n                    if (xr.NodeType == XmlNodeType.Element)\r\n                    {\r\n                        string address = xr.GetAttribute(\"ref\");\r\n                        _mergedCells.Add(new ExcelAddress(address), false);\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Update merged cells\r\n/// </summary>\r\n/// <param name = \"sw\">The writer</param>\r\n/// <param name = \"prefix\">Namespace prefix for the main schema</param>", "signature": {"name": "UpdateMergedCells", "returns": "void", "params": ["StreamWriter sw", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            sw.Write($\"<{prefix}mergeCells>\");\r\n            foreach (string address in _mergedCells.Distinct())\r\n            {\r\n                sw.Write($\"<{prefix}mergeCell ref=\\\"{address}\\\" />\");\r\n            }\r\n            sw.Write($\"</{prefix}mergeCells>\");\r\n        }"}, {"doc": "/// <summary>\r\n/// Reads a row from the XML reader\r\n/// </summary>\r\n/// <param name = \"xr\">The reader</param>\r\n/// <param name = \"row\">The row number</param>\r\n/// <returns></returns>", "signature": {"name": "AddRow", "returns": "RowInternal", "params": ["XmlReader xr", "int row"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            return new RowInternal()\r\n            {\r\n                Collapsed = GetBoolFromString(xr.GetAttribute(\"collapsed\")),\r\n                OutlineLevel = (xr.GetAttribute(\"outlineLevel\") == null ? (short)0 : short.Parse(xr.GetAttribute(\"outlineLevel\"), CultureInfo.InvariantCulture)),\r\n                Height = (xr.GetAttribute(\"ht\") == null ? -1 : double.Parse(xr.GetAttribute(\"ht\"), CultureInfo.InvariantCulture)),\r\n                Hidden = GetBoolFromString(xr.GetAttribute(\"hidden\")),\r\n                Phonetic = GetBoolFromString(xr.GetAttribute(\"ph\")),\r\n                CustomHeight = GetBoolFromString(xr.GetAttribute(\"customHeight\"))\r\n            };\r\n        }"}, {"doc": "", "signature": {"name": "SetValueFromXml", "returns": "void", "params": ["XmlReader xr", "string type", "int styleID", "int row", "int col"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            //XmlNode vnode = colNode.SelectSingleNode(\"d:v\", NameSpaceManager);\r\n            //if (vnode == null) return null;\r\n            if (type == \"s\")\r\n            {\r\n                int ix = xr.ReadElementContentAsInt();\r\n                SetValueInner(row, col, _package.Workbook._sharedStringsList[ix].Text);\r\n                if (_package.Workbook._sharedStringsList[ix].isRichText)\r\n                {\r\n                    _flags.SetFlagValue(row, col, true, CellFlags.RichText);\r\n                }\r\n            }\r\n            else if (type == \"str\")\r\n            {\r\n                SetValueInner(row, col, ConvertUtil.ExcelDecodeString(xr.ReadElementContentAsString()));\r\n            }\r\n            else if (type == \"b\")\r\n            {\r\n                SetValueInner(row, col, (xr.ReadElementContentAsString() != \"0\"));\r\n            }\r\n            else if (type == \"e\")\r\n            {\r\n                SetValueInner(row, col, GetErrorType(xr.ReadElementContentAsString()));\r\n            }\r\n            else\r\n            {\r\n                string v = xr.ReadElementContentAsString();\r\n                var nf = Workbook.Styles.CellXfs[styleID].NumberFormatId;\r\n                if ((nf >= 14 && nf <= 22) || (nf >= 45 && nf <= 47))\r\n                {\r\n                    double res;\r\n                    if (double.TryParse(v, NumberStyles.Any, CultureInfo.InvariantCulture, out res))\r\n                    {\r\n                        if (Workbook.Date1904)\r\n                        {\r\n                            res += ExcelWorkbook.date1904Offset;\r\n                        }\r\n                        if (res >= -657435.0 && res < 2958465.9999999)\r\n                        {\r\n                            SetValueInner(row, col, DateTime.FromOADate(res));\r\n                        }\r\n                        else\r\n                        {\r\n                            SetValueInner(row, col, res);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        SetValueInner(row, col, v);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    double d;\r\n                    if (double.TryParse(v, NumberStyles.Any, CultureInfo.InvariantCulture, out d))\r\n                    {\r\n                        SetValueInner(row, col, d);\r\n                    }\r\n                    else\r\n                    {\r\n                        SetValueInner(row, col, double.NaN);\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetErrorType", "returns": "object", "params": ["string v"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            return ExcelErrorValue.Parse(ConvertUtil._invariantTextInfo.ToUpper(v));\r\n            //switch(v.ToUpper())\r\n            //{\r\n            //    case \"#DIV/0!\":\r\n            //        return new ExcelErrorValue.cre(eErrorType.Div0);\r\n            //    case \"#REF!\":\r\n            //        return new ExcelErrorValue(eErrorType.Ref);\r\n            //    case \"#N/A\":\r\n            //        return new ExcelErrorValue(eErrorType.NA);\r\n            //    case \"#NAME?\":\r\n            //        return new ExcelErrorValue(eErrorType.Name);\r\n            //    case \"#NULL!\":\r\n            //        return new ExcelErrorValue(eErrorType.Null);\r\n            //    case \"#NUM!\":\r\n            //        return new ExcelErrorValue(eErrorType.Num);\r\n            //    default:\r\n            //        return new ExcelErrorValue(eErrorType.Value);\r\n            //}\r\n        }"}, {"doc": "/// <summary>\r\n/// Provides access to an individual row within the worksheet so you can set its properties.\r\n/// </summary>\r\n/// <param name = \"row\">The row number in the worksheet</param>\r\n/// <returns></returns>", "signature": {"name": "Row", "returns": "ExcelRow", "params": ["int row"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            if (row < 1 || row > ExcelPackage.MaxRows)\r\n            {\r\n                throw (new ArgumentException(\"Row number out of bounds\"));\r\n            }\r\n            return new ExcelRow(this, row);\r\n            //return r;\r\n        }"}, {"doc": "/// <summary>\r\n/// Provides access to an individual column within the worksheet so you can set its properties.\r\n/// </summary>\r\n/// <param name = \"col\">The column number in the worksheet</param>\r\n/// <returns></returns>", "signature": {"name": "Column", "returns": "ExcelColumn", "params": ["int col"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            if (col < 1 || col > ExcelPackage.MaxColumns)\r\n            {\r\n                throw (new ArgumentException(\"Column number out of bounds\"));\r\n            }\r\n            var column = GetValueInner(0, col) as ExcelColumn;\r\n            if (column != null)\r\n            {\r\n\r\n                if (column.ColumnMin != column.ColumnMax)\r\n                {\r\n                    int maxCol = column.ColumnMax;\r\n                    column.ColumnMax = col;\r\n                    ExcelColumn copy = CopyColumn(column, col + 1, maxCol);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                int r = 0, c = col;\r\n                if (_values.PrevCell(ref r, ref c))\r\n                {\r\n                    column = GetValueInner(0, c) as ExcelColumn;\r\n                    int maxCol = column.ColumnMax;\r\n                    if (maxCol >= col)\r\n                    {\r\n                        column.ColumnMax = col - 1;\r\n                        if (maxCol > col)\r\n                        {\r\n                            ExcelColumn newC = CopyColumn(column, col + 1, maxCol);\r\n                        }\r\n                        return CopyColumn(column, col, col);\r\n                    }\r\n                }\r\n\r\n                column = new ExcelColumn(this, col);\r\n                SetValueInner(0, col, column);\r\n            }\r\n            return column;\r\n        }"}, {"doc": "/// <summary>\r\n/// Returns the name of the worksheet\r\n/// </summary>\r\n/// <returns>The name of the worksheet</returns>", "signature": {"name": "ToString", "returns": "string", "params": [], "modifier": ["public", "override"], "annotations": [], "generics": []}, "code": "{\r\n            return Name;\r\n        }"}, {"doc": "", "signature": {"name": "CopyColumn", "returns": "ExcelColumn", "params": ["ExcelColumn c", "int col", "int maxCol"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            ExcelColumn newC = new ExcelColumn(this, col);\r\n            newC.ColumnMax = maxCol < ExcelPackage.MaxColumns ? maxCol : ExcelPackage.MaxColumns;\r\n            if (c.StyleName != \"\")\r\n                newC.StyleName = c.StyleName;\r\n            else\r\n                newC.StyleID = c.StyleID;\r\n\r\n            newC.OutlineLevel = c.OutlineLevel;\r\n            newC.Phonetic = c.Phonetic;\r\n            newC.BestFit = c.BestFit;\r\n            //_columns.Add(newC);\r\n            SetValueInner(0, col, newC);\r\n            newC._width = c._width;\r\n            newC._hidden = c._hidden;\r\n            return newC;\r\n        }"}, {"doc": "/// <summary>\r\n/// Make the current worksheet active.\r\n/// </summary>", "signature": {"name": "Select", "returns": "void", "params": [], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            View.TabSelected = true;\r\n        }"}, {"doc": "/// <summary>\r\n/// Selects a range in the worksheet. The active cell is the topmost cell.\r\n/// Make the current worksheet active.\r\n/// </summary>\r\n/// <param name = \"Address\">An address range</param>", "signature": {"name": "Select", "returns": "void", "params": ["string Address"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            Select(Address, true);\r\n        }"}, {"doc": "/// <summary>\r\n/// Selects a range in the worksheet. The actice cell is the topmost cell.\r\n/// </summary>\r\n/// <param name = \"Address\">A range of cells</param>\r\n/// <param name = \"SelectSheet\">Make the sheet active</param>", "signature": {"name": "Select", "returns": "void", "params": ["string Address", "bool SelectSheet"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            int fromCol, fromRow, toCol, toRow;\r\n            //Get rows and columns and validate as well\r\n            ExcelCellBase.GetRowColFromAddress(Address, out fromRow, out fromCol, out toRow, out toCol);\r\n\r\n            if (SelectSheet)\r\n            {\r\n                View.TabSelected = true;\r\n            }\r\n            View.SelectedRange = Address;\r\n            View.ActiveCell = ExcelCellBase.GetAddress(fromRow, fromCol);\r\n        }"}, {"doc": "/// <summary>\r\n/// Selects a range in the worksheet. The active cell is the topmost cell of the first address.\r\n/// Make the current worksheet active.\r\n/// </summary>\r\n/// <param name = \"Address\">An address range</param>", "signature": {"name": "Select", "returns": "void", "params": ["ExcelAddress Address"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            Select(Address, true);\r\n        }"}, {"doc": "/// <summary>\r\n/// Selects a range in the worksheet. The active cell is the topmost cell of the first address.\r\n/// </summary>\r\n/// <param name = \"Address\">A range of cells</param>\r\n/// <param name = \"SelectSheet\">Make the sheet active</param>", "signature": {"name": "Select", "returns": "void", "params": ["ExcelAddress Address", "bool SelectSheet"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n\r\n            CheckSheetType();\r\n            if (SelectSheet)\r\n            {\r\n                View.TabSelected = true;\r\n            }\r\n            string selAddress = ExcelCellBase.GetAddress(Address.Start.Row, Address.Start.Column) + \":\" + ExcelCellBase.GetAddress(Address.End.Row, Address.End.Column);\r\n            if (Address.Addresses != null)\r\n            {\r\n                foreach (var a in Address.Addresses)\r\n                {\r\n                    selAddress += \" \" + ExcelCellBase.GetAddress(a.Start.Row, a.Start.Column) + \":\" + ExcelCellBase.GetAddress(a.End.Row, a.End.Column);\r\n                }\r\n            }\r\n            View.SelectedRange = selAddress;\r\n            View.ActiveCell = ExcelCellBase.GetAddress(Address.Start.Row, Address.Start.Column);\r\n        }"}, {"doc": "/// <summary>\r\n/// Inserts new rows into the spreadsheet.  Existing rows below the position are \r\n/// shifted down.  All formula are updated to take account of the new row(s).\r\n/// </summary>\r\n/// <param name = \"rowFrom\">The position of the new row(s)</param>\r\n/// <param name = \"rows\">Number of rows to insert</param>", "signature": {"name": "InsertRow", "returns": "void", "params": ["int rowFrom", "int rows"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            InsertRow(rowFrom, rows, 0);\r\n        }"}, {"doc": "/// <summary>\r\n/// Inserts new rows into the spreadsheet.  Existing rows below the position are \r\n/// shifted down.  All formula are updated to take account of the new row(s).\r\n/// </summary>\r\n/// <param name = \"rowFrom\">The position of the new row(s)</param>\r\n/// <param name = \"rows\">Number of rows to insert.</param>\r\n/// <param name = \"copyStylesFromRow\">Copy Styles from this row. Applied to all inserted rows</param>", "signature": {"name": "InsertRow", "returns": "void", "params": ["int rowFrom", "int rows", "int copyStylesFromRow"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            WorksheetRangeInsertHelper.InsertRow(this, rowFrom, rows, copyStylesFromRow);\r\n        }"}, {"doc": "/// <summary>\r\n/// Inserts new columns into the spreadsheet.  Existing columns below the position are \r\n/// shifted down.  All formula are updated to take account of the new column(s).\r\n/// </summary>\r\n/// <param name = \"columnFrom\">The position of the new column(s)</param>\r\n/// <param name = \"columns\">Number of columns to insert</param>", "signature": {"name": "InsertColumn", "returns": "void", "params": ["int columnFrom", "int columns"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            InsertColumn(columnFrom, columns, 0);\r\n        }"}, {"doc": "///<summary>\r\n/// Inserts new columns into the spreadsheet.  Existing column to the left are \r\n/// shifted.  All formula are updated to take account of the new column(s).\r\n/// </summary>\r\n/// <param name = \"columnFrom\">The position of the new column(s)</param>\r\n/// <param name = \"columns\">Number of columns to insert.</param>\r\n/// <param name = \"copyStylesFromColumn\">Copy Styles from this column. Applied to all inserted columns</param>", "signature": {"name": "InsertColumn", "returns": "void", "params": ["int columnFrom", "int columns", "int copyStylesFromColumn"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            WorksheetRangeInsertHelper.InsertColumn(this, columnFrom, columns, copyStylesFromColumn);\r\n        }"}, {"doc": "/// <summary>\r\n/// Delete the specified row from the worksheet.\r\n/// </summary>\r\n/// <param name = \"row\">A row to be deleted</param>", "signature": {"name": "DeleteRow", "returns": "void", "params": ["int row"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            DeleteRow(row, 1);\r\n        }"}, {"doc": "/// <summary>\r\n/// Deletes the specified rows from the worksheet.\r\n/// </summary>\r\n/// <param name = \"rowFrom\">The number of the start row to be deleted</param>\r\n/// <param name = \"rows\">Number of rows to delete</param>\r\n/// <param name = \"shiftOtherRowsUp\">Not used. Rows are always shifted</param>", "signature": {"name": "DeleteRow", "returns": "void", "params": ["int rowFrom", "int rows", "bool shiftOtherRowsUp"], "modifier": ["public"], "annotations": ["Obsolete"], "generics": []}, "code": "{\r\n            DeleteRow(rowFrom, rows);\r\n        }"}, {"doc": "/// <summary>\r\n/// Delete the specified column from the worksheet.\r\n/// </summary>\r\n/// <param name = \"column\">The column to be deleted</param>", "signature": {"name": "DeleteColumn", "returns": "void", "params": ["int column"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            DeleteColumn(column, 1);\r\n        }"}, {"doc": "/// <summary>\r\n/// Delete the specified columns from the worksheet.\r\n/// </summary>\r\n/// <param name = \"columnFrom\">The start column</param>\r\n/// <param name = \"columns\">Number of columns to delete</param>", "signature": {"name": "DeleteColumn", "returns": "void", "params": ["int columnFrom", "int columns"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            WorksheetRangeDeleteHelper.DeleteColumn(this, columnFrom, columns);\r\n        }"}, {"doc": "/// <summary>\r\n/// Get the cell value from thw worksheet\r\n/// </summary>\r\n/// <param name = \"Row\">The row number</param>\r\n/// <param name = \"Column\">The row number</param>\r\n/// <returns>The value</returns>", "signature": {"name": "GetValue", "returns": "object", "params": ["int Row", "int Column"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            var v = GetValueInner(Row, Column);\r\n            if (v != null)\r\n            {\r\n                //var cell = ((ExcelCell)_cells[cellID]);\r\n                if (_flags.GetFlagValue(Row, Column, CellFlags.RichText))\r\n                {\r\n                    return (object)Cells[Row, Column].RichText.Text;\r\n                }\r\n                else\r\n                {\r\n                    return v;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Get a strongly typed cell value from the worksheet\r\n/// </summary>\r\n/// <typeparam name = \"T\">The type</typeparam>\r\n/// <param name = \"Row\">The row number</param>\r\n/// <param name = \"Column\">The row number</param>\r\n/// <returns>The value. If the value can't be converted to the specified type, the default value will be returned</returns>", "signature": {"name": "GetValue", "returns": "T", "params": ["int Row", "int Column"], "modifier": ["public"], "annotations": [], "generics": ["T"]}, "code": "{\r\n            CheckSheetType();\r\n            //ulong cellID=ExcelCellBase.GetCellID(SheetID, Row, Column);\r\n            var v = GetValueInner(Row, Column);\r\n            if (v == null)\r\n            {\r\n                return default(T);\r\n            }\r\n\r\n            //var cell=((ExcelCell)_cells[cellID]);\r\n            if (_flags.GetFlagValue(Row, Column, CellFlags.RichText))\r\n            {\r\n                return (T)(object)Cells[Row, Column].RichText.Text;\r\n            }\r\n\r\n            return ConvertUtil.GetTypedCellValue<T>(v);\r\n        }"}, {"doc": "/// <summary>\r\n/// Set the value of a cell\r\n/// </summary>\r\n/// <param name = \"Row\">The row number</param>\r\n/// <param name = \"Column\">The column number</param>\r\n/// <param name = \"Value\">The value</param>", "signature": {"name": "SetValue", "returns": "void", "params": ["int Row", "int Column", "object Value"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            if (Row < 1 || Column < 1 || Row > ExcelPackage.MaxRows && Column > ExcelPackage.MaxColumns)\r\n            {\r\n                throw new ArgumentOutOfRangeException(\"Row or Column out of range\");\r\n            }\r\n            SetValueInner(Row, Column, Value);\r\n        }"}, {"doc": "/// <summary>\r\n/// Set the value of a cell\r\n/// </summary>\r\n/// <param name = \"Address\">The Excel address</param>\r\n/// <param name = \"Value\">The value</param>", "signature": {"name": "SetValue", "returns": "void", "params": ["string Address", "object Value"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            CheckSheetType();\r\n            int row, col;\r\n            ExcelAddressBase.GetRowCol(Address, out row, out col, true);\r\n            if (row < 1 || col < 1 || row > ExcelPackage.MaxRows && col > ExcelPackage.MaxColumns)\r\n            {\r\n                throw new ArgumentOutOfRangeException(\"Address is invalid or out of range\");\r\n            }\r\n            SetValueInner(row, col, Value);\r\n        }"}, {"doc": "/// <summary>\r\n/// Get MergeCell Index No\r\n/// </summary>\r\n/// <param name = \"row\"></param>\r\n/// <param name = \"column\"></param>\r\n/// <returns></returns>", "signature": {"name": "GetMergeCellId", "returns": "int", "params": ["int row", "int column"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            for (int i = 0; i < _mergedCells.Count; i++)\r\n            {\r\n                if (!string.IsNullOrEmpty(_mergedCells[i]))\r\n                {\r\n                    ExcelRange range = Cells[_mergedCells[i]];\r\n\r\n                    if (range.Start.Row <= row && row <= range.End.Row)\r\n                    {\r\n                        if (range.Start.Column <= column && column <= range.End.Column)\r\n                        {\r\n                            return i + 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        }"}, {"doc": "", "signature": {"name": "UpdateSheetNameInFormulas", "returns": "void", "params": ["string newName", "int rowFrom", "int rows", "int columnFrom", "int columns"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            lock (this)\r\n            {\r\n                foreach (var f in _sharedFormulas.Values)\r\n                {\r\n                    f.Formula = ExcelCellBase.UpdateFormulaReferences(f.Formula, rows, columns, rowFrom, columnFrom, Name, newName);\r\n                }\r\n                using (var cse = new CellStoreEnumerator<object>(_formulas))\r\n                {\r\n                    while (cse.Next())\r\n                    {\r\n                        if (cse.Value is string)\r\n                        {\r\n                            cse.Value = ExcelCellBase.UpdateFormulaReferences(cse.Value.ToString(), rows, columns, rowFrom, columnFrom, Name, newName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "UpdateSheetNameInFormulas", "returns": "void", "params": ["string oldName", "string newName"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (string.IsNullOrEmpty(oldName) || string.IsNullOrEmpty(newName))\r\n                throw new ArgumentNullException(\"Sheet name can't be empty\");\r\n\r\n            lock (this)\r\n            {\r\n                foreach (var sf in _sharedFormulas.Values)\r\n                {\r\n                    sf.Formula = ExcelCellBase.UpdateSheetNameInFormula(sf.Formula, oldName, newName);\r\n                }\r\n                using (var cse = new CellStoreEnumerator<object>(_formulas))\r\n                {\r\n                    while (cse.Next())\r\n                    {\r\n                        if (cse.Value is string v) //Non shared Formulas \r\n                        {\r\n                            cse.Value = ExcelCellBase.UpdateSheetNameInFormula(v, oldName, newName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "Save", "returns": "void", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            DeletePrinterSettings();\r\n\r\n            if (_worksheetXml != null)\r\n            {\r\n                SaveDrawings();\r\n                if (!(this is ExcelChartsheet))\r\n                {\r\n                    // save the header & footer (if defined)\r\n                    if (_headerFooter != null)\r\n                        HeaderFooter.Save();\r\n\r\n                    var d = Dimension;\r\n                    if (d == null)\r\n                    {\r\n                        this.DeleteAllNode(\"d:dimension/@ref\");\r\n                    }\r\n                    else\r\n                    {\r\n                        this.SetXmlNodeString(\"d:dimension/@ref\", d.Address);\r\n                    }\r\n\r\n\r\n                    if (Drawings.Count == 0)\r\n                    {\r\n                        //Remove node if no drawings exists.\r\n                        DeleteNode(\"d:drawing\");\r\n                    }\r\n\r\n                    SaveComments();\r\n                    SaveVmlDrawings();\r\n                    SaveThreadedComments();\r\n                    HeaderFooter.SaveHeaderFooterImages();\r\n                    SaveTables();\r\n                    if (HasLoadedPivotTables) SavePivotTables();\r\n                    SaveSlicers();\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SaveDrawings", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (Drawings.UriDrawing != null)\r\n            {\r\n                if (Drawings.Count == 0)\r\n                {\r\n                    Part.DeleteRelationship(Drawings._drawingRelation.Id);\r\n                    _package.ZipPackage.DeletePart(Drawings.UriDrawing);\r\n                }\r\n                else\r\n                {\r\n                    RowHeightCache = new Dictionary<int, double>();\r\n                    foreach (ExcelDrawing d in Drawings)\r\n                    {\r\n                        d.AdjustPositionAndSize();\r\n                        HandleSaveForIndividualDrawings(d);\r\n                    }\r\n                    Packaging.ZipPackagePart partPack = Drawings.Part;\r\n                    var stream = partPack.GetStream(FileMode.Create, FileAccess.Write);\r\n                    var xr = new XmlTextWriter(stream, Encoding.UTF8);\r\n                    xr.Formatting = Formatting.None;\r\n\r\n                    Drawings.DrawingXml.Save(xr);\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "HandleSaveForIndividualDrawings", "returns": "void", "params": ["ExcelDrawing d"], "modifier": ["private", "static"], "annotations": [], "generics": []}, "code": "{\r\n            if (d is ExcelChart c)\r\n            {\r\n                var xr = new XmlTextWriter(c.Part.GetStream(FileMode.Create, FileAccess.Write), Encoding.UTF8);\r\n                xr.Formatting = Formatting.None;\r\n                c.ChartXml.Save(xr);\r\n            }\r\n            else if (d is ExcelSlicer<ExcelTableSlicerCache> s)\r\n            {\r\n                s.Cache.SlicerCacheXml.Save(s.Cache.Part.GetStream(FileMode.Create, FileAccess.Write));\r\n            }\r\n            else if (d is ExcelSlicer<ExcelPivotTableSlicerCache> p)\r\n            {\r\n                p.Cache.UpdateItemsXml();\r\n                p.Cache.SlicerCacheXml.Save(p.Cache.Part.GetStream(FileMode.Create, FileAccess.Write));\r\n            }\r\n            else if (d is ExcelControl ctrl)\r\n            {\r\n                ctrl.ControlPropertiesXml.Save(ctrl.ControlPropertiesPart.GetStream(FileMode.Create, FileAccess.Write));\r\n                ctrl.UpdateXml();\r\n            }\r\n            if (d is ExcelGroupShape grp)\r\n            {\r\n                foreach (var sd in grp.Drawings)\r\n                {\r\n                    HandleSaveForIndividualDrawings(sd);\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SaveSlicers", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            SlicerXmlSources.Save();\r\n        }"}, {"doc": "", "signature": {"name": "SaveThreadedComments", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (ThreadedComments != null && ThreadedComments.Threads != null)\r\n            {\r\n                if (!ThreadedComments.Threads.Any(x => x.Comments.Count > 0) && _package.ZipPackage.PartExists(ThreadedCommentsUri))\r\n                {\r\n                    _package.ZipPackage.DeletePart(ThreadedCommentsUri);\r\n                }\r\n                else if (ThreadedComments.Threads.Count() > 0)\r\n                {\r\n                    if (!_package.ZipPackage.PartExists(ThreadedCommentsUri))\r\n                    {\r\n                        var tcUri = ThreadedCommentsUri;\r\n                        _package.ZipPackage.CreatePart(tcUri, \"application/vnd.ms-excel.threadedcomments+xml\");\r\n                        Part.CreateRelationship(tcUri, Packaging.TargetMode.Internal, ExcelPackage.schemaThreadedComment);\r\n                    }\r\n                    _package.SavePart(ThreadedCommentsUri, ThreadedComments.ThreadedCommentsXml);\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SaveHandler", "returns": "void", "params": ["ZipOutputStream stream", "CompressionLevel compressionLevel", "string fileName"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            //Init Zip\r\n            stream.CodecBufferSize = 8096;\r\n            stream.CompressionLevel = (OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)compressionLevel;\r\n            stream.PutNextEntry(fileName);\r\n\r\n\r\n            SaveXml(stream);\r\n        }"}, {"doc": "///// <summary>\n///// Saves the worksheet to the package.\n///// </summary>\n//internal void Save()  // Worksheet Save\n//{\n//    DeletePrinterSettings();\n//    if (_worksheetXml != null)\n//    {\n//        // save the header & footer (if defined)\n//        if (_headerFooter != null)\n//            HeaderFooter.Save();\n//        var d = Dimension;\n//        if (d == null)\n//        {\n//            this.DeleteAllNode(\"d:dimension/@ref\");\n//        }\n//        else\n//        {\n//            this.SetXmlNodeString(\"d:dimension/@ref\", d.Address);\n//        }\n//        if (_drawings != null && _drawings.Count == 0)\n//        {\n//            //Remove node if no drawings exists.\n//            DeleteNode(\"d:drawing\");\n//        }\n//        SaveComments();\n//        HeaderFooter.SaveHeaderFooterImages();\n//        SaveTables();\n//        SavePivotTables();\n//        SaveXml();\n//    }\n//    if (Drawings.UriDrawing!=null)\n//    {\n//        if (Drawings.Count == 0)\n//        {\n//            Part.DeleteRelationship(Drawings._drawingRelation.Id);\n//            _package.Package.DeletePart(Drawings.UriDrawing);\n//        }\n//        else\n//        {\n//            Packaging.ZipPackagePart partPack = Drawings.Part;\n//            Drawings.DrawingXml.Save(partPack.GetStream(FileMode.Create, FileAccess.Write));\n//            foreach (ExcelDrawing d in Drawings)\n//            {\n//                if (d is ExcelChart)\n//                {\n//                    ExcelChart c = (ExcelChart)d;\n//                    c.ChartXml.Save(c.Part.GetStream(FileMode.Create, FileAccess.Write));\n//                }\n//            }\n//        }\n//    }\n//}\n/// <summary>\r\n/// Delete the printersettings relationship and part.\r\n/// </summary>", "signature": {"name": "DeletePrinterSettings", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            //Delete the relationship from the pageSetup tag\r\n            XmlAttribute attr = (XmlAttribute)WorksheetXml.SelectSingleNode(\"//d:pageSetup/@r:id\", NameSpaceManager);\r\n            if (attr != null)\r\n            {\r\n                string relID = attr.Value;\r\n                //First delete the attribute from the XML\r\n                attr.OwnerElement.Attributes.Remove(attr);\r\n                if (Part.RelationshipExists(relID))\r\n                {\r\n                    var rel = Part.GetRelationship(relID);\r\n                    Uri printerSettingsUri = UriHelper.ResolvePartUri(rel.SourceUri, rel.TargetUri);\r\n                    Part.DeleteRelationship(rel.Id);\r\n\r\n                    //Delete the part from the package\r\n                    if (_package.ZipPackage.PartExists(printerSettingsUri))\r\n                    {\r\n                        _package.ZipPackage.DeletePart(printerSettingsUri);\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SaveComments", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (_comments != null)\r\n            {\r\n                if (_comments.Count == 0)\r\n                {\r\n                    if (_comments.Uri != null)\r\n                    {\r\n                        Part.DeleteRelationship(_comments.RelId);\r\n                        if (_package.ZipPackage.PartExists(_comments.Uri))\r\n                        {\r\n                            _package.ZipPackage.DeletePart(_comments.Uri);\r\n                        }\r\n                    }\r\n                    if (VmlDrawings.Count == 0)\r\n                    {\r\n                        RemoveLegacyDrawingRel(VmlDrawings.RelId);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (_comments.Uri == null)\r\n                    {\r\n                        var id = SheetId;\r\n                        _comments.Uri = XmlHelper.GetNewUri(_package.ZipPackage, @\"/xl/comments{0}.xml\", ref id); //Issue 236-Part already exists fix\r\n                    }\r\n                    if (_comments.Part == null)\r\n                    {\r\n                        _comments.Part = _package.ZipPackage.CreatePart(_comments.Uri, \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\", _package.Compression);\r\n                        var rel = Part.CreateRelationship(UriHelper.GetRelativeUri(WorksheetUri, _comments.Uri), Packaging.TargetMode.Internal, ExcelPackage.schemaRelationships + \"/comments\");\r\n                    }\r\n                    _comments.CommentXml.Save(_comments.Part.GetStream(FileMode.Create));\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SaveVmlDrawings", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (_vmlDrawings != null)\r\n            {\r\n                if (_vmlDrawings.Count == 0)\r\n                {\r\n                    if (_vmlDrawings.Part != null)\r\n                    {\r\n                        Part.DeleteRelationship(_vmlDrawings.RelId);\r\n                        if (_package.ZipPackage.PartExists(_vmlDrawings.Uri))\r\n                        {\r\n                            _package.ZipPackage.DeletePart(_vmlDrawings.Uri);\r\n                        }\r\n                        DeleteNode($\"d:legacyDrawing[@r:id='{_vmlDrawings.RelId}']\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (_vmlDrawings.Uri == null)\r\n                    {\r\n                        var id = SheetId;\r\n                        _vmlDrawings.Uri = XmlHelper.GetNewUri(_package.ZipPackage, @\"/xl/drawings/vmlDrawing{0}.vml\", ref id);\r\n                    }\r\n                    if (_vmlDrawings.Part == null)\r\n                    {\r\n                        _vmlDrawings.Part = _package.ZipPackage.CreatePart(_vmlDrawings.Uri, \"application/vnd.openxmlformats-officedocument.vmlDrawing\", _package.Compression);\r\n                        var rel = Part.CreateRelationship(UriHelper.GetRelativeUri(WorksheetUri, _vmlDrawings.Uri), Packaging.TargetMode.Internal, ExcelPackage.schemaRelationships + \"/vmlDrawing\");\r\n                        SetXmlNodeString(\"d:legacyDrawing/@r:id\", rel.Id);\r\n                        _vmlDrawings.RelId = rel.Id;\r\n                    }\r\n\r\n                    //Save an related image to drawing fills\r\n                    foreach (var d in _vmlDrawings)\r\n                    {\r\n                        if (d is ExcelVmlDrawingControl c)\r\n                            if (c._fill?._patternPictureSettings?._image != null)\r\n                            {\r\n                                c._fill._patternPictureSettings.SaveImage();\r\n                            }\r\n                    }\r\n\r\n                    _vmlDrawings.VmlDrawingXml.Save(_vmlDrawings.Part.GetStream(FileMode.Create));\r\n                }\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Save all table data\r\n/// </summary>", "signature": {"name": "SaveTables", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            foreach (var tbl in Tables)\r\n            {\r\n                if (tbl.ShowFilter)\r\n                {\r\n                    tbl.AutoFilter.Save();\r\n                }\r\n                if (tbl.ShowHeader || tbl.ShowTotal)\r\n                {\r\n                    int colNum = tbl.Address._fromCol;\r\n                    var colVal = new HashSet<string>();\r\n                    foreach (var col in tbl.Columns)\r\n                    {\r\n                        string n = col.Name.ToLowerInvariant();\r\n                        if (tbl.ShowHeader)\r\n                        {\r\n                            n = tbl.WorkSheet.GetValue<string>(tbl.Address._fromRow,\r\n                                tbl.Address._fromCol + col.Position);\r\n                            if (string.IsNullOrEmpty(n))\r\n                            {\r\n                                n = col.Name.ToLowerInvariant();\r\n                                SetValueInner(tbl.Address._fromRow, colNum, ConvertUtil.ExcelDecodeString(col.Name));\r\n                            }\r\n                            else\r\n                            {\r\n                                col.Name = n;\r\n                                SetValueInner(tbl.Address._fromRow, colNum, ConvertUtil.ExcelDecodeString(col.Name));\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            n = col.Name.ToLowerInvariant();\r\n                        }\r\n\r\n                        if (colVal.Contains(n))\r\n                        {\r\n                            throw (new InvalidDataException(string.Format(\"Table {0} Column {1} does not have a unique name.\", tbl.Name, col.Name)));\r\n                        }\r\n                        colVal.Add(n);\r\n                        colNum++;\r\n                    }\r\n                }\r\n                if (tbl.Part == null)\r\n                {\r\n                    var id = tbl.Id;\r\n                    tbl.TableUri = GetNewUri(_package.ZipPackage, @\"/xl/tables/table{0}.xml\", ref id);\r\n                    tbl.Id = id;\r\n                    tbl.Part = _package.ZipPackage.CreatePart(tbl.TableUri, \"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\", Workbook._package.Compression);\r\n                    var stream = tbl.Part.GetStream(FileMode.Create);\r\n                    tbl.TableXml.Save(stream);\r\n                    var rel = Part.CreateRelationship(UriHelper.GetRelativeUri(WorksheetUri, tbl.TableUri), Packaging.TargetMode.Internal, ExcelPackage.schemaRelationships + \"/table\");\r\n                    tbl.RelationshipID = rel.Id;\r\n\r\n                    CreateNode(\"d:tableParts\");\r\n                    XmlNode tbls = TopNode.SelectSingleNode(\"d:tableParts\", NameSpaceManager);\r\n\r\n                    var tblNode = tbls.OwnerDocument.CreateElement(\"tablePart\", ExcelPackage.schemaMain);\r\n                    tbls.AppendChild(tblNode);\r\n                    tblNode.SetAttribute(\"id\", ExcelPackage.schemaRelationships, rel.Id);\r\n                }\r\n                else\r\n                {\r\n                    var stream = tbl.Part.GetStream(FileMode.Create);\r\n                    tbl.TableXml.Save(stream);\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SetTableTotalFunction", "returns": "void", "params": ["ExcelTable tbl", "ExcelTableColumn col", "int colNum = -1"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            if (tbl.ShowTotal == false) return;\r\n            if (colNum == -1)\r\n            {\r\n                for (int i = 0; i < tbl.Columns.Count; i++)\r\n                {\r\n                    if (tbl.Columns[i].Name == col.Name)\r\n                    {\r\n                        colNum = tbl.Address._fromCol + i;\r\n                    }\r\n                }\r\n            }\r\n            if (col.TotalsRowFunction == RowFunctions.Custom)\r\n            {\r\n                SetFormula(tbl.Address._toRow, colNum, col.TotalsRowFormula);\r\n            }\r\n            else if (col.TotalsRowFunction != RowFunctions.None)\r\n            {\r\n                switch (col.TotalsRowFunction)\r\n                {\r\n                    case RowFunctions.Average:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"101\"));\r\n                        break;\r\n                    case RowFunctions.CountNums:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"102\"));\r\n                        break;\r\n                    case RowFunctions.Count:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"103\"));\r\n                        break;\r\n                    case RowFunctions.Max:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"104\"));\r\n                        break;\r\n                    case RowFunctions.Min:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"105\"));\r\n                        break;\r\n                    case RowFunctions.StdDev:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"107\"));\r\n                        break;\r\n                    case RowFunctions.Var:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"110\"));\r\n                        break;\r\n                    case RowFunctions.Sum:\r\n                        SetFormula(tbl.Address._toRow, colNum, GetTotalFunction(col, \"109\"));\r\n                        break;\r\n                    default:\r\n                        throw (new Exception(\"Unknown RowFunction enum\"));\r\n                }\r\n            }\r\n            else\r\n            {\r\n                SetValueInner(tbl.Address._toRow, colNum, col.TotalsRowLabel);\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "SetFormula", "returns": "void", "params": ["int row", "int col", "object value"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            _formulas.SetValue(row, col, value);\r\n            if (!ExistsValueInner(row, col)) SetValueInner(row, col, null);\r\n        }"}, {"doc": "//internal void SetStyle(int row, int col, int value)\n//{\n//    SetStyleInner(row, col, value);\n//    if(!_values.Exists(row,col)) SetValueInner(row, col, null);\n//}", "signature": {"name": "SavePivotTables", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            foreach (var pt in PivotTables)\r\n            {\r\n                pt.Save();\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetTotalFunction", "returns": "string", "params": ["ExcelTableColumn col", "string funcNum"], "modifier": ["private", "static"], "annotations": [], "generics": []}, "code": "{\r\n            var escapedName = col.Name.Replace(\"'\", \"''\");\r\n            escapedName = escapedName.Replace(\"[\", \"'[\");\r\n            escapedName = escapedName.Replace(\"]\", \"']\");\r\n            escapedName = escapedName.Replace(\"#\", \"'#\");\r\n            return string.Format(\"SUBTOTAL({0},{1}[{2}])\", funcNum, col._tbl.Name, escapedName);\r\n        }"}, {"doc": "", "signature": {"name": "SaveXml", "returns": "void", "params": ["Stream stream"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            //Create the nodes if they do not exist.\r\n            StreamWriter sw = new StreamWriter(stream, System.Text.Encoding.UTF8, 65536);\r\n            if (this is ExcelChartsheet)\r\n            {\r\n                sw.Write(_worksheetXml.OuterXml);\r\n            }\r\n            else\r\n            {\r\n                if (_autoFilter != null)\r\n                {\r\n                    _autoFilter.Save();\r\n                }\r\n                CreateNode(\"d:cols\");\r\n                CreateNode(\"d:sheetData\");\r\n                CreateNode(\"d:mergeCells\");\r\n                CreateNode(\"d:hyperlinks\");\r\n                CreateNode(\"d:rowBreaks\");\r\n                CreateNode(\"d:colBreaks\");\r\n\r\n                var xml = _worksheetXml.OuterXml;\r\n                int colStart = 0, colEnd = 0;\r\n                GetBlockPos(xml, \"cols\", ref colStart, ref colEnd);\r\n\r\n                sw.Write(xml.Substring(0, colStart));\r\n                var prefix = GetNameSpacePrefix();\r\n\r\n                UpdateColumnData(sw, prefix);\r\n\r\n                int cellStart = colEnd, cellEnd = colEnd;\r\n                GetBlockPos(xml, \"sheetData\", ref cellStart, ref cellEnd);\r\n\r\n                sw.Write(xml.Substring(colEnd, cellStart - colEnd));\r\n                UpdateRowCellData(sw, prefix);\r\n\r\n                int mergeStart = cellEnd, mergeEnd = cellEnd;\r\n\r\n                GetBlockPos(xml, \"mergeCells\", ref mergeStart, ref mergeEnd);\r\n                sw.Write(xml.Substring(cellEnd, mergeStart - cellEnd));\r\n\r\n                _mergedCells.CleanupMergedCells();\r\n                if (_mergedCells.Count > 0)\r\n                {\r\n                    UpdateMergedCells(sw, prefix);\r\n                }\r\n\r\n                int hyperStart = mergeEnd, hyperEnd = mergeEnd;\r\n                GetBlockPos(xml, \"hyperlinks\", ref hyperStart, ref hyperEnd);\r\n                sw.Write(xml.Substring(mergeEnd, hyperStart - mergeEnd));\r\n                UpdateHyperLinks(sw, prefix);\r\n\r\n                int rowBreakStart = hyperEnd, rowBreakEnd = hyperEnd;\r\n                GetBlockPos(xml, \"rowBreaks\", ref rowBreakStart, ref rowBreakEnd);\r\n                sw.Write(xml.Substring(hyperEnd, rowBreakStart - hyperEnd));\r\n                UpdateRowBreaks(sw, prefix);\r\n\r\n                int colBreakStart = rowBreakEnd, colBreakEnd = rowBreakEnd;\r\n                GetBlockPos(xml, \"colBreaks\", ref colBreakStart, ref colBreakEnd);\r\n                sw.Write(xml.Substring(rowBreakEnd, colBreakStart - rowBreakEnd));\r\n                UpdateColBreaks(sw, prefix);\r\n\r\n                sw.Write(xml.Substring(colBreakEnd, xml.Length - colBreakEnd));\r\n            }\r\n            sw.Flush();\r\n        }"}, {"doc": "", "signature": {"name": "GetNameSpacePrefix", "returns": "string", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (_worksheetXml.DocumentElement == null) return \"\";\r\n            foreach (XmlAttribute a in _worksheetXml.DocumentElement.Attributes)\r\n            {\r\n                if (a.Value == ExcelPackage.schemaMain)\r\n                {\r\n                    if (string.IsNullOrEmpty(a.Prefix))\r\n                    {\r\n                        return \"\";\r\n                    }\r\n                    else\r\n                    {\r\n                        return a.LocalName + \":\";\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        }"}, {"doc": "", "signature": {"name": "UpdateColBreaks", "returns": "void", "params": ["StreamWriter sw", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            StringBuilder breaks = new StringBuilder();\r\n            int count = 0;\r\n            var cse = new CellStoreEnumerator<ExcelValue>(_values, 0, 0, 0, ExcelPackage.MaxColumns);\r\n            while (cse.Next())\r\n            {\r\n                var col = cse.Value._value as ExcelColumn;\r\n                if (col != null && col.PageBreak)\r\n                {\r\n                    breaks.Append($\"<{prefix}brk id=\\\"{cse.Column}\\\" max=\\\"16383\\\" man=\\\"1\\\"/>\");\r\n                    count++;\r\n                }\r\n            }\r\n            if (count > 0)\r\n            {\r\n                sw.Write($\"<colBreaks count=\\\"{count}\\\" manualBreakCount=\\\"{count}\\\">{breaks.ToString()}</colBreaks>\");\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "UpdateRowBreaks", "returns": "void", "params": ["StreamWriter sw", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            StringBuilder breaks = new StringBuilder();\r\n            int count = 0;\r\n            var cse = new CellStoreEnumerator<ExcelValue>(_values, 0, 0, ExcelPackage.MaxRows, 0);\r\n            while (cse.Next())\r\n            {\r\n                var row = cse.Value._value as RowInternal;\r\n                if (row != null && row.PageBreak)\r\n                {\r\n                    breaks.AppendFormat($\"<{prefix}brk id=\\\"{cse.Row}\\\" max=\\\"1048575\\\" man=\\\"1\\\"/>\");\r\n                    count++;\r\n                }\r\n            }\r\n            if (count > 0)\r\n            {\r\n                sw.Write(string.Format($\"<{prefix}rowBreaks count=\\\"{count}\\\" manualBreakCount=\\\"{count}\\\">{breaks.ToString()}</rowBreaks>\"));\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Inserts the cols collection into the XML document\r\n/// </summary>", "signature": {"name": "UpdateColumnData", "returns": "void", "params": ["StreamWriter sw", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var cse = new CellStoreEnumerator<ExcelValue>(_values, 0, 1, 0, ExcelPackage.MaxColumns);\r\n            bool first = true;\r\n            while (cse.Next())\r\n            {\r\n                if (first)\r\n                {\r\n                    sw.Write($\"<{prefix}cols>\");\r\n                    first = false;\r\n                }\r\n                var col = cse.Value._value as ExcelColumn;\r\n                ExcelStyleCollection<ExcelXfs> cellXfs = _package.Workbook.Styles.CellXfs;\r\n\r\n                sw.Write($\"<{prefix}col min=\\\"{col.ColumnMin}\\\" max=\\\"{col.ColumnMax}\\\"\");\r\n                if (col.Hidden == true)\r\n                {\r\n                    sw.Write(\" hidden=\\\"1\\\"\");\r\n                }\r\n                else if (col.BestFit)\r\n                {\r\n                    sw.Write(\" bestFit=\\\"1\\\"\");\r\n                }\r\n                sw.Write(string.Format(CultureInfo.InvariantCulture, \" width=\\\"{0}\\\" customWidth=\\\"1\\\"\", col.Width));\r\n\r\n                if (col.OutlineLevel > 0)\r\n                {\r\n                    sw.Write($\" outlineLevel=\\\"{col.OutlineLevel}\\\" \");\r\n                    if (col.Collapsed)\r\n                    {\r\n                        if (col.Hidden)\r\n                        {\r\n                            sw.Write(\" collapsed=\\\"1\\\"\");\r\n                        }\r\n                        else\r\n                        {\r\n                            sw.Write(\" collapsed=\\\"1\\\" hidden=\\\"1\\\"\"); //Always hidden\r\n                        }\r\n                    }\r\n                }\r\n                if (col.Phonetic)\r\n                {\r\n                    sw.Write(\" phonetic=\\\"1\\\"\");\r\n                }\r\n\r\n                var styleID = col.StyleID >= 0 ? cellXfs[col.StyleID].newID : col.StyleID;\r\n                if (styleID > 0)\r\n                {\r\n                    sw.Write($\" style=\\\"{styleID}\\\"\");\r\n                }\r\n                sw.Write(\"/>\");\r\n            }\r\n            if (!first)\r\n            {\r\n                sw.Write($\"</{prefix}cols>\");\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Insert row and cells into the XML document\r\n/// </summary>", "signature": {"name": "UpdateRowCellData", "returns": "void", "params": ["StreamWriter sw", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            ExcelStyleCollection<ExcelXfs> cellXfs = _package.Workbook.Styles.CellXfs;\r\n\r\n            int row = -1;\r\n            string mdAttr = \"\";\r\n            string mdAttrForFTag = \"\";\r\n            var sheetDataTag = prefix + \"sheetData\";\r\n            var cTag = prefix + \"c\";\r\n            var fTag = prefix + \"f\";\r\n            var vTag = prefix + \"v\";\r\n\r\n            StringBuilder sbXml = new StringBuilder();\r\n            var ss = _package.Workbook._sharedStrings;\r\n            var cache = new StringBuilder();\r\n            cache.Append($\"<{sheetDataTag}>\");\r\n\r\n\r\n            FixSharedFormulas(); //Fixes Issue #32\r\n\r\n            var hasMd = _metadataStore.HasValues;\r\n            columnStyles = new Dictionary<int, int>();\r\n            var cse = new CellStoreEnumerator<ExcelValue>(_values, 1, 0, ExcelPackage.MaxRows, ExcelPackage.MaxColumns);\r\n            while (cse.Next())\r\n            {\r\n                if (cse.Column > 0)\r\n                {\r\n                    var val = cse.Value;\r\n                    int styleID = cellXfs[(val._styleId == 0 ? GetStyleIdDefaultWithMemo(cse.Row, cse.Column) : val._styleId)].newID;\r\n                    styleID = styleID < 0 ? 0 : styleID;\r\n                    //Add the row element if it's a new row\r\n                    if (cse.Row != row)\r\n                    {\r\n                        WriteRow(cache, cellXfs, row, cse.Row, prefix);\r\n                        row = cse.Row;\r\n                    }\r\n                    object v = val._value;\r\n                    object formula = _formulas.GetValue(cse.Row, cse.Column);\r\n                    if (hasMd)\r\n                    {\r\n                        mdAttr = \"\";\r\n                        if (_metadataStore.Exists(cse.Row, cse.Column))\r\n                        {\r\n                            MetaDataReference md = _metadataStore.GetValue(cse.Row, cse.Column);\r\n                            if (md.cm > 0)\r\n                            {\r\n                                mdAttr = $\" cm=\\\"{md.cm}\\\"\";\r\n                            }\r\n                            if (md.vm > 0)\r\n                            {\r\n                                mdAttr += $\" vm=\\\"{md.vm}\\\"\";\r\n                            }\r\n                        }\r\n                    }\r\n                    if (formula is int sfId)\r\n                    {\r\n                        if (!_sharedFormulas.ContainsKey(sfId))\r\n                        {\r\n                            throw (new InvalidDataException($\"SharedFormulaId {sfId} not found on Worksheet {Name} cell {cse.CellAddress}, SharedFormulas Count {_sharedFormulas.Count}\"));\r\n                        }\r\n                        var f = _sharedFormulas[sfId];\r\n\r\n                        //Set calc attributes for array formula. We preserve them from load only at this point.\r\n                        if (hasMd)\r\n                        {\r\n                            mdAttrForFTag = \"\";\r\n                            if (_metadataStore.Exists(cse.Row, cse.Column))\r\n                            {\r\n                                MetaDataReference md = _metadataStore.GetValue(cse.Row, cse.Column);\r\n                                if (md.aca)\r\n                                {\r\n                                    mdAttrForFTag = $\" aca=\\\"1\\\"\";\r\n                                }\r\n                                if (md.ca)\r\n                                {\r\n                                    mdAttrForFTag += $\" ca=\\\"1\\\"\";\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (f.Address.IndexOf(':') > 0)\r\n                        {\r\n                            if (f.StartCol == cse.Column && f.StartRow == cse.Row)\r\n                            {\r\n                                if (f.IsArray)\r\n                                {\r\n                                    cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}><{fTag} ref=\\\"{f.Address}\\\" t=\\\"array\\\" {mdAttrForFTag}>{ConvertUtil.ExcelEscapeAndEncodeString(f.Formula)}</{fTag}>{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                                }\r\n                                else\r\n                                {\r\n                                    cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}><{fTag} ref=\\\"{f.Address}\\\" t=\\\"shared\\\" si=\\\"{sfId}\\\" {mdAttrForFTag}>{ConvertUtil.ExcelEscapeAndEncodeString(f.Formula)}</{fTag}>{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                                }\r\n\r\n                            }\r\n                            else if (f.IsArray)\r\n                            {\r\n                                string fElement;\r\n                                if (string.IsNullOrEmpty(mdAttrForFTag) == false)\r\n                                {\r\n                                    fElement = $\"<{fTag} {mdAttrForFTag}/>\";\r\n                                }\r\n                                else\r\n                                {\r\n                                    fElement = $\"\";\r\n                                }\r\n                                cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}>{fElement}{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                            }\r\n                            else\r\n                            {\r\n                                cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}><f t=\\\"shared\\\" si=\\\"{sfId}\\\" {mdAttrForFTag}/>{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            // We can also have a single cell array formula\r\n                            if (f.IsArray)\r\n                            {\r\n                                cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}><{fTag} ref=\\\"{string.Format(\"{0}:{1}\", f.Address, f.Address)}\\\" t=\\\"array\\\"{mdAttrForFTag}>{ConvertUtil.ExcelEscapeAndEncodeString(f.Formula)}</{fTag}>{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                            }\r\n                            else\r\n                            {\r\n                                cache.Append($\"<{cTag} r=\\\"{f.Address}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}>\");\r\n                                cache.Append($\"<{fTag}{mdAttrForFTag}>{ConvertUtil.ExcelEscapeAndEncodeString(f.Formula)}</{fTag}>{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (formula != null && formula.ToString() != \"\")\r\n                    {\r\n                        cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v, true)}{mdAttr}>\");\r\n                        cache.Append($\"<{fTag}>{ConvertUtil.ExcelEscapeAndEncodeString(formula.ToString())}</{fTag}>{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                    }\r\n                    else\r\n                    {\r\n                        if (v == null && styleID > 0)\r\n                        {\r\n                            cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{mdAttr}/>\");\r\n                        }\r\n                        else if (v != null)\r\n                        {\r\n                            if (v is System.Collections.IEnumerable enumResult && !(v is string))\r\n                            {\r\n                                var e = enumResult.GetEnumerator();\r\n                                if (e.MoveNext() && e.Current != null)\r\n                                    v = e.Current;\r\n                                else\r\n                                    v = string.Empty;\r\n                            }\r\n                            if ((TypeCompat.IsPrimitive(v) || v is double || v is decimal || v is DateTime || v is TimeSpan) && !(v is char))\r\n                            {\r\n                                //string sv = GetValueForXml(v);\r\n                                cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\"{GetCellType(v)}{mdAttr}>\");\r\n                                cache.Append($\"{GetFormulaValue(v, prefix)}</{cTag}>\");\r\n                            }\r\n                            else\r\n                            {\r\n                                var s = Convert.ToString(v);\r\n                                if (s == null) //If for example a struct \r\n                                {\r\n                                    s = v.ToString();\r\n                                    if (s == null)\r\n                                    {\r\n                                        s = \"\";\r\n                                    }\r\n                                }\r\n                                int ix;\r\n                                if (!ss.ContainsKey(s))\r\n                                {\r\n                                    ix = ss.Count;\r\n                                    ss.Add(s, new ExcelWorkbook.SharedStringItem() { isRichText = _flags.GetFlagValue(cse.Row, cse.Column, CellFlags.RichText), pos = ix });\r\n                                }\r\n                                else\r\n                                {\r\n                                    ix = ss[s].pos;\r\n                                }\r\n                                cache.Append($\"<{cTag} r=\\\"{cse.CellAddress}\\\" s=\\\"{styleID}\\\" t=\\\"s\\\"{mdAttr}>\");\r\n                                cache.Append($\"<{vTag}>{ix}</{vTag}></{cTag}>\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else  //ExcelRow\r\n                {\r\n                    WriteRow(cache, cellXfs, row, cse.Row, prefix);\r\n                    row = cse.Row;\r\n                }\r\n                if (cache.Length > 0x600000)\r\n                {\r\n                    sw.Write(cache.ToString());\r\n                    sw.Flush();\r\n                    cache.Length = 0;\r\n                }\r\n            }\r\n            columnStyles = null;\r\n\r\n            if (row != -1) cache.Append($\"</{prefix}row>\");\r\n            cache.Append($\"</{prefix}sheetData>\");\r\n            sw.Write(cache.ToString());\r\n            sw.Flush();\r\n        }"}, {"doc": "/// <summary>\r\n/// Check all Shared formulas that the first cell has not been deleted.\r\n/// If so create a standard formula of all cells in the formula .\r\n/// </summary>", "signature": {"name": "FixSharedFormulas", "returns": "void", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var remove = new List<int>();\r\n            foreach (var f in _sharedFormulas.Values)\r\n            {\r\n                var addr = new ExcelAddressBase(f.Address);\r\n                var shIx = _formulas.GetValue(addr._fromRow, addr._fromCol);\r\n                if (!(shIx is int) || (shIx is int && (int)shIx != f.Index))\r\n                {\r\n                    for (var row = addr._fromRow; row <= addr._toRow; row++)\r\n                    {\r\n                        for (var col = addr._fromCol; col <= addr._toCol; col++)\r\n                        {\r\n                            if (!(addr._fromRow == row && addr._fromCol == col))\r\n                            {\r\n                                var fIx = _formulas.GetValue(row, col);\r\n                                if (fIx is int && (int)fIx == f.Index)\r\n                                {\r\n                                    _formulas.SetValue(row, col, f.GetFormula(row, col, this.Name));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    remove.Add(f.Index);\r\n                }\r\n            }\r\n            remove.ForEach(i => _sharedFormulas.Remove(i));\r\n        }"}, {"doc": "// get StyleID without cell style for UpdateRowCellData", "signature": {"name": "GetStyleIdDefaultWithMemo", "returns": "int", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            int v = 0;\r\n            if (ExistsStyleInner(row, 0, ref v)) //First Row\r\n            {\r\n                return v;\r\n            }\r\n            else // then column\r\n            {\r\n                if (!columnStyles.ContainsKey(col))\r\n                {\r\n                    if (ExistsStyleInner(0, col, ref v))\r\n                    {\r\n                        columnStyles.Add(col, v);\r\n                    }\r\n                    else\r\n                    {\r\n                        int r = 0, c = col;\r\n                        if (_values.PrevCell(ref r, ref c))\r\n                        {\r\n                            var val = _values.GetValue(0, c);\r\n                            var column = (ExcelColumn)(val._value);\r\n                            if (column != null && column.ColumnMax >= col) //Fixes issue 15174\r\n                            {\r\n                                columnStyles.Add(col, val._styleId);\r\n                            }\r\n                            else\r\n                            {\r\n                                columnStyles.Add(col, 0);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            columnStyles.Add(col, 0);\r\n                        }\r\n                    }\r\n                }\r\n                return columnStyles[col];\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetFormulaValue", "returns": "object", "params": ["object v", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (v != null && v.ToString() != \"\")\r\n            {\r\n                return $\"<{prefix}v>{ConvertUtil.ExcelEscapeAndEncodeString(ConvertUtil.GetValueForXml(v, Workbook.Date1904))}</{prefix}v>\";\r\n            }\r\n            else\r\n            {\r\n                return \"\";\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetCellType", "returns": "string", "params": ["object v", "bool allowStr = false"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (v is bool)\r\n            {\r\n                return \" t=\\\"b\\\"\";\r\n            }\r\n            else if ((v is double && double.IsInfinity((double)v)) || v is ExcelErrorValue)\r\n            {\r\n                return \" t=\\\"e\\\"\";\r\n            }\r\n            else if (allowStr && v != null && !(TypeCompat.IsPrimitive(v) || v is double || v is decimal || v is DateTime || v is TimeSpan))\r\n            {\r\n                return \" t=\\\"str\\\"\";\r\n            }\r\n            else\r\n            {\r\n                return \"\";\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "WriteRow", "returns": "void", "params": ["StringBuilder cache", "ExcelStyleCollection<ExcelXfs> cellXfs", "int prevRow", "int row", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (prevRow != -1) cache.Append($\"</{prefix}row>\");\r\n            //ulong rowID = ExcelRow.GetRowID(SheetID, row);\r\n            cache.Append($\"<{prefix}row r=\\\"{row}\\\"\");\r\n            RowInternal currRow = GetValueInner(row, 0) as RowInternal;\r\n            if (currRow != null)\r\n            {\r\n\r\n                // if hidden, add hidden attribute and preserve ht/customHeight (Excel compatible)\r\n                if (currRow.Hidden == true)\r\n                {\r\n                    cache.Append(\" hidden=\\\"1\\\"\");\r\n                }\r\n                if (currRow.Height >= 0)\r\n                {\r\n                    cache.AppendFormat(string.Format(CultureInfo.InvariantCulture, \" ht=\\\"{0}\\\"\", currRow.Height));\r\n                    if (currRow.CustomHeight)\r\n                    {\r\n                        cache.Append(\" customHeight=\\\"1\\\"\");\r\n                    }\r\n                }\r\n\r\n                if (currRow.OutlineLevel > 0)\r\n                {\r\n                    cache.AppendFormat(\" outlineLevel =\\\"{0}\\\"\", currRow.OutlineLevel);\r\n                    if (currRow.Collapsed)\r\n                    {\r\n                        if (currRow.Hidden)\r\n                        {\r\n                            cache.Append(\" collapsed=\\\"1\\\"\");\r\n                        }\r\n                        else\r\n                        {\r\n                            cache.Append(\" collapsed=\\\"1\\\" hidden=\\\"1\\\"\"); //Always hidden\r\n                        }\r\n                    }\r\n                }\r\n                if (currRow.Phonetic)\r\n                {\r\n                    cache.Append(\" ph=\\\"1\\\"\");\r\n                }\r\n            }\r\n            var s = GetStyleInner(row, 0);\r\n            if (s > 0)\r\n            {\r\n                cache.AppendFormat(\" s=\\\"{0}\\\" customFormat=\\\"1\\\"\", cellXfs[s].newID < 0 ? 0 : cellXfs[s].newID);\r\n            }\r\n            cache.Append(\">\");\r\n        }"}, {"doc": "/// <summary>\r\n/// Update xml with hyperlinks \r\n/// </summary>\r\n/// <param name = \"sw\">The stream</param>\r\n/// <param name = \"prefix\">The namespace prefix for the main schema</param>", "signature": {"name": "UpdateHyperLinks", "returns": "void", "params": ["StreamWriter sw", "string prefix"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            Dictionary<string, string> hyps = new Dictionary<string, string>();\r\n            var cse = new CellStoreEnumerator<Uri>(_hyperLinks);\r\n            bool first = true;\r\n            while (cse.Next())\r\n            {\r\n                var uri = _hyperLinks.GetValue(cse.Row, cse.Column);\r\n                if (first && uri != null)\r\n                {\r\n                    sw.Write($\"<{prefix}hyperlinks>\");\r\n                    first = false;\r\n                }\r\n\r\n                if (uri is ExcelHyperLink && !string.IsNullOrEmpty((uri as ExcelHyperLink).ReferenceAddress))\r\n                {\r\n                    ExcelHyperLink hl = uri as ExcelHyperLink;\r\n                    var address = Cells[cse.Row, cse.Column, cse.Row + hl.RowSpann, cse.Column + hl.ColSpann].Address;\r\n                    var location = ExcelCellBase.GetFullAddress(SecurityElement.Escape(Name), SecurityElement.Escape(hl.ReferenceAddress));\r\n                    var display = string.IsNullOrEmpty(hl.Display) ? \"\" : \" display=\\\"\" + SecurityElement.Escape(hl.Display) + \"\\\"\";\r\n                    var tooltip = string.IsNullOrEmpty(hl.ToolTip) ? \"\" : \" tooltip=\\\"\" + SecurityElement.Escape(hl.ToolTip) + \"\\\"\";\r\n                    sw.Write($\"<{prefix}hyperlink ref=\\\"{address}\\\" location=\\\"{location}\\\"{display}{tooltip}/>\");\r\n                }\r\n                else if (uri != null)\r\n                {\r\n                    string id;\r\n                    Uri hyp;\r\n                    if (uri is ExcelHyperLink)\r\n                    {\r\n                        hyp = ((ExcelHyperLink)uri).OriginalUri;\r\n                    }\r\n                    else\r\n                    {\r\n                        hyp = uri;\r\n                    }\r\n                    if (hyps.ContainsKey(hyp.OriginalString))\r\n                    {\r\n                        id = hyps[hyp.OriginalString];\r\n                    }\r\n                    else\r\n                    {\r\n                        var relationship = Part.CreateRelationship(hyp, Packaging.TargetMode.External, ExcelPackage.schemaHyperlink);\r\n                        if (uri is ExcelHyperLink)\r\n                        {\r\n                            ExcelHyperLink hl = uri as ExcelHyperLink;\r\n                            var display = string.IsNullOrEmpty(hl.Display) ? \"\" : \" display=\\\"\" + SecurityElement.Escape(hl.Display) + \"\\\"\";\r\n                            var toolTip = string.IsNullOrEmpty(hl.ToolTip) ? \"\" : \" tooltip=\\\"\" + SecurityElement.Escape(hl.ToolTip) + \"\\\"\";\r\n                            sw.Write($\"<{prefix}hyperlink ref=\\\"{ExcelCellBase.GetAddress(cse.Row, cse.Column)}\\\"{display}{toolTip} r:id=\\\"{relationship.Id}\\\"/>\");\r\n                        }\r\n                        else\r\n                        {\r\n                            sw.Write($\"<{prefix}hyperlink ref=\\\"{ExcelCellBase.GetAddress(cse.Row, cse.Column)}\\\" r:id=\\\"{relationship.Id}\\\"/>\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!first)\r\n            {\r\n                sw.Write($\"</{prefix}hyperlinks>\");\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Create the hyperlinks node in the XML\r\n/// </summary>\r\n/// <returns></returns>", "signature": {"name": "CreateHyperLinkCollection", "returns": "XmlNode", "params": [], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            XmlElement hl = _worksheetXml.CreateElement(\"hyperlinks\", ExcelPackage.schemaMain);\r\n            XmlNode prevNode = _worksheetXml.SelectSingleNode(\"//d:conditionalFormatting\", NameSpaceManager);\r\n            if (prevNode == null)\r\n            {\r\n                prevNode = _worksheetXml.SelectSingleNode(\"//d:mergeCells\", NameSpaceManager);\r\n                if (prevNode == null)\r\n                {\r\n                    prevNode = _worksheetXml.SelectSingleNode(\"//d:sheetData\", NameSpaceManager);\r\n                }\r\n            }\r\n            return _worksheetXml.DocumentElement.InsertAfter(hl, prevNode);\r\n        }"}, {"doc": "", "signature": {"name": "ClearValidations", "returns": "void", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            _dataValidation = null;\r\n        }"}, {"doc": "/// <summary>\r\n/// Get the next ID from a shared formula or an Array formula\r\n/// Sharedforumlas will have an id from 0-x. Array formula ids start from 0x4000001-. \r\n/// </summary>\r\n/// <param name = \"isArray\">If the formula is an array formula</param>\r\n/// <returns></returns>", "signature": {"name": "GetMaxShareFunctionIndex", "returns": "int", "params": ["bool isArray"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            int i = _sharedFormulas.Count + 1;\r\n            if (isArray)\r\n                i |= 0x40000000;\r\n\r\n            while (_sharedFormulas.ContainsKey(i))\r\n            {\r\n                i++;\r\n            }\r\n            return i;\r\n        }"}, {"doc": "", "signature": {"name": "SetHFLegacyDrawingRel", "returns": "void", "params": ["string relID"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            SetXmlNodeString(\"d:legacyDrawingHF/@r:id\", relID);\r\n        }"}, {"doc": "", "signature": {"name": "RemoveLegacyDrawingRel", "returns": "void", "params": ["string relID"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var n = WorksheetXml.DocumentElement.SelectSingleNode(string.Format(\"d:legacyDrawing[@r:id=\\\"{0}\\\"]\", relID), NameSpaceManager);\r\n            if (n != null)\r\n            {\r\n                n.ParentNode.RemoveChild(n);\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "UpdateCellsWithDate1904Setting", "returns": "void", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var cse = new CellStoreEnumerator<ExcelValue>(_values);\r\n            var offset = Workbook.Date1904 ? -ExcelWorkbook.date1904Offset : ExcelWorkbook.date1904Offset;\r\n            while (cse.MoveNext())\r\n            {\r\n                if (cse.Value._value is DateTime)\r\n                {\r\n                    try\r\n                    {\r\n                        double sdv = ((DateTime)cse.Value._value).ToOADate();\r\n                        sdv += offset;\r\n\r\n                        //cse.Value._value = DateTime.FromOADate(sdv);\r\n                        SetValueInner(cse.Row, cse.Column, DateTime.FromOADate(sdv));\r\n                    }\r\n                    catch\r\n                    {\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetFormula", "returns": "string", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var v = _formulas?.GetValue(row, col);\r\n            if (v is int)\r\n            {\r\n                return _sharedFormulas[(int)v].GetFormula(row, col, Name);\r\n            }\r\n            else if (v != null)\r\n            {\r\n                return v.ToString();\r\n            }\r\n            else\r\n            {\r\n                return \"\";\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "GetFormulaR1C1", "returns": "string", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var v = _formulas?.GetValue(row, col);\r\n            if (v is int)\r\n            {\r\n                var sf = _sharedFormulas[(int)v];\r\n                return R1C1Translator.ToR1C1Formula(sf.Formula, sf.StartRow, sf.StartCol);\r\n            }\r\n            else if (v != null)\r\n            {\r\n                return R1C1Translator.ToR1C1Formula(v.ToString(), row, col);\r\n            }\r\n            else\r\n            {\r\n                return \"\";\r\n            }\r\n        }"}, {"doc": "", "signature": {"name": "DisposeInternal", "returns": "void", "params": ["IDisposable candidateDisposable"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            if (candidateDisposable != null)\r\n            {\r\n                candidateDisposable.Dispose();\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Disposes the worksheet\r\n/// </summary>", "signature": {"name": "Dispose", "returns": "void", "params": [], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            DisposeInternal(_values);\r\n            DisposeInternal(_formulas);\r\n            DisposeInternal(_flags);\r\n            DisposeInternal(_hyperLinks);\r\n            DisposeInternal(_commentsStore);\r\n            DisposeInternal(_formulaTokens);\r\n            DisposeInternal(_metadataStore);\r\n\r\n            _values = null;\r\n            _formulas = null;\r\n            _flags = null;\r\n            _hyperLinks = null;\r\n            _commentsStore = null;\r\n            _formulaTokens = null;\r\n            _metadataStore = null;\r\n\r\n            _package = null;\r\n            _pivotTables = null;\r\n            _protection = null;\r\n            if (_sharedFormulas != null) _sharedFormulas.Clear();\r\n            _sharedFormulas = null;\r\n            _sheetView = null;\r\n            _tables = null;\r\n            _vmlDrawings = null;\r\n            _conditionalFormatting = null;\r\n            _dataValidation = null;\r\n            _drawings = null;\r\n\r\n            _sheetID = -1;\r\n            _positionId = -1;\r\n        }"}, {"doc": "/// <summary>\r\n/// Get the ExcelColumn for column (span ColumnMin and ColumnMax)\r\n/// </summary>\r\n/// <param name = \"column\"></param>\r\n/// <returns></returns>", "signature": {"name": "GetColumn", "returns": "ExcelColumn", "params": ["int column"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var c = GetValueInner(0, column) as ExcelColumn;\r\n            if (c == null)\r\n            {\r\n                int row = 0, col = column;\r\n                if (_values.PrevCell(ref row, ref col))\r\n                {\r\n                    c = GetValueInner(0, col) as ExcelColumn;\r\n                    if (c != null && c.ColumnMax >= column)\r\n                    {\r\n                        return c;\r\n                    }\r\n                    return null;\r\n                }\r\n            }\r\n            return c;\r\n\r\n        }"}, {"doc": "/// <summary>\r\n/// Check if a worksheet is equal to another\r\n/// </summary>\r\n/// <param name = \"x\">First worksheet </param>\r\n/// <param name = \"y\">Second worksheet</param>\r\n/// <returns></returns>", "signature": {"name": "Equals", "returns": "bool", "params": ["ExcelWorksheet x", "ExcelWorksheet y"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            return x.Name == y.Name && x.SheetId == y.SheetId && x.WorksheetXml.OuterXml == y.WorksheetXml.OuterXml;\r\n        }"}, {"doc": "/// <summary>\r\n/// Returns a hashcode generated from the WorksheetXml\r\n/// </summary>\r\n/// <param name = \"obj\">The worksheet</param>\r\n/// <returns>The hashcode</returns>", "signature": {"name": "GetHashCode", "returns": "int", "params": ["ExcelWorksheet obj"], "modifier": ["public"], "annotations": [], "generics": []}, "code": "{\r\n            return obj.WorksheetXml.OuterXml.GetHashCode();\r\n        }"}, {"doc": "/// <summary>\r\n/// Get accessor of sheet value\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <returns>cell value</returns>", "signature": {"name": "GetCoreValueInner", "returns": "ExcelValue", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            return _values.GetValue(row, col);\r\n        }"}, {"doc": "/// <summary>\r\n/// Get accessor of sheet value\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <returns>cell value</returns>", "signature": {"name": "GetValueInner", "returns": "object", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            return _values.GetValue(row, col)._value;\r\n        }"}, {"doc": "/// <summary>\r\n/// Get accessor of sheet styleId\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <returns>cell styleId</returns>", "signature": {"name": "GetStyleInner", "returns": "int", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            return _values.GetValue(row, col)._styleId;\r\n        }"}, {"doc": "/// <summary>\r\n/// Set accessor of sheet value\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <param name = \"value\">value</param>", "signature": {"name": "SetValueInner", "returns": "void", "params": ["int row", "int col", "object value"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            _values.SetValue_Value(row, col, value);\r\n        }"}, {"doc": "/// <summary>\r\n/// Set accessor of sheet styleId\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <param name = \"styleId\">styleId</param>", "signature": {"name": "SetStyleInner", "returns": "void", "params": ["int row", "int col", "int styleId"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            _values.SetValue_Style(row, col, styleId);\r\n        }"}, {"doc": "/// <summary>\r\n/// Set accessor of sheet styleId\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <param name = \"value\">value</param>\r\n/// <param name = \"styleId\">styleId</param>", "signature": {"name": "SetValueStyleIdInner", "returns": "void", "params": ["int row", "int col", "object value", "int styleId"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            _values.SetValue(row, col, value, styleId);\r\n        }"}, {"doc": "/// <summary>\r\n/// Bulk(Range) set accessor of sheet value, for value array\r\n/// </summary>\r\n/// <param name = \"fromRow\">start row</param>\r\n/// <param name = \"fromColumn\">start column</param>\r\n/// <param name = \"toRow\">end row</param>\r\n/// <param name = \"toColumn\">end column</param>\r\n/// <param name = \"values\">set values</param>\r\n/// <param name = \"setHyperLinkFromValue\">If the value is of type Uri or ExcelHyperlink the Hyperlink property is set.</param>", "signature": {"name": "SetRangeValueInner", "returns": "void", "params": ["int fromRow", "int fromColumn", "int toRow", "int toColumn", "object[,] values", "bool setHyperLinkFromValue"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            if (setHyperLinkFromValue)\r\n            {\r\n                SetValuesWithHyperLink(fromRow, fromColumn, values);\r\n            }\r\n            else\r\n            {\r\n                _values.SetValueRange_Value(fromRow, fromColumn, values);\r\n            }\r\n            //Clearout formulas and flags, for example the rich text flag.\r\n            _formulas.Clear(fromRow, fromColumn, values.GetUpperBound(0) + 1, values.GetUpperBound(1) + 1);\r\n            _flags.Clear(fromRow, fromColumn, values.GetUpperBound(0) + 1, values.GetUpperBound(1) + 1);\r\n            _metadataStore.Clear(fromRow, fromColumn, values.GetUpperBound(0) + 1, values.GetUpperBound(1) + 1);\r\n        }"}, {"doc": "", "signature": {"name": "SetValuesWithHyperLink", "returns": "void", "params": ["int fromRow", "int fromColumn", "object[,] values"], "modifier": ["private"], "annotations": [], "generics": []}, "code": "{\r\n            var rowBound = values.GetUpperBound(0);\r\n            var colBound = values.GetUpperBound(1);\r\n\r\n            for (int r = 0; r <= rowBound; r++)\r\n            {\r\n                for (int c = 0; c <= colBound; c++)\r\n                {\r\n                    var v = values[r, c];\r\n                    var row = fromRow + r;\r\n                    var col = fromColumn + c;\r\n                    if (v == null)\r\n                    {\r\n                        _values.SetValue_Value(row, col, v);\r\n                        continue;\r\n                    }\r\n                    var t = v.GetType();\r\n                    if (t == typeof(Uri) || t == typeof(ExcelHyperLink))\r\n                    {\r\n                        _hyperLinks.SetValue(row, col, (Uri)v);\r\n                        if (v is ExcelHyperLink hl)\r\n                        {\r\n                            SetValueInner(row, col, hl.Display);\r\n                        }\r\n                        else\r\n                        {\r\n                            var cv = GetValueInner(row, col);\r\n                            if (cv == null || cv.ToString() == \"\")\r\n                            {\r\n                                SetValueInner(row, col, ((Uri)v).OriginalString);\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        _values.SetValue_Value(row, col, v);\r\n                    }\r\n                }\r\n            }\r\n        }"}, {"doc": "/// <summary>\r\n/// Existance check of sheet value\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <returns>is exists</returns>", "signature": {"name": "ExistsValueInner", "returns": "bool", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            return (_values.GetValue(row, col)._value != null);\r\n        }"}, {"doc": "/// <summary>\r\n/// Existance check of sheet styleId\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <returns>is exists</returns>", "signature": {"name": "ExistsStyleInner", "returns": "bool", "params": ["int row", "int col"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            return (_values.GetValue(row, col)._styleId != 0);\r\n        }"}, {"doc": "/// <summary>\r\n/// Existance check of sheet value\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <param name = \"value\"></param>\r\n/// <returns>is exists</returns>", "signature": {"name": "ExistsValueInner", "returns": "bool", "params": ["int row", "int col", "ref object value"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            value = _values.GetValue(row, col)._value;\r\n            return (value != null);\r\n        }"}, {"doc": "/// <summary>\r\n/// Existance check of sheet styleId\r\n/// </summary>\r\n/// <param name = \"row\">row</param>\r\n/// <param name = \"col\">column</param>\r\n/// <param name = \"styleId\"></param>\r\n/// <returns>is exists</returns>", "signature": {"name": "ExistsStyleInner", "returns": "bool", "params": ["int row", "int col", "ref int styleId"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            styleId = _values.GetValue(row, col)._styleId;\r\n            return (styleId != 0);\r\n        }"}, {"doc": "", "signature": {"name": "RemoveSlicerReference", "returns": "void", "params": ["ExcelSlicerXmlSource xmlSource"], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var node = GetNode($\"d:extLst/d:ext/x14:slicerList/x14:slicer[@r:id='{xmlSource.Rel.Id}']\");\r\n            if (node != null)\r\n            {\r\n                if (node.ParentNode.ChildNodes.Count > 1)\r\n                {\r\n                    node.ParentNode.RemoveChild(node);\r\n                }\r\n                else\r\n                {\r\n                    //Remove the entire ext element.\r\n                    node.ParentNode.ParentNode.ParentNode.RemoveChild(node.ParentNode.ParentNode);\r\n                }\r\n            }\r\n            SlicerXmlSources.Remove(xmlSource);\r\n        }"}, {"doc": "", "signature": {"name": "CreateControlContainerNode", "returns": "XmlNode", "params": [], "modifier": ["internal"], "annotations": [], "generics": []}, "code": "{\r\n            var node = GetNode(\"mc:AlternateContent/mc:Choice[@Requires='x14']\");\r\n            XmlNode controlsNode;\r\n            if (node == null)\r\n            {\r\n                node = CreateAlternateContentNode(\"d:controls\", \"x14\");\r\n                controlsNode = node.ChildNodes[0].ChildNodes[0];\r\n            }\r\n            else\r\n            {\r\n                controlsNode = node.SelectSingleNode(\"d:controls\", NameSpaceManager);\r\n                if (controlsNode == null)\r\n                {\r\n                    var f = XmlHelperFactory.Create(NameSpaceManager, node);\r\n                    return f.CreateNode(\"d:controls\");\r\n                }\r\n            }\r\n\r\n            var xh = XmlHelperFactory.Create(NameSpaceManager, controlsNode);\r\n            var altNode = (XmlElement)xh.CreateNode(\"mc:AlternateContent\", false, true);\r\n\r\n            xh = XmlHelperFactory.Create(NameSpaceManager, altNode);\r\n            var ctrlContainerNode = (XmlElement)xh.CreateNode(\"mc:Choice\");\r\n            ctrlContainerNode.SetAttribute(\"Requires\", \"x14\");\r\n\r\n            return ctrlContainerNode;\r\n        }"}], "variables": ["internal CellStoreValue _values;", "internal CellStore<object> _formulas;", "internal FlagCellStore _flags;", "internal CellStore<List<Token>> _formulaTokens;", "internal CellStore<Uri> _hyperLinks;", "internal CellStore<int> _commentsStore;", "internal CellStore<int> _threadedCommentsStore;", "internal CellStore<MetaDataReference> _metadataStore;", "internal Dictionary<int, Formulas> _sharedFormulas = new Dictionary<int, Formulas>();", "internal int _minCol = ExcelPackage.MaxColumns;", "internal int _maxCol = 0;", "internal int _nextControlId;", "#region Worksheet Private Properties\r\ninternal ExcelPackage _package;", "private Uri _worksheetUri;", "private string _name;", "private int _sheetID;", "private int _positionId;", "private string _relationshipID;", "private XmlDocument _worksheetXml;", "internal ExcelWorksheetView _sheetView;", "internal ExcelHeaderFooter _headerFooter;", "const string AutoFilterPath = \"d:autoFilter\";", "ExcelAutoFilter _autoFilter = null;", "internal ExcelNamedRangeCollection _names;", "double _defaultRowHeight = double.NaN;", "/// <outlinePr applyStyles=\"1\" summaryBelow=\"0\" summaryRight=\"0\"/> *\r\n///const string outLineSummaryBelowPath = \"d:sheetPr/d:outlinePr/@summaryBelow\";", "const string outLineSummaryRightPath = \"d:sheetPr/d:outlinePr/@summaryRight\";", "const string outLineApplyStylePath = \"d:sheetPr/d:outlinePr/@applyStyles\";", "const string tabColorPath = \"d:sheetPr/d:tabColor/@rgb\";", "const string codeModuleNamePath = \"d:sheetPr/@codeName\";", "internal ExcelVmlDrawingCollection _vmlDrawings = null;", "internal ExcelCommentCollection _comments = null;", "internal ExcelWorksheetThreadedComments _threadedComments = null;", "const int BLOCKSIZE = 8192;", "#endregion\r\n#endregion // END Worksheet Public Properties\r\n\r\nExcelSlicerXmlSources _slicerXmlSources = null;", "internal MergeCellsCollection _mergedCells = new MergeCellsCollection();", "private Dictionary<int, int> columnStyles = null;", "ExcelSheetProtection _protection = null;", "private ExcelProtectedRangeCollection _protectedRanges = null;", "ExcelDrawings _drawings = null;", "#endregion\r\n#region SparklineGroups\r\nExcelSparklineGroupCollection _sparklineGroups = null;", "#endregion\r\nExcelTableCollection _tables = null;", "internal ExcelPivotTableCollection _pivotTables = null;", "private ExcelConditionalFormattingCollection _conditionalFormatting = null;", "internal ExcelDataValidationCollection _dataValidation = null;", "ExcelIgnoredErrorCollection _ignoredErrors = null;", "ExcelBackgroundImage _backgroundImage = null;", "ControlsCollectionInternal _controls = null;"], "generics": [], "imports": ["using System;", "using System.Collections.Generic;", "using System.Drawing;", "using System.Globalization;", "using System.IO;", "using System.Security;", "using System.Text;", "using System.Xml;", "using System.Linq;", "using OfficeOpenXml.ConditionalFormatting;", "using OfficeOpenXml.DataValidation;", "using OfficeOpenXml.Drawing;", "using OfficeOpenXml.Drawing.Chart;", "using OfficeOpenXml.Drawing.Vml;", "using OfficeOpenXml.FormulaParsing.LexicalAnalysis;", "using OfficeOpenXml.Packaging.Ionic.Zip;", "using OfficeOpenXml.Style.XmlAccess;", "using OfficeOpenXml.Table;", "using OfficeOpenXml.Table.PivotTable;", "using OfficeOpenXml.Utils;", "using OfficeOpenXml.Style;", "using OfficeOpenXml.Compatibility;", "using OfficeOpenXml.Sparkline;", "using OfficeOpenXml.Filter;", "using OfficeOpenXml.Core;", "using OfficeOpenXml.Core.CellStore;", "using System.Text.RegularExpressions;", "using OfficeOpenXml.Core.Worksheet;", "using OfficeOpenXml.Drawing.Slicer;", "using OfficeOpenXml.ThreadedComments;", "using OfficeOpenXml.Drawing.Controls;"], "constructors": ["#endregion\r\n#region ExcelWorksheet Constructor\r\n/// <summary>\r\n/// A worksheet\r\n/// </summary>\r\n/// <param name = \"ns\">Namespacemanager</param>\r\n/// <param name = \"excelPackage\">Package</param>\r\n/// <param name = \"relID\">Relationship ID</param>\r\n/// <param name = \"uriWorksheet\">URI</param>\r\n/// <param name = \"sheetName\">Name of the sheet</param>\r\n/// <param name = \"sheetID\">Sheet id</param>\r\n/// <param name = \"positionID\">Position</param>\r\n/// <param name = \"hide\">hide</param>\r\npublic ExcelWorksheet(XmlNamespaceManager ns, ExcelPackage excelPackage, string relID, Uri uriWorksheet, string sheetName, int sheetID, int positionID, eWorkSheetHidden? hide) : base(ns, null)\r\n{\r\n    SchemaNodeOrder = new string[]\r\n    {\r\n        \"sheetPr\",\r\n        \"tabColor\",\r\n        \"outlinePr\",\r\n        \"pageSetUpPr\",\r\n        \"dimension\",\r\n        \"sheetViews\",\r\n        \"sheetFormatPr\",\r\n        \"cols\",\r\n        \"sheetData\",\r\n        \"sheetProtection\",\r\n        \"protectedRanges\",\r\n        \"scenarios\",\r\n        \"autoFilter\",\r\n        \"sortState\",\r\n        \"dataConsolidate\",\r\n        \"customSheetViews\",\r\n        \"customSheetViews\",\r\n        \"mergeCells\",\r\n        \"phoneticPr\",\r\n        \"conditionalFormatting\",\r\n        \"dataValidations\",\r\n        \"hyperlinks\",\r\n        \"printOptions\",\r\n        \"pageMargins\",\r\n        \"pageSetup\",\r\n        \"headerFooter\",\r\n        \"linePrint\",\r\n        \"rowBreaks\",\r\n        \"colBreaks\",\r\n        \"customProperties\",\r\n        \"cellWatches\",\r\n        \"ignoredErrors\",\r\n        \"smartTags\",\r\n        \"drawing\",\r\n        \"legacyDrawing\",\r\n        \"legacyDrawingHF\",\r\n        \"picture\",\r\n        \"oleObjects\",\r\n        \"controls\",\r\n        \"webPublishItems\",\r\n        \"tableParts\",\r\n        \"extLst\"\r\n    };\r\n    _package = excelPackage;\r\n    _relationshipID = relID;\r\n    _worksheetUri = uriWorksheet;\r\n    _name = sheetName;\r\n    _sheetID = sheetID;\r\n    _positionId = positionID;\r\n    if (hide.HasValue)\r\n    {\r\n        Hidden = hide.Value;\r\n    }\r\n\r\n    /**** Cellstore ****/\r\n    _values = new CellStoreValue();\r\n    _formulas = new CellStore<object>();\r\n    _flags = new FlagCellStore();\r\n    _metadataStore = new CellStore<MetaDataReference>();\r\n    _commentsStore = new CellStore<int>();\r\n    _threadedCommentsStore = new CellStore<int>();\r\n    _hyperLinks = new CellStore<Uri>();\r\n    _nextControlId = (PositionId + 1) * 1024 + 1;\r\n    _names = new ExcelNamedRangeCollection(Workbook, this);\r\n    CreateXml();\r\n    TopNode = _worksheetXml.DocumentElement;\r\n    LoadComments();\r\n    LoadThreadedComments();\r\n}"], "extends": "XmlHelper", "implements": ["XmlHelper", "IEqualityComparer<ExcelWorksheet>", "IDisposable"], "namespace": "OfficeOpenXml"}, "code": "{\r\n            WorksheetRangeDeleteHelper.DeleteRow(this, rowFrom, rows);\r\n        }", "code_file_path": "EPPlus/ExcelWorksheet.cs", "called_functions": ["WorksheetRangeDeleteHelper.DeleteRow(this, rowFrom, rows)"], "id": 1866, "tests": [{"tests": "/*******************************************************************************\r\n * You may amend and distribute as you like, but don't remove this header!\r\n *\r\n * Required Notice: Copyright (C) EPPlus Software AB. \r\n * https://epplussoftware.com\r\n *\r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 2.1 of the License, or (at your option) any later version.\r\n\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\n * See the GNU Lesser General Public License for more details.\r\n *\r\n * The GNU Lesser General Public License can be viewed at http://www.opensource.org/licenses/lgpl-license.php\r\n * If you unfamiliar with this license or have questions about it, here is an http://www.gnu.org/licenses/gpl-faq.html\r\n *\r\n * All code and executables are provided \"\" as is \"\" with no warranty either express or implied. \r\n * The author accepts no liability for any damage or loss of business that this product may cause.\r\n *\r\n * Code change notes:\r\n * \r\n  Date               Author                       Change\r\n *******************************************************************************\r\n  01/27/2020         EPPlus Software AB       Initial release EPPlus 5\r\n *******************************************************************************/\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing OfficeOpenXml;\r\nusing System.IO;\r\nusing OfficeOpenXml.Drawing;\r\nusing System.Drawing;\r\nusing OfficeOpenXml.Drawing.Chart;\r\nusing OfficeOpenXml.Drawing.Vml;\r\nusing OfficeOpenXml.Style;\r\nusing System.Data;\r\nusing OfficeOpenXml.Table.PivotTable;\r\nusing System.Reflection;\r\nusing OfficeOpenXml.Table;\r\nusing System.Threading;\r\nusing System.Globalization;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace EPPlusTest\r\n{\r\n\r\n    [TestClass]\r\n    public class WorkSheetTest : TestBase\r\n    {\r\n        static ExcelPackage _pck;\r\n        [ClassInitialize]\r\n        public static void Init(TestContext context)\r\n        {\r\n            InitBase();\r\n            _pck = OpenPackage(\"Worksheet.xlsx\", true);\r\n        }   \r\n        [ClassCleanup]\r\n        public static void Cleanup()\r\n        {\r\n            var dirName = _pck.File.DirectoryName;\r\n            var fileName = _pck.File.FullName;\r\n\r\n            SaveAndCleanup(_pck);\r\n            if (File.Exists(fileName))\r\n            {\r\n                File.Copy(fileName, dirName + \"\\\\WorksheetRead.xlsx\", true);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void AutoFilter()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Autofilter\");\r\n            ws.Cells[\"A1\"].Value = \"A1\";\r\n            ws.Cells[\"B1\"].Value = \"B1\";\r\n            ws.Cells[\"C1\"].Value = \"C1\";\r\n            ws.Cells[\"D1\"].Value = \"D1\";\r\n\r\n            ws.Cells[\"A2\"].Value = 1;\r\n            ws.Cells[\"B2\"].Value = 2;\r\n            ws.Cells[\"C2\"].Value = 3;\r\n            ws.Cells[\"D2\"].Value = 4;\r\n\r\n            ws.Cells[\"A1:D2\"].AutoFilter = true;\r\n            ws.Cells[\"A1:D2\"].AutoFilter = false;\r\n            ws.Cells[\"A1:D2\"].AutoFilter = true;\r\n            ws.Cells[\"A1:D5\"].AutoFilter = false;\r\n            ws.Cells[\"A1:D2\"].AutoFilter = true;\r\n        }\r\n\r\n        [TestMethod]\r\n        public void AddChartSheet()\r\n        {\r\n            var chart = _pck.Workbook.Worksheets.AddChart(\"ChartSheet\", eChartType.ColumnClustered);\r\n            foreach (var _n in _pck.Workbook.Names)\r\n            {\r\n\r\n            }\r\n            //Iterate all collection and make sure no exception is thrown.\r\n            foreach (var worksheet in _pck.Workbook.Worksheets)\r\n            {\r\n                if (!(worksheet is ExcelChartsheet))\r\n                {\r\n                    foreach (var d in worksheet.Drawings)\r\n                    {\r\n\r\n                    }\r\n                    foreach (var d in worksheet.Tables)\r\n                    {\r\n\r\n                    }\r\n                    foreach (var d in worksheet.PivotTables)\r\n                    {\r\n\r\n                    }\r\n                    foreach (var d in worksheet.Names)\r\n                    {\r\n\r\n                    }\r\n                    foreach (var d in worksheet.Comments)\r\n                    {\r\n\r\n                    }\r\n                    foreach (var d in worksheet.ConditionalFormatting)\r\n                    {\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ReadWorkSheet()\r\n        {\r\n            using (ExcelPackage pck = OpenPackage(\"WorksheetRead.xlsx\"))\r\n            {\r\n                var ws = TryGetWorksheet(pck, \"Perf\");\r\n                Assert.AreEqual(ws.Cells[\"H6\"].Formula, \"B5+B6\");\r\n\r\n                ws = pck.Workbook.Worksheets[\"Comment\"];\r\n                var comment = ws.Cells[\"B2\"].Comment;\r\n\r\n                Assert.AreNotEqual(comment, null);\r\n                Assert.AreEqual(comment.Author, \"Jan K\u00e4llman\");\r\n                ws = TryGetWorksheet(pck, \"Hidden\");\r\n                ws = pck.Workbook.Worksheets[\"Hidden\"];\r\n                Assert.AreEqual<eWorkSheetHidden>(ws.Hidden, eWorkSheetHidden.Hidden);\r\n\r\n                ws = TryGetWorksheet(pck, \"VeryHidden\");\r\n                Assert.AreEqual<eWorkSheetHidden>(ws.Hidden, eWorkSheetHidden.VeryHidden);\r\n\r\n                ws = TryGetWorksheet(pck, \"RichText\");\r\n                Assert.AreEqual(\"Room 02 & 03\", ws.Cells[\"G1\"].RichText.Text);\r\n\r\n                ws = TryGetWorksheet(pck, \"HeaderImage\");\r\n                //Assert.AreEqual(ws.HeaderFooter.Pictures.Count, 3);\r\n\r\n                ws = TryGetWorksheet(pck, \"newsheet\");\r\n                Assert.AreEqual(ws.Cells[\"F2\"].Style.Font.UnderLine, true);\r\n                Assert.AreEqual(ws.Cells[\"F2\"].Style.Font.UnderLineType, ExcelUnderLineType.Double);\r\n                Assert.AreEqual(ws.Cells[\"F3\"].Style.Font.UnderLineType, ExcelUnderLineType.SingleAccounting);\r\n                Assert.AreEqual(ws.Cells[\"F5\"].Style.Font.UnderLineType, ExcelUnderLineType.None);\r\n                Assert.AreEqual(ws.Cells[\"F5\"].Style.Font.UnderLine, false);\r\n\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<string>().Substring(0, 15), 0.3961805555555.ToString(CultureInfo.CurrentCulture));\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<int>(), 0);\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<int?>(), 0);\r\n                Assert.AreEqual(Math.Round(ws.Cells[\"T20\"].GetValue<double>(),15), 0.396180555555556d);\r\n                Assert.AreEqual(Math.Round(ws.Cells[\"T20\"].GetValue<double?>().Value,15), 0.396180555555556d);\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<decimal>(), 0.396180555555556m);\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<decimal?>(), 0.396180555555556m);\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<bool>(), true);\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<bool?>(), true);\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<DateTime>(), new DateTime(1899, 12, 30, 9, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<DateTime?>(), new DateTime(1899, 12, 30, 9, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<TimeSpan>(), new TimeSpan(693593, 9, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T20\"].GetValue<TimeSpan?>(), new TimeSpan(693593, 9, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T20\"].Text, \"09:30:30\");\r\n\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<string>().Substring(0, 15), 1.3961805555555d.ToString(CultureInfo.CurrentCulture));\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<int>(), 1);\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<int?>(), 1);\r\n                Assert.AreEqual(Math.Round(ws.Cells[\"T24\"].GetValue<double>(), 14), 1.39618055555556d);\r\n                Assert.AreEqual(Math.Round(ws.Cells[\"T24\"].GetValue<double?>().Value, 14), 1.39618055555556d);\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<decimal>(), 1.39618055555556m);\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<decimal?>(), 1.39618055555556m);\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<bool>(), true);\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<bool?>(), true);\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<DateTime>(), new DateTime(1899, 12, 31, 9, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<DateTime?>(), new DateTime(1899, 12, 31, 9, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<TimeSpan>(), new TimeSpan(693593, 33, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T24\"].GetValue<TimeSpan?>(), new TimeSpan(693593, 33, 30, 30));\r\n                Assert.AreEqual(ws.Cells[\"T24\"].Text, \"09:30:30\");\r\n\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<string>(), \"40179\");\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<int>(), 40179);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<int?>(), 40179);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<double>(), 40179d);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<double?>(), 40179d);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<decimal>(), 40179m);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<decimal?>(), 40179m);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<bool>(), true);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<bool?>(), true);\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<DateTime>(), new DateTime(2010, 1, 1));\r\n                Assert.AreEqual(ws.Cells[\"U20\"].GetValue<DateTime?>(), new DateTime(2010, 1, 1));\r\n                Assert.AreEqual(ws.Cells[\"U20\"].Text, \"2010-01-01\");\r\n\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<string>(), \"102\");\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<int>(), 102);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<int?>(), 102);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<double>(), 102d);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<double?>(), 102d);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<decimal>(), 102m);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<decimal?>(), 102m);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<bool>(), true);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<bool?>(), true);\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<DateTime>(), new DateTime(1900, 4, 11));\r\n                Assert.AreEqual(ws.Cells[\"V20\"].GetValue<DateTime?>(), new DateTime(1900, 4, 11));\r\n                Assert.AreEqual(ws.Cells[\"V20\"].Text,\r\n                    $\"$102{CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator}00\");\r\n\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<string>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<int>(), 0);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<int?>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<double>(), 0d);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<double?>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<decimal>(), 0m);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<decimal?>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<bool>(), false);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<bool?>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<DateTime>(), DateTime.MinValue);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<DateTime?>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<TimeSpan>(), TimeSpan.Zero);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].GetValue<TimeSpan?>(), null);\r\n                Assert.AreEqual(ws.Cells[\"W20\"].Text, string.Empty);\r\n\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<string>(), \"True\");\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<int>(), 1);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<int?>(), 1);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<double>(), 1d);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<double?>(), 1d);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<decimal>(), 1m);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<decimal?>(), 1m);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<bool>(), true);\r\n                Assert.AreEqual(ws.Cells[\"Y20\"].GetValue<bool?>(), true);\r\n\r\n                Assert.IsInstanceOfType(GetValueException<DateTime>(ws.Cells[\"Y20\"]), typeof(InvalidCastException));\r\n                Assert.IsInstanceOfType(GetValueException<DateTime?>(ws.Cells[\"Y20\"]), typeof(InvalidCastException));\r\n                Assert.IsInstanceOfType(GetValueException<TimeSpan>(ws.Cells[\"Y20\"]), typeof(InvalidCastException));\r\n                Assert.IsInstanceOfType(GetValueException<TimeSpan?>(ws.Cells[\"Y20\"]), typeof(InvalidCastException));\r\n\r\n                Assert.AreEqual(ws.Cells[\"Z20\"].GetValue<string>(), \"Text2\");\r\n                Assert.IsInstanceOfType(GetValueException<int>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<int?>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<double>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<double?>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<decimal>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<decimal?>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<bool>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<bool?>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<DateTime>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<DateTime?>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<TimeSpan>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<TimeSpan?>(ws.Cells[\"Z20\"]), typeof(FormatException));\r\n                Assert.AreEqual(ws.Cells[\"Z20\"].Text, \"Text2\");\r\n\r\n                // even though value is set as integer, it is stored/exposed by EPPlust as double; feature?\r\n                //Assert.IsInstanceOfType(ws.Cells[\"X19\"].Value, typeof(int));\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<string>(), \"210\");\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<int>(), 210);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<int?>(), 210);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<double>(), 210d);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<double?>(), 210d);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<decimal>(), 210m);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<decimal?>(), 210m);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<bool>(), true);\r\n                Assert.AreEqual(ws.Cells[\"X19\"].GetValue<bool?>(), true);\r\n                // double is converted to DateTime and TimeSpan, but value is meaningless\r\n                Assert.IsNull(GetValueException<DateTime>(ws.Cells[\"X19\"]));\r\n                Assert.IsNull(GetValueException<DateTime?>(ws.Cells[\"X19\"]));\r\n                Assert.IsNull(GetValueException<TimeSpan>(ws.Cells[\"X19\"]));\r\n                Assert.IsNull(GetValueException<TimeSpan?>(ws.Cells[\"X19\"]));\r\n                Assert.AreEqual(ws.Cells[\"X19\"].Text, \"210\");\r\n\r\n                Assert.IsInstanceOfType(ws.Cells[\"AA19\"].Value, typeof(string));\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<string>(), \"210\");\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<int>(), 210);\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<int?>(), 210);\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<double>(), 210d);\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<double?>(), 210d);\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<decimal>(), 210m);\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].GetValue<decimal?>(), 210m);\r\n                Assert.IsInstanceOfType(GetValueException<bool>(ws.Cells[\"AA19\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<bool?>(ws.Cells[\"AA19\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<DateTime>(ws.Cells[\"AA19\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<DateTime?>(ws.Cells[\"AA19\"]), typeof(FormatException));\r\n                Assert.AreEqual(TimeSpan.FromDays(210), ws.Cells[\"AA19\"].GetValue<TimeSpan>());\r\n                Assert.AreEqual(TimeSpan.FromDays(210), ws.Cells[\"AA19\"].GetValue<TimeSpan?>());\r\n                Assert.AreEqual(ws.Cells[\"AA19\"].Text, \"210\");\r\n\r\n                // blank string produces null for nullable primitive types and conversion to non-nullable types throws FormatException\r\n                Assert.IsInstanceOfType(ws.Cells[\"AA18\"].Value, typeof(string));\r\n                Assert.IsInstanceOfType(GetValueException<int>(ws.Cells[\"AA18\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<double>(ws.Cells[\"AA18\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<decimal>(ws.Cells[\"AA18\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<bool>(ws.Cells[\"AA18\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<DateTime>(ws.Cells[\"AA18\"]), typeof(FormatException));\r\n                Assert.IsInstanceOfType(GetValueException<TimeSpan>(ws.Cells[\"AA18\"]), typeof(FormatException));\r\n\r\n                Assert.IsNull(GetValueException<int?>(ws.Cells[\"AA18\"]));\r\n                Assert.IsNull(GetValueException<double?>(ws.Cells[\"AA18\"]));\r\n                Assert.IsNull(GetValueException<decimal?>(ws.Cells[\"AA18\"]));\r\n                Assert.IsNull(GetValueException<bool?>(ws.Cells[\"AA18\"]));\r\n                Assert.IsNull(GetValueException<DateTime?>(ws.Cells[\"AA18\"]));\r\n                Assert.IsNull(GetValueException<TimeSpan?>(ws.Cells[\"AA18\"]));\r\n                Assert.AreEqual(ws.Cells[\"AA18\"].Text, \" \");\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ReadStreamWithTemplateWorkSheet()\r\n        {\r\n            AssertIfNotExists(\"WorksheetRead.xlsx\");\r\n            using (FileStream instream = new FileStream(_worksheetPath + @\"WorksheetRead.xlsx\", FileMode.Open, FileAccess.Read))\r\n            {\r\n                MemoryStream stream = new MemoryStream();\r\n                using (ExcelPackage pck = new ExcelPackage(stream, instream))\r\n                {\r\n                    var ws = TryGetWorksheet(pck, \"Perf\");\r\n                    Assert.AreEqual(ws.Cells[\"H6\"].Formula, \"B5+B6\");\r\n\r\n                    ws = TryGetWorksheet(pck, \"newsheet\");\r\n                    Assert.AreEqual(ws.GetValue<DateTime>(20, 21), new DateTime(2010, 1, 1));\r\n\r\n                    ws = TryGetWorksheet(pck, \"Loaded DataTable\");\r\n                    Assert.AreEqual(ws.GetValue<string>(2, 1), \"Row1\");\r\n                    Assert.AreEqual(ws.GetValue<int>(2, 2), 1);\r\n                    Assert.AreEqual(ws.GetValue<bool>(2, 3), true);\r\n                    Assert.AreEqual(ws.GetValue<double>(2, 4), 1.5);\r\n\r\n                    ws = TryGetWorksheet(pck, \"RichText\");\r\n\r\n                    var r1 = ws.Cells[\"A1\"].RichText[0];\r\n                    Assert.AreEqual(r1.Text, \"Test\");\r\n                    Assert.AreEqual(r1.Bold, true);\r\n\r\n                    ws = TryGetWorksheet(pck, \"Pic URL\");\r\n                    Assert.AreEqual(((ExcelPicture)ws.Drawings[\"Pic URI\"]).Hyperlink, \"http://epplus.codeplex.com\");\r\n\r\n                    Assert.AreEqual(pck.Workbook.Worksheets[\"Address\"].GetValue<string>(40, 1), \"\\b\\t\");\r\n\r\n                    pck.SaveAs(new FileInfo(@\"Test\\Worksheet2.xlsx\"));\r\n                }\r\n                instream.Close();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ReadStreamSaveAsStream()\r\n        {\r\n            if (!File.Exists(_worksheetPath + @\"WorksheetRead.xlsx\"))\r\n            {\r\n                Assert.Inconclusive(\"WorksheetRead.xlsx does not exists\");\r\n            }\r\n            using (FileStream instream = new FileStream(_worksheetPath + @\"/WorksheetRead.xlsx\", FileMode.Open, FileAccess.ReadWrite))\r\n            {\r\n                MemoryStream stream = new MemoryStream();\r\n                using (ExcelPackage pck = new ExcelPackage(instream))\r\n                {\r\n                    var ws = TryGetWorksheet(pck, \"Names\");\r\n                    Assert.AreEqual(ws.Names[\"FullCol\"].Start.Row, 1);\r\n                    Assert.AreEqual(ws.Names[\"FullCol\"].End.Row, ExcelPackage.MaxRows);\r\n                    pck.SaveAs(stream);\r\n                }\r\n                instream.Close();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void LoadData()\r\n        {\r\n            ExcelWorksheet ws = _pck.Workbook.Worksheets.Add(\"newsheet\");\r\n            ws.Cells[\"T19\"].Value = new TimeSpan(3, 30, 30);\r\n            ws.Cells[\"T20\"].Value = new TimeSpan(9, 30, 30);\r\n            ws.Cells[\"T21\"].Value = new TimeSpan(15, 30, 30);\r\n            ws.Cells[\"T22\"].Value = new TimeSpan(21, 30, 30);\r\n            ws.Cells[\"T23\"].Value = new TimeSpan(27, 30, 30);\r\n            ws.Cells[\"T24\"].Value = new TimeSpan(33, 30, 30);\r\n            ws.Cells[\"T19:T24\"].Style.Numberformat.Format = \"hh:mm:ss\";\r\n\r\n            ws.Cells[\"U19\"].Value = new DateTime(2009, 12, 31);\r\n            ws.Cells[\"U20\"].Value = new DateTime(2010, 1, 1);\r\n            ws.Cells[\"U21\"].Value = new DateTime(2010, 1, 2);\r\n            ws.Cells[\"U22\"].Value = new DateTime(2010, 1, 3);\r\n            ws.Cells[\"U23\"].Value = new DateTime(2010, 1, 4);\r\n            ws.Cells[\"U24\"].Value = new DateTime(2010, 1, 5);\r\n            ws.Cells[\"U19:U24\"].Style.Numberformat.Format = \"yyyy-mm-dd\";\r\n\r\n            ws.Cells[\"V19\"].Value = 100;\r\n            ws.Cells[\"V20\"].Value = 102;\r\n            ws.Cells[\"V21\"].Value = 101;\r\n            ws.Cells[\"V22\"].Value = 103;\r\n            ws.Cells[\"V23\"].Value = 105;\r\n            ws.Cells[\"V24\"].Value = 104;\r\n            ws.Cells[\"v19:v24\"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;\r\n            ws.Cells[\"v19:v24\"].Style.Numberformat.Format = @\"$#,##0.00_);($#,##0.00)\";\r\n\r\n            // int value is actually exposed as double; feature or bug??\r\n            ws.Cells[\"X19\"].Value = 210;\r\n            ws.Cells[\"X20\"].Value = 212;\r\n            ws.Cells[\"X21\"].Value = 221;\r\n            ws.Cells[\"X22\"].Value = 123;\r\n            ws.Cells[\"X23\"].Value = 135;\r\n            ws.Cells[\"X24\"].Value = 134;\r\n\r\n            ws.Cells[\"AA18\"].Value = \" \";\r\n\r\n            ws.Cells[\"AA19\"].Value = \"210\";\r\n            ws.Cells[\"AA20\"].Value = \"212\";\r\n            ws.Cells[\"AA21\"].Value = \"221\";\r\n            ws.Cells[\"AA22\"].Value = \"123\";\r\n            ws.Cells[\"AA23\"].Value = \"135\";\r\n            ws.Cells[\"AA24\"].Value = \"134\";\r\n\r\n            ws.Cells[\"Y19\"].Value = true;\r\n            ws.Cells[\"Y20\"].Value = true;\r\n            ws.Cells[\"Y21\"].Value = true;\r\n            ws.Cells[\"Y22\"].Value = false;\r\n            ws.Cells[\"Y23\"].Value = false;\r\n            ws.Cells[\"Y24\"].Value = false;\r\n\r\n            ws.Cells[\"Z19\"].Value = \"Text1\";\r\n            ws.Cells[\"Z20\"].Value = \"Text2\";\r\n            ws.Cells[\"Z21\"].Value = \"Text3\";\r\n            ws.Cells[\"Z22\"].Value = \"Text4\";\r\n            ws.Cells[\"Z23\"].Value = \"Text5\";\r\n            ws.Cells[\"Z24\"].Value = \"Text6\";\r\n\r\n            // add autofilter\r\n            ws.Cells[\"U19:X24\"].AutoFilter = true;\r\n            ExcelPicture pic = ws.Drawings.AddPicture(\"Pic1\", Properties.Resources.Test1);\r\n            pic.SetPosition(150, 140);\r\n\r\n            ws.Cells[\"A30\"].Value = \"Text orientation 45\";\r\n            ws.Cells[\"A30\"].Style.TextRotation = 45;\r\n            ws.Cells[\"B30\"].Value = \"Text orientation 90\";\r\n            ws.Cells[\"B30\"].Style.TextRotation = 90;\r\n            ws.Cells[\"C30\"].Value = \"Text orientation 180\";\r\n            ws.Cells[\"C30\"].Style.TextRotation = 180;\r\n            ws.Cells[\"D30\"].Value = \"Text orientation 38\";\r\n            ws.Cells[\"D30\"].Style.TextRotation = 38;\r\n            ws.Cells[\"D30\"].Style.Font.Bold = true;\r\n            ws.Cells[\"D30\"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Right;\r\n\r\n            ws.Workbook.Names.Add(\"TestName\", ws.Cells[\"B30:E30\"]);\r\n            ws.Workbook.Names[\"TestName\"].Style.Font.Color.SetColor(Color.Red);\r\n\r\n\r\n            ws.Workbook.Names[\"TestName\"].Offset(1, 0).Value = \"Offset test 1\";\r\n            ws.Workbook.Names[\"TestName\"].Offset(2, -1, 2, 2).Value = \"Offset test 2\";\r\n\r\n            //Test vertical align\r\n            ws.Cells[\"E19\"].Value = \"Subscript\";\r\n            ws.Cells[\"E19\"].Style.Font.VerticalAlign = ExcelVerticalAlignmentFont.Subscript;\r\n            ws.Cells[\"E20\"].Value = \"Subscript\";\r\n            ws.Cells[\"E20\"].Style.Font.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;\r\n            ws.Cells[\"E21\"].Value = \"Superscript\";\r\n            ws.Cells[\"E21\"].Style.Font.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;\r\n            ws.Cells[\"E21\"].Style.Font.VerticalAlign = ExcelVerticalAlignmentFont.None;\r\n\r\n\r\n            ws.Cells[\"E22\"].Value = \"Indent 2\";\r\n            ws.Cells[\"E22\"].Style.Indent = 2;\r\n            ws.Cells[\"E23\"].Value = \"Shrink to fit\";\r\n            ws.Cells[\"E23\"].Style.ShrinkToFit = true;\r\n\r\n            ws.Cells[\"e24\"].Value = \"ReadingOrder LeftToRight\";\r\n            ws.Cells[\"e24\"].Style.ReadingOrder = ExcelReadingOrder.LeftToRight;\r\n            ws.Cells[\"e25\"].Value = \"ReadingOrder RightToLeft\";\r\n            ws.Cells[\"e25\"].Style.ReadingOrder = ExcelReadingOrder.RightToLeft;\r\n            ws.Cells[\"e26\"].Value = \"ReadingOrder Context\";\r\n            ws.Cells[\"e26\"].Style.ReadingOrder = ExcelReadingOrder.ContextDependent;\r\n            ws.Cells[\"e27\"].Value = \"Default Readingorder\";\r\n\r\n            //Underline\r\n\r\n            ws.Cells[\"F1:F7\"].Value = \"Underlined\";\r\n            ws.Cells[\"F1\"].Style.Font.UnderLineType = ExcelUnderLineType.Single;\r\n            ws.Cells[\"F2\"].Style.Font.UnderLineType = ExcelUnderLineType.Double;\r\n            ws.Cells[\"F3\"].Style.Font.UnderLineType = ExcelUnderLineType.SingleAccounting;\r\n            ws.Cells[\"F4\"].Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;\r\n            ws.Cells[\"F5\"].Style.Font.UnderLineType = ExcelUnderLineType.None;\r\n            ws.Cells[\"F6:F7\"].Style.Font.UnderLine = true;\r\n            ws.Cells[\"F7\"].Style.Font.UnderLine = false;\r\n\r\n            ws.Cells[\"E24\"].Value = 0;\r\n            Assert.AreEqual(ws.Cells[\"E24\"].Text, \"0\");\r\n            ws.Cells[\"F7\"].Style.Font.UnderLine = false;\r\n            ws.Names.Add(\"SheetName\", ws.Cells[\"A1:A2\"]);\r\n            ws.View.FreezePanes(3, 5);\r\n\r\n            foreach (ExcelRangeBase cell in ws.Cells[\"A1\"])\r\n            {\r\n                Assert.Fail(\"A1 is not set\");\r\n            }\r\n\r\n            foreach (ExcelRangeBase cell in ws.Cells[ws.Dimension.Address])\r\n            {\r\n                System.Diagnostics.Debug.WriteLine(cell.Address);\r\n            }\r\n\r\n            ////Linq test\r\n            var res = from c in ws.Cells[ws.Dimension.Address] where c.Value != null && c.Value.ToString() == \"Offset test 1\" select c;\r\n\r\n            foreach (ExcelRangeBase cell in res)\r\n            {\r\n                System.Diagnostics.Debug.WriteLine(cell.Address);\r\n            }\r\n\r\n            _pck.Workbook.Properties.Author = \"Jan K\u00e4llman\";\r\n            _pck.Workbook.Properties.Category = \"Category\";\r\n            _pck.Workbook.Properties.Comments = \"Comments\";\r\n            _pck.Workbook.Properties.Company = \"Adventure works\";\r\n            _pck.Workbook.Properties.Keywords = \"Keywords\";\r\n            _pck.Workbook.Properties.Title = \"Title\";\r\n            _pck.Workbook.Properties.Subject = \"Subject\";\r\n            _pck.Workbook.Properties.Status = \"Status\";\r\n            _pck.Workbook.Properties.HyperlinkBase = new Uri(\"https://epplussoftware.com\", UriKind.Absolute);\r\n            _pck.Workbook.Properties.Manager = \"Manager\";\r\n            _pck.Workbook.Properties.AppVersion = \"5.0000\";\r\n            _pck.Workbook.Properties.LinksUpToDate = false;\r\n            _pck.Workbook.Properties.HyperlinksChanged = false;\r\n            _pck.Workbook.Properties.SharedDoc = false;\r\n            _pck.Workbook.Properties.ScaleCrop = false;\r\n\r\n\r\n            _pck.Workbook.Properties.SetCustomPropertyValue(\"DateTest\", new DateTime(2008, 12, 31));\r\n            Console.WriteLine(_pck.Workbook.Properties.GetCustomPropertyValue(\"DateTest\").ToString());\r\n            _pck.Workbook.Properties.SetCustomPropertyValue(\"Author\", \"Jan K\u00e4llman\");\r\n            _pck.Workbook.Properties.SetCustomPropertyValue(\"Count\", 1);\r\n            _pck.Workbook.Properties.SetCustomPropertyValue(\"IsTested\", false);\r\n            _pck.Workbook.Properties.SetCustomPropertyValue(\"LargeNo\", 123456789123);\r\n            _pck.Workbook.Properties.SetCustomPropertyValue(\"Author\", 3);\r\n        }\r\n        const int PERF_ROWS = 5000;\r\n        [TestMethod]\r\n        public void Performance()\r\n        {\r\n            ExcelWorksheet ws = _pck.Workbook.Worksheets.Add(\"Perf\");\r\n            Console.WriteLine(\"StartTime {0}\", DateTime.Now);\r\n\r\n            Random r = new Random();\r\n            for (int i = 1; i <= PERF_ROWS; i++)\r\n            {\r\n                ws.Cells[i, 1].Value = string.Format(\"Row {0}\\n.Test new row\\\"' \u00f6\u00e4\u00e5\u00fc\", i);\r\n                ws.Cells[i, 2].Value = i;\r\n                ws.Cells[i, 2].Style.WrapText = true;\r\n                ws.Cells[i, 3].Value = DateTime.Now;\r\n                ws.Cells[i, 4].Value = r.NextDouble() * 100000;\r\n            }\r\n            ws.Cells[1, 2, PERF_ROWS, 2].Style.Numberformat.Format = \"#,##0\";\r\n            ws.Cells[1, 3, PERF_ROWS, 3].Style.Numberformat.Format = \"yyyy-MM-dd HH:mm:ss\";\r\n            ws.Cells[1, 4, PERF_ROWS, 4].Style.Numberformat.Format = \"#,##0.00\";\r\n            ws.Cells[PERF_ROWS + 1, 2].Formula = \"SUM(B1:B\" + PERF_ROWS.ToString() + \")\";\r\n            ws.Column(1).Width = 12;\r\n            ws.Column(2).Width = 8;\r\n            ws.Column(3).Width = 20;\r\n            ws.Column(4).Width = 14;\r\n\r\n            ws.Cells[\"A1:C1\"].Merge = true;\r\n            ws.Cells[\"A2:A5\"].Merge = true;\r\n            ws.DeleteRow(1, 1);\r\n            ws.InsertRow(1, 1);\r\n            ws.InsertRow(3, 1);\r\n\r\n            ws.DeleteRow(1000, 3, true);\r\n            ws.DeleteRow(2000, 1, true);\r\n\r\n            ws.InsertRow(2001, 4);\r\n\r\n            ws.InsertRow(2010, 1, 2010);\r\n\r\n            ws.InsertRow(20000, 2);\r\n\r\n            ws.DeleteRow(20005, 4, false);\r\n\r\n            //Single formula\r\n            ws.Cells[\"H3\"].Formula = \"B2+B3\";\r\n            ws.DeleteRow(2, 1, true);\r\n\r\n            //Shared formula\r\n            ws.Cells[\"H5:H30\"].Formula = \"B4+B5\";\r\n            ws.Cells[\"H5:H30\"].Style.Numberformat.Format = \"_(\\\"$\\\"* # ##0.00_);_(\\\"$\\\"* (# ##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\";\r\n            ws.InsertRow(7, 3);\r\n            ws.InsertRow(2, 1);\r\n            ws.DeleteRow(30, 3, true);\r\n\r\n            ws.DeleteRow(15, 2, true);\r\n            ws.Cells[\"a1:B100\"].Style.Locked = false;\r\n            ws.Cells[\"a1:B12\"].Style.Hidden = true;\r\n            Console.WriteLine(\"EndTime {0}\", DateTime.Now);\r\n        }\r\n        [TestMethod]\r\n        public void InsertDeleteTestRows()\r\n        {\r\n            ExcelWorksheet ws = _pck.Workbook.Worksheets.Add(\"InsertDelete\");\r\n            //ws.Cells.Value = 0;\r\n            ws.Cells[\"A1:C5\"].Value = 1;\r\n            Assert.AreEqual(((object[,])ws.Cells[\"A1:C5\"].Value)[1, 1], 1);\r\n            ws.Cells[\"A1:B3\"].Merge = true;\r\n            ws.Cells[\"D3\"].Formula = \"A2+C5\";\r\n            ws.InsertRow(2, 1);\r\n\r\n            ws.Cells[\"A10:C15\"].Value = 1;\r\n            ws.Cells[\"A11:B13\"].Merge = true;\r\n            ws.DeleteRow(12, 1, true);\r\n\r\n            ws.Cells[\"a1:B100\"].Style.Locked = false;\r\n            ws.Cells[\"a1:B12\"].Style.Hidden = true;\r\n            ws.Protection.IsProtected = true;\r\n            ws.Protection.SetPassword(\"Password\");\r\n\r\n\r\n            var range = ws.Cells[\"B2:D100\"];\r\n\r\n            ws.PrinterSettings.PrintArea = null;\r\n            ws.PrinterSettings.PrintArea = ws.Cells[\"B2:D99\"];\r\n            ws.PrinterSettings.PrintArea = null;\r\n            ws.Row(15).PageBreak = true;\r\n            ws.Column(3).PageBreak = true;\r\n            ws.View.ShowHeaders = false;\r\n            ws.View.PageBreakView = true;\r\n\r\n            ws.Row(200).Height = 50;\r\n            ws.Workbook.CalcMode = ExcelCalcMode.Automatic;\r\n\r\n            Assert.AreEqual(range.Start.Column, 2);\r\n            Assert.AreEqual(range.Start.Row, 2);\r\n            Assert.AreEqual(range.Start.Address, \"B2\");\r\n\r\n            Assert.AreEqual(range.End.Column, 4);\r\n            Assert.AreEqual(range.End.Row, 100);\r\n            Assert.AreEqual(range.End.Address, \"D100\");\r\n\r\n            ExcelAddress addr = new ExcelAddress(\"B1:D3\");\r\n\r\n            Assert.AreEqual(addr.Start.Column, 2);\r\n            Assert.AreEqual(addr.Start.Row, 1);\r\n            Assert.AreEqual(addr.End.Column, 4);\r\n            Assert.AreEqual(addr.End.Row, 3);\r\n        }\r\n        [TestMethod]\r\n        public void InsertDeleteTestColumns()\r\n        {\r\n            ExcelWorksheet ws = _pck.Workbook.Worksheets.Add(\"InsertDeleteColumns\");\r\n            //ws.Cells.Value = 0;\r\n            ws.Cells[\"A1:C1\"].Value = 1;\r\n            ws.Cells[\"A2:C2\"].Value = 2;\r\n            ws.Cells[\"A3:C3\"].Value = 3;\r\n            ws.Cells[\"A4:C4\"].Value = 4;\r\n            ws.Cells[\"A5:C5\"].Value = 5;\r\n            Assert.AreEqual(((object[,])ws.Cells[\"A1:C5\"].Value)[1, 1], 2);\r\n            ws.Cells[\"A1:B3\"].Merge = true;\r\n            ws.Cells[\"D3\"].Formula = \"A2+C5\";\r\n            ws.InsertColumn(1, 1);\r\n\r\n            //ws.DeleteColumn(3, 2);\r\n            ws.Cells[\"K10:M15\"].Value = 1;\r\n            ws.Cells[\"K11:L13\"].Merge = true;\r\n            ws.DeleteColumn(12, 1);\r\n\r\n            ws.Cells[\"X1:Y100\"].Style.Locked = false;\r\n            ws.Cells[\"C1:Y12\"].Style.Hidden = true;\r\n            ws.Protection.IsProtected = true;\r\n            ws.Protection.SetPassword(\"Password\");\r\n\r\n\r\n            var range = ws.Cells[\"X2:Z100\"];\r\n\r\n            ws.PrinterSettings.PrintArea = null;\r\n            ws.PrinterSettings.PrintArea = ws.Cells[\"X2:Z99\"];\r\n            ws.PrinterSettings.PrintArea = null;\r\n            ws.Row(15).PageBreak = true;\r\n            ws.Column(3).PageBreak = true;\r\n            ws.View.ShowHeaders = false;\r\n            ws.View.PageBreakView = true;\r\n\r\n            ws.Row(200).Height = 50;\r\n            ws.Workbook.CalcMode = ExcelCalcMode.Automatic;\r\n\r\n            //Assert.AreEqual(range.Start.Column, 2);\r\n            //Assert.AreEqual(range.Start.Row, 2);\r\n            //Assert.AreEqual(range.Start.Address, \"B2\");\r\n\r\n            //Assert.AreEqual(range.End.Column, 4);\r\n            //Assert.AreEqual(range.End.Row, 100);\r\n            //Assert.AreEqual(range.End.Address, \"D100\");\r\n\r\n            //ExcelAddress addr = new ExcelAddress(\"B1:D3\");\r\n\r\n            //Assert.AreEqual(addr.Start.Column, 2);\r\n            //Assert.AreEqual(addr.Start.Row, 1);\r\n            //Assert.AreEqual(addr.End.Column, 4);\r\n            //Assert.AreEqual(addr.End.Row, 3);\r\n        }\r\n        [TestMethod]\r\n        public void RichTextCells()\r\n        {\r\n            ExcelWorksheet ws = _pck.Workbook.Worksheets.Add(\"RichText\");\r\n            var rs = ws.Cells[\"A1\"].RichText;\r\n\r\n            var r1 = rs.Add(\"Test\");\r\n            r1.Bold = true;\r\n            r1.Color = Color.Pink;\r\n\r\n            var r2 = rs.Add(\" of\");\r\n            r2.Size = 14;\r\n            r2.Italic = true;\r\n\r\n            var r3 = rs.Add(\" rich\");\r\n            r3.FontName = \"Arial\";\r\n            r3.Size = 18;\r\n            r3.Italic = true;\r\n\r\n            var r4 = rs.Add(\"text.\");\r\n            r4.Size = 8.25f;\r\n            r4.Italic = true;\r\n            r4.UnderLine = true;\r\n\r\n            var rIns = rs.Insert(2, \" inserted\");\r\n            rIns.Bold = true;\r\n            rIns.Color = Color.Green;\r\n\r\n            rs = ws.Cells[\"A3:A4\"].RichText;\r\n\r\n            var r5 = rs.Add(\"Double\");\r\n            r5.Color = Color.PeachPuff;\r\n            r5.FontName = \"times new roman\";\r\n            r5.Size = 16;\r\n\r\n            var r6 = rs.Add(\" cells\");\r\n            r6.Color = Color.Red;\r\n            r6.UnderLine = true;\r\n\r\n\r\n            rs = ws.Cells[\"C8\"].RichText;\r\n            r1 = rs.Add(\"Blue \");\r\n            r1.Color = Color.Blue;\r\n\r\n            r2 = rs.Add(\"Red\");\r\n            r2.Color = Color.Red;\r\n\r\n            ws.Cells[\"G1\"].RichText.Add(\"Room 02 & 03\");\r\n            ws.Cells[\"G2\"].RichText.Text = \"Room 02 & 03\";\r\n\r\n            ws = ws = _pck.Workbook.Worksheets.Add(\"RichText2\");\r\n            ws.Cells[\"A1\"].RichText.Text = \"Room 02 & 03\";\r\n            ws.TabColor = Color.PowderBlue;\r\n\r\n            r1 = ws.Cells[\"G3\"].RichText.Add(\"Test\");\r\n            r1.Bold = true;\r\n            ws.Cells[\"G3\"].RichText.Add(\" a new t\");\r\n            ws.Cells[\"G3\"].RichText[1].Bold = false;\r\n\r\n            //Set printersettings\r\n            ws.PrinterSettings.RepeatColumns = ws.Cells[\"A:B\"];\r\n            ws.PrinterSettings.RepeatRows = ws.Cells[\"1:11\"];\r\n            ws.PrinterSettings.TopMargin = 1M;\r\n            ws.PrinterSettings.LeftMargin = 1M;\r\n            ws.PrinterSettings.BottomMargin = 1M;\r\n            ws.PrinterSettings.RightMargin = 1M;\r\n            ws.PrinterSettings.Orientation = eOrientation.Landscape;\r\n            ws.PrinterSettings.PaperSize = ePaperSize.A4;\r\n\r\n        }\r\n        [TestMethod]\r\n        public void TestComments()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Comment\");\r\n            var comment = ws.Comments.Add(ws.Cells[\"C3\"], \"Jan K\u00e4llman\\r\\nAuthor\\r\\n\", \"JK\");\r\n            comment.RichText[0].Bold = true;\r\n            comment.RichText[0].PreserveSpace = true;\r\n            var rt = comment.RichText.Add(\"Test comment\");\r\n            comment.VerticalAlignment = eTextAlignVerticalVml.Center;\r\n            comment = ws.Comments.Add(ws.Cells[\"A2\"], \"Jan K\u00e4llman\\r\\nAuthor\\r\\n1\", \"JK\");\r\n\r\n            comment = ws.Comments.Add(ws.Cells[\"A1\"], \"Jan K\u00e4llman\\r\\nAuthor\\r\\n2\", \"JK\");\r\n            comment.AlternativeText = \"Test of AlternetiveText2\";\r\n            comment = ws.Comments.Add(ws.Cells[\"C2\"], \"Jan K\u00e4llman\\r\\nAuthor\\r\\n3\", \"JK\");\r\n            comment = ws.Comments.Add(ws.Cells[\"C1\"], \"Jan K\u00e4llman\\r\\nAuthor\\r\\n5\", \"JK\");\r\n            comment = ws.Comments.Add(ws.Cells[\"B1\"], \"Jan K\u00e4llman\\r\\nAuthor\\r\\n7\", \"JK\");\r\n\r\n            ws.Comments.Remove(ws.Cells[\"A2\"].Comment);\r\n            //comment.HorizontalAlignment = eTextAlignHorizontalVml.Center;\r\n            //comment.Visible = true;\r\n            //comment.BackgroundColor = Color.Green;\r\n            //comment.To.Row += 4;\r\n            //comment.To.Column += 2;\r\n            //comment.LineStyle = eLineStyleVml.LongDash;\r\n            //comment.LineColor = Color.Red;\r\n            //comment.LineWidth = (Single)2.5;\r\n            //rt.Color = Color.Red;\r\n\r\n            var rt2 = ws.Cells[\"B2\"].AddComment(\"Range Added Comment test test test test test test test test test test testtesttesttesttesttesttesttesttesttesttest\", \"Jan K\u00e4llman\");\r\n            ws.Cells[\"c3\"].Comment.AutoFit = true;\r\n\r\n        }\r\n        [TestMethod]\r\n            public void Address()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Address\");\r\n            ws.Cells[\"A1:A4,B5:B7\"].Value = \"AddressTest\";\r\n            ws.Cells[\"A1:A4,B5:B7\"].Style.Font.Color.SetColor(Color.Red);\r\n            ws.Cells[\"A2:A3,B4:B8\"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.LightUp;\r\n            ws.Cells[\"A2:A3,B4:B8\"].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);\r\n            ws.Cells[\"2:2\"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;\r\n            ws.Cells[\"2:2\"].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);\r\n            ws.Cells[\"B:B\"].Style.Font.Name = \"Times New Roman\";\r\n\r\n            ws.Cells[\"C4:G4,H8:H30,B15\"].FormulaR1C1 = \"RC[-1]+R1C[-1]\";\r\n            ws.Cells[\"C4:G4,H8:H30,B15\"].Style.Numberformat.Format = \"#,##0.000\";\r\n            ws.Cells[\"G1,G3\"].Hyperlink = new ExcelHyperLink(\"Comment!$A$1\", \"Comment\");\r\n            ws.Cells[\"G1,G3\"].Style.Font.Color.SetColor(Color.Blue);\r\n            ws.Cells[\"G1,G3\"].Style.Font.UnderLine = true;\r\n\r\n            ws.Cells[\"A1:G5\"].Copy(ws.Cells[\"A50\"]);\r\n\r\n            var ws2 = _pck.Workbook.Worksheets.Add(\"Copy Cells\");\r\n            ws.Cells[\"1:4\"].Copy(ws2.Cells[\"1:1\"]);\r\n\r\n            ws.Cells[\"H1:J5\"].Merge = true;\r\n            ws.Cells[\"2:3\"].Copy(ws.Cells[\"50:51\"]);\r\n\r\n            ws.Cells[\"A40\"].Value = new string(new char[] { (char)8, (char)9 });\r\n\r\n            ExcelRange styleRng = ws.Cells[\"A1\"];\r\n            ExcelStyle tempStyle = styleRng.Style;\r\n            var namedStyle = _pck.Workbook.Styles.CreateNamedStyle(\"HyperLink\", tempStyle);\r\n            namedStyle.Style.Font.UnderLineType = ExcelUnderLineType.Single;\r\n            namedStyle.Style.Font.Color.SetColor(Color.Blue);\r\n        }\r\n        [TestMethod]\r\n        public void Encoding()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Encoding\");\r\n            ws.Cells[\"A1\"].Value = \"_x0099_\";\r\n            ws.Cells[\"A2\"].Value = \" Test \\b\" + (char)1 + \" end\\\"\";\r\n            ws.Cells[\"A3\"].Value = \"_x0097_ test_x001D_1234\";\r\n            ws.Cells[\"A4\"].Value = \"test\" + (char)31;   //Bug issue 14689 //Fixed\r\n        }\r\n        [TestMethod]\r\n        public void WorksheetCopy()\r\n        {\r\n            using (var pck = OpenPackage(\"WorksheetRead.xlsx\"))\r\n            {\r\n                var ws = TryGetWorksheet(pck, \"Address\");\r\n                var wsCopy = pck.Workbook.Worksheets.Add(\"Copied Address\", ws);\r\n\r\n                ws = TryGetWorksheet(pck, \"Comment\");\r\n                ws = pck.Workbook.Worksheets.Add(\"Copied Comment\", ws);\r\n\r\n                ExcelPackage pck2 = new ExcelPackage();\r\n                pck2.Workbook.Worksheets.Add(\"Copy From other pck\", pck.Workbook.Worksheets[\"Address\"]);\r\n                pck2.SaveAs(new FileInfo(_worksheetPath + \"copy.xlsx\"));\r\n                pck2.Dispose();\r\n                pck2 = null;\r\n                Assert.AreEqual(6, ws.Comments.Count);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void LoadFromCollectionTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"LoadFromCollection\");\r\n            List<TestDTO> list = new List<TestDTO>();\r\n            list.Add(new TestDTO() { Id = 1, Name = \"Item1\", Boolean = false, Date = new DateTime(2011, 1, 1), dto = null, NameVar = \"Field 1\" });\r\n            list.Add(new TestDTO() { Id = 2, Name = \"Item2\", Boolean = true, Date = new DateTime(2011, 1, 15), dto = new TestDTO(), NameVar = \"Field 2\" });\r\n            list.Add(new TestDTO() { Id = 3, Name = \"Item3\", Boolean = false, Date = new DateTime(2011, 2, 1), dto = null, NameVar = \"Field 3\" });\r\n            list.Add(new TestDTO() { Id = 4, Name = \"Item4\", Boolean = true, Date = new DateTime(2011, 4, 19), dto = list[1], NameVar = \"Field 4\" });\r\n            list.Add(new TestDTO() { Id = 5, Name = \"Item5\", Boolean = false, Date = new DateTime(2011, 5, 8), dto = null, NameVar = \"Field 5\" });\r\n            list.Add(new TestDTO() { Id = 6, Name = \"Item6\", Boolean = true, Date = new DateTime(2010, 3, 27), dto = null, NameVar = \"Field 6\" });\r\n            list.Add(new TestDTO() { Id = 7, Name = \"Item7\", Boolean = false, Date = new DateTime(2009, 1, 5), dto = list[3], NameVar = \"Field 7\" });\r\n            list.Add(new TestDTO() { Id = 8, Name = \"Item8\", Boolean = true, Date = new DateTime(2018, 12, 31), dto = null, NameVar = \"Field 8\" });\r\n            list.Add(new TestDTO() { Id = 9, Name = \"Item9\", Boolean = false, Date = new DateTime(2010, 2, 1), dto = null, NameVar = \"Field 9\" });\r\n\r\n            ws.Cells[\"A1\"].LoadFromCollection(list, true);\r\n            ws.Cells[\"A30\"].LoadFromCollection(list, true, OfficeOpenXml.Table.TableStyles.Medium9, BindingFlags.Instance | BindingFlags.Instance, typeof(TestDTO).GetFields());\r\n\r\n            ws.Cells[\"A45\"].LoadFromCollection(list, true, OfficeOpenXml.Table.TableStyles.Light1, BindingFlags.Instance | BindingFlags.Instance, new MemberInfo[] { typeof(TestDTO).GetMethod(\"GetNameID\"), typeof(TestDTO).GetField(\"NameVar\") });\r\n            ws.Cells[\"J1\"].LoadFromCollection(from l in list where l.Boolean orderby l.Date select new { Name = l.Name, Id = l.Id, Date = l.Date, NameVariable = l.NameVar }, true, OfficeOpenXml.Table.TableStyles.Dark4);\r\n\r\n            var ints = new int[] { 1, 3, 4, 76, 2, 5 };\r\n            ws.Cells[\"A15\"].Value = ints;\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"LoadFromCollection_Inherited\");\r\n            List<InheritTestDTO> inhList = new List<InheritTestDTO>();\r\n            inhList.Add(new InheritTestDTO() { Id = 1, Name = \"Item1\", Boolean = false, Date = new DateTime(2011, 1, 1), dto = null, NameVar = \"Field 1\", InheritedProp=\"Inherited 1\" });\r\n            inhList.Add(new InheritTestDTO() { Id = 2, Name = \"Item2\", Boolean = true, Date = new DateTime(2011, 1, 15), dto = new TestDTO(), NameVar = \"Field 2\", InheritedProp = \"Inherited 2\" });\r\n            ws.Cells[\"A1\"].LoadFromCollection(inhList, true);\r\n            Assert.AreEqual(\"Inherited 2\", ws.Cells[3, 1].Value);\r\n\r\n            ws.Cells[\"A5\"].LoadFromCollection(inhList, true, TableStyles.None, BindingFlags.Public | BindingFlags.Instance, new MemberInfo[]{typeof(InheritTestDTO).GetProperty(\"InheritedProp\"), typeof(TestDTO).GetProperty(\"Name\") });\r\n            Assert.AreEqual(\"Inherited 2\", ws.Cells[7, 1].Value);\r\n\r\n        }\r\n        [TestMethod]\r\n        public void LoadFromEmptyCollectionTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"LoadFromEmptyCollection\");\r\n            List<TestDTO> listDTO = new List<TestDTO>(0);\r\n            //List<int> list = new List<int>(0);\r\n\r\n            ws.Cells[\"A1\"].LoadFromCollection(listDTO, true);\r\n            ws.Cells[\"A5\"].LoadFromCollection(listDTO, true, OfficeOpenXml.Table.TableStyles.Medium9, BindingFlags.Instance | BindingFlags.Instance, typeof(TestDTO).GetFields());\r\n\r\n            ws.Cells[\"A10\"].LoadFromCollection(listDTO, true, OfficeOpenXml.Table.TableStyles.Light1, BindingFlags.Instance | BindingFlags.Instance, new MemberInfo[] { typeof(TestDTO).GetMethod(\"GetNameID\"), typeof(TestDTO).GetField(\"NameVar\") });\r\n            ws.Cells[\"A15\"].LoadFromCollection(from l in listDTO where l.Boolean orderby l.Date select new { Name = l.Name, Id = l.Id, Date = l.Date, NameVariable = l.NameVar }, true, OfficeOpenXml.Table.TableStyles.Dark4);\r\n\r\n            ws.Cells[\"A20\"].LoadFromCollection(listDTO, false);\r\n        }\r\n        [TestMethod]\r\n        public void LoadFromOneCollectionTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"LoadFromOneCollection\");\r\n            List<TestDTO> listDTO = new List<TestDTO>(0) { new TestDTO() { Name = \"Single\" } };\r\n            //List<int> list = new List<int>(0);\r\n\r\n            var r = ws.Cells[\"A1\"].LoadFromCollection(listDTO, true);\r\n            Assert.AreEqual(2, r.Rows);\r\n            var r2 = ws.Cells[\"A5\"].LoadFromCollection(listDTO, false);\r\n            Assert.AreEqual(1, r2.Rows);\r\n        }\r\n        static void Create(string file)\r\n        {\r\n            ExcelPackage pack = new ExcelPackage(new FileInfo(file));\r\n            ExcelWorksheet w = pack.Workbook.Worksheets.Add(\"delete\");\r\n            w.Cells[1, 1].Value = \"test\";\r\n            w.Cells[1, 2].Value = \"test\";\r\n            w.Cells[2, 1].Value = \"to delete\";\r\n            w.Cells[2, 2].Value = \"to delete\";\r\n            w.Cells[3, 1].Value = \"3Left\";\r\n            w.Cells[3, 2].Value = \"3Left\";\r\n            w.Cells[4, 1].Formula = \"B3+C3\";\r\n            w.Cells[4, 2].Value = \"C3+D3\";\r\n            pack.Save();\r\n        }\r\n        [TestMethod]\r\n        public void HideTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Hidden\");\r\n            ws.Cells[\"A1\"].Value = \"This workbook is hidden\";\r\n            ws.Hidden = eWorkSheetHidden.Hidden;\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Hyperlink()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"HyperLinks\");\r\n            var hl = new ExcelHyperLink(\"G1\", \"Till G1\");\r\n            hl.ToolTip = \"Link to cell G1\";\r\n            ws.Cells[\"A1\"].Hyperlink = hl;\r\n            //ws.Cells[\"A2\"].Hyperlink = new ExcelHyperLink(\"mailto:ecsomany@google:huszar\", UriKind.Absolute); //Invalid URL will throw an Exception\r\n        }\r\n        [TestMethod]\r\n        public void VeryHideTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"VeryHidden\");\r\n            ws.Cells[\"a1\"].Value = \"This workbook is hidden\";\r\n            ws.Hidden = eWorkSheetHidden.VeryHidden;\r\n        }\r\n        [TestMethod]\r\n        public void PrinterSettings()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Sod/Hydroseed\");\r\n\r\n            ws.Cells[1, 1].Value = \"1; 1\";\r\n            ws.Cells[2, 1].Value = \"2; 1\";\r\n            ws.Cells[1, 2].Value = \"1; 2\";\r\n            ws.Cells[2, 2].Value = \"2; 2\";\r\n            ws.Cells[1, 1, 1, 2].AutoFilter = true;\r\n            ws.PrinterSettings.BlackAndWhite = true;\r\n            ws.PrinterSettings.ShowGridLines = true;\r\n            ws.PrinterSettings.ShowHeaders = true;\r\n            ws.PrinterSettings.PaperSize = ePaperSize.A4;\r\n\r\n            ws.PrinterSettings.RepeatRows = new ExcelAddress(\"1:1\");\r\n            ws.PrinterSettings.RepeatColumns = new ExcelAddress(\"A:A\");\r\n\r\n            ws.PrinterSettings.Draft = true;\r\n            var r = ws.Cells[\"A26\"];\r\n            r.Value = \"X\";\r\n            r.Worksheet.Row(26).PageBreak = true;\r\n            ws.PrinterSettings.PrintArea = ws.Cells[\"A1:B2\"];\r\n            ws.PrinterSettings.HorizontalCentered = true;\r\n            ws.PrinterSettings.VerticalCentered = true;\r\n\r\n            ws.Select(new ExcelAddress(\"3:4,E5:F6\"));\r\n        }\r\n        [TestMethod]\r\n        public void StyleNameTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"StyleNameTest\");\r\n\r\n            ws.Cells[1, 1].Value = \"R1 C1\";\r\n            ws.Cells[1, 2].Value = \"R1 C2\";\r\n            ws.Cells[1, 3].Value = \"R1 C3\";\r\n            ws.Cells[2, 1].Value = \"R2 C1\";\r\n            ws.Cells[2, 2].Value = \"R2 C2\";\r\n            ws.Cells[2, 3].Value = \"R2 C3\";\r\n            ws.Cells[3, 1].Value = double.PositiveInfinity;\r\n            ws.Cells[3, 2].Value = double.NegativeInfinity;\r\n            ws.Cells[4, 1].CreateArrayFormula(\"A1+B1\");\r\n            var ns = _pck.Workbook.Styles.CreateNamedStyle(\"TestStyle\");\r\n            ns.Style.Font.Bold = true;\r\n\r\n            ws.Cells.Style.Locked = true;\r\n            ws.Cells[\"A1:C1\"].StyleName = \"TestStyle\";\r\n            ws.DefaultRowHeight = 35;\r\n            ws.Cells[\"A1:C4\"].Style.Locked = false;\r\n            ws.Protection.IsProtected = true;\r\n        }\r\n        [TestMethod]\r\n        public void ValueError()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"ValueError\");\r\n\r\n            ws.Cells[1, 1].Value = \"Domestic Violence&#xB; and the Professional\";\r\n            var rt = ws.Cells[1, 2].RichText.Add(\"Domestic Violence&#xB; and the Professional 2\");\r\n            Console.WriteLine(rt.Bold.ToString());\r\n            rt.Bold = true;\r\n            Console.WriteLine(rt.Bold.ToString());\r\n        }   \r\n        [TestMethod]\r\n        public void FormulaError()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"FormulaError\");\r\n\r\n            ws.Cells[\"D5\"].Formula = \"COUNTIF(A1:A100,\\\"Miss\\\")\";\r\n            ws.Cells[\"A1:K3\"].Formula = \"A3+A4\";\r\n            ws.Cells[\"A4\"].FormulaR1C1 = \"+ROUNDUP(RC[1]/10,0)*10\";\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"Sheet-RC1\");\r\n            ws.Cells[\"A4\"].FormulaR1C1 = \"+ROUNDUP('Sheet-RC1'!RC[1]/10,0)*10\";\r\n\r\n            //ws.Cells[\"B2:I2\"].Formula = \"\";   //Error\r\n        }\r\n        [TestMethod]\r\n        public void FormulaArray()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"FormulaArray\");\r\n\r\n            ws.Cells[\"E2:E5\"].CreateArrayFormula(\"FREQUENCY(B2:B18,C2:C5)\");\r\n        }\r\n        [TestMethod]\r\n        public void PivotTableTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"PivotTable\");\r\n            ws.Cells[\"A1\"].LoadFromArrays(new object[][] { new[] { \"A&B\", \"B\\\"\", \"C'\", \"<D>\" } });\r\n            ws.Cells[\"A2\"].LoadFromArrays(new object[][]\r\n            {\r\n                new object [] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },\r\n                new object [] { 9, 8, 7 ,6, 5, 4, 3, 2, 1, 0 },\r\n                new object [] { 1, 1, 2, 3, 5, 8, 13, 21, 34, 55}\r\n            });\r\n            var table = ws.Tables.Add(ws.Cells[\"A1:D4\"], \"PivotData\");\r\n            var pt=ws.PivotTables.Add(ws.Cells[\"G20\"], ws.Cells[\"A1:D4\"], \"PivotTable1\");\r\n            pt.ColumnFields.Add(pt.Fields[1]);\r\n            pt.DataFields.Add(pt.Fields[3]);\r\n            Assert.AreEqual(\"PivotStyleMedium9\", ws.PivotTables[\"PivotTable1\"].StyleName);\r\n\r\n            _pck.Workbook.Worksheets.AddChart(\"PivotChartWorksheet\", eChartType.Line, pt);\r\n        }\r\n       [TestMethod]\r\n        public void TableTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Table\");\r\n            ws.Cells[\"B1\"].Value = 123;\r\n            var tbl = ws.Tables.Add(ws.Cells[\"B1:P12\"], \"TestTable\");\r\n            tbl.TableStyle = OfficeOpenXml.Table.TableStyles.Custom;\r\n\r\n            tbl.ShowFirstColumn = true;\r\n            tbl.ShowTotal = true;\r\n            tbl.ShowHeader = true;\r\n            tbl.ShowLastColumn = true;\r\n            tbl.ShowFilter = false;\r\n            Assert.AreEqual(tbl.ShowFilter, false);\r\n            ws.Cells[\"K2\"].Value = 5;\r\n            ws.Cells[\"J3\"].Value = 4;\r\n\r\n            tbl.Columns[8].TotalsRowFunction = OfficeOpenXml.Table.RowFunctions.Sum;\r\n            tbl.Columns[9].TotalsRowFormula = string.Format(\"SUM([{0}])\", tbl.Columns[9].Name);\r\n            tbl.Columns[14].CalculatedColumnFormula = \"TestTable[[#This Row],[123]]+TestTable[[#This Row],[Column2]]\";\r\n            ws.Cells[\"B2\"].Value = 1;\r\n            ws.Cells[\"B3\"].Value = 2;\r\n            ws.Cells[\"B4\"].Value = 3;\r\n            ws.Cells[\"B5\"].Value = 4;\r\n            ws.Cells[\"B6\"].Value = 5;\r\n            ws.Cells[\"B7\"].Value = 6;\r\n            ws.Cells[\"B8\"].Value = 7;\r\n            ws.Cells[\"B9\"].Value = 8;\r\n            ws.Cells[\"B10\"].Value = 9;\r\n            ws.Cells[\"B11\"].Value = 10;\r\n            ws.Cells[\"B12\"].Value = 11;\r\n            ws.Cells[\"C7\"].Value = \"Table test\";\r\n            ws.Cells[\"C8\"].Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n            ws.Cells[\"C8\"].Style.Fill.BackgroundColor.SetColor(Color.Red);\r\n\r\n            tbl = ws.Tables.Add(ws.Cells[\"a12:a13\"], \"\");\r\n\r\n            tbl = ws.Tables.Add(ws.Cells[\"C16:Y35\"], \"\");\r\n            tbl.TableStyle = OfficeOpenXml.Table.TableStyles.Medium14;\r\n            tbl.ShowFirstColumn = true;\r\n            tbl.ShowLastColumn = true;\r\n            tbl.ShowColumnStripes = true;\r\n            Assert.AreEqual(tbl.ShowFilter, true);\r\n            tbl.Columns[2].Name = \"Test Column Name\";\r\n\r\n            ws.Cells[\"G50\"].Value = \"Timespan\";\r\n            ws.Cells[\"G51\"].Value = new DateTime(new TimeSpan(1, 1, 10).Ticks); //new DateTime(1899, 12, 30, 1, 1, 10);\r\n            ws.Cells[\"G52\"].Value = new DateTime(1899, 12, 30, 2, 3, 10);\r\n            ws.Cells[\"G53\"].Value = new DateTime(1899, 12, 30, 3, 4, 10);\r\n            ws.Cells[\"G54\"].Value = new DateTime(1899, 12, 30, 4, 5, 10);\r\n\r\n            ws.Cells[\"G51:G55\"].Style.Numberformat.Format = \"HH:MM:SS\";\r\n            tbl = ws.Tables.Add(ws.Cells[\"G50:G54\"], \"\");\r\n            tbl.ShowTotal = true;\r\n            tbl.ShowFilter = false;\r\n            tbl.Columns[0].TotalsRowFunction = OfficeOpenXml.Table.RowFunctions.Sum;\r\n        }\r\n        [TestMethod]\r\n        public void CopyTable()\r\n        {\r\n            using (var pck = OpenPackage(\"WorksheetRead.xlsx\"))\r\n            {\r\n                TryGetWorksheet(pck, \"File4\");\r\n                pck.Workbook.Worksheets.Copy(\"File4\", \"Copied table\");\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CopyRange()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CopyTest\");\r\n\r\n            ws.Cells[\"A1\"].Value = \"Single Cell\";\r\n            ws.Cells[\"A2\"].Value = \"Merged Cells\";\r\n            ws.Cells[\"A2:D30\"].Merge = true;\r\n            ws.Cells[\"A1\"].Style.Font.Bold = true;\r\n            ws.Cells[\"G4:H5\"].Merge = true;\r\n            ws.Cells[\"B3:C5\"].Copy(ws.Cells[\"G4\"]);\r\n        }\r\n        [TestMethod]\r\n        public void CopyMergedRange()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CopyMergedRangeTest\");\r\n\r\n            ws.Cells[\"A11:C11\"].Merge = true;\r\n            ws.Cells[\"A12:C12\"].Merge = true;\r\n\r\n            var source = ws.Cells[\"A11:C12\"];\r\n            var target = ws.Cells[\"A21\"];\r\n\r\n            source.Copy(target);\r\n\r\n            var a21 = ws.Cells[21, 1];\r\n            var a22 = ws.Cells[22, 1];\r\n\r\n            Assert.IsTrue(a21.Merge);\r\n            Assert.IsTrue(a22.Merge);\r\n\r\n            //Assert.AreNotEqual(a21.MergeId, a22.MergeId);\r\n        }\r\n        [TestMethod]\r\n        public void CopyPivotTable()\r\n        {\r\n            using (var pck = OpenPackage(\"worksheetRead.xlsx\"))\r\n            {\r\n                var ws = TryGetWorksheet(pck, \"Pivot-Group Date\");\r\n                pck.Workbook.Worksheets.Copy(\"Pivot-Group Date\", \"Copied Pivottable 1\");\r\n                ws = TryGetWorksheet(pck, \"Pivot-Group Number\");\r\n                pck.Workbook.Worksheets.Copy(\"Pivot-Group Number\", \"Copied Pivottable 2\");\r\n\r\n                SaveWorkbook(\"WorksheetCopyPivot.xlsx\", pck);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void FormulaOverwrite()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"FormulaOverwrite\");\r\n            //Inside\r\n            ws.Cells[\"A1:G12\"].Formula = \"B1+C1\";\r\n            ws.Cells[\"B2:C3\"].Formula = \"G2+E1\";\r\n\r\n\r\n            //Top bottom overwrite\r\n            ws.Cells[\"A14:G26\"].Formula = \"B1+C1+D1\";\r\n            ws.Cells[\"B13:C28\"].Formula = \"G2+E1\";\r\n\r\n            //Top bottom overwrite\r\n            ws.Cells[\"B30:E42\"].Formula = \"B1+C1+$D$1\";\r\n            ws.Cells[\"A32:H33\"].Formula = \"G2+E1\";\r\n\r\n            ws.Cells[\"A50:A59\"].CreateArrayFormula(\"C50+D50\");\r\n            ws.Cells[\"A1\"].Value = \"test\";\r\n            ws.Cells[\"A15\"].Value = \"V\u00e4rde\";\r\n            ws.Cells[\"C12\"].AddComment(\"Test\", \"JJOD\");\r\n            ws.Cells[\"D12:I12\"].Merge = true;\r\n            ws.Cells[\"D12:I12\"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;\r\n            ws.Cells[\"D12:I12\"].Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Top;\r\n            ws.Cells[\"D12:I12\"].Style.WrapText = true;\r\n\r\n            ws.Cells[\"F1:F3\"].Formula = \"F2+F3\";\r\n            ws.Cells[\"J1:J3\"].Formula = \"F2+F3\";\r\n            ws.Cells[\"F1:F3\"].Formula = \"F5+F6\";    //Overwrite same range\r\n        }\r\n        [TestMethod]\r\n        public void DefinedName()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Names\");\r\n            ws.Names.Add(\"RefError\", ws.Cells[\"#REF!\"]);\r\n\r\n            ws.Cells[\"A1\"].Value = \"Test\";\r\n            ws.Cells[\"A1\"].Style.Font.Size = 8.5F;\r\n\r\n            ws.Names.Add(\"Address\", ws.Cells[\"A2:A3\"]);\r\n            ws.Cells[\"Address\"].Value = 1;\r\n            ws.Names.AddValue(\"Value\", 5);\r\n            ws.Names.Add(\"FullRow\", ws.Cells[\"2:2\"]);\r\n            ws.Names.Add(\"FullCol\", ws.Cells[\"A:A\"]);\r\n\r\n            ws.Names.AddFormula(\"Formula\", \"Names!A2+Names!A3+Names!Value\");\r\n        }\r\n        [TestMethod]\r\n        public void LoadDataReader()\r\n        {\r\n            if (_pck == null) _pck = new ExcelPackage();\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Loaded DataReader\");\r\n            ExcelRangeBase range;\r\n            using (var dt = GetDataTable())\r\n            {\r\n                using (var reader = dt.CreateDataReader())\r\n                {\r\n                    range = ws.Cells[\"A1\"].LoadFromDataReader(reader, true, \"My_Table\", TableStyles.Medium5);\r\n                }\r\n                Assert.AreEqual(1, range.Start.Column);\r\n                Assert.AreEqual(4, range.End.Column);\r\n                Assert.AreEqual(1, range.Start.Row);\r\n                Assert.AreEqual(3, range.End.Row);\r\n\r\n                using (var reader = dt.CreateDataReader())\r\n                {\r\n                    range = ws.Cells[\"A5\"].LoadFromDataReader(reader, false, \"My_Table2\", TableStyles.Medium5);\r\n                }\r\n            }\r\n            Assert.AreEqual(1, range.Start.Column);\r\n            Assert.AreEqual(4, range.End.Column);\r\n            Assert.AreEqual(5, range.Start.Row);\r\n            Assert.AreEqual(6, range.End.Row);\r\n        }\r\n        [TestMethod]\r\n        public async Task LoadDataReaderAsync()\r\n        {\r\n            if (_pck == null) _pck = new ExcelPackage();\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Loaded DataReader Async\");\r\n            ExcelRangeBase range;\r\n            using (var dt = GetDataTable())\r\n            {\r\n                using (var reader = dt.CreateDataReader())\r\n                {\r\n                    range = await ws.Cells[\"A1\"].LoadFromDataReaderAsync(reader, true, \"My_Table_Async\", TableStyles.Medium5).ConfigureAwait(false);\r\n                }\r\n                Assert.AreEqual(1, range.Start.Column);\r\n                Assert.AreEqual(4, range.End.Column);\r\n                Assert.AreEqual(1, range.Start.Row);\r\n                Assert.AreEqual(3, range.End.Row);\r\n\r\n                using (var reader = dt.CreateDataReader())\r\n                {\r\n                    range = await ws.Cells[\"A5\"].LoadFromDataReaderAsync(reader, false, \"My_Table_Async2\", TableStyles.Medium5).ConfigureAwait(false);\r\n                }\r\n            }\r\n            Assert.AreEqual(1, range.Start.Column);\r\n            Assert.AreEqual(4, range.End.Column);\r\n            Assert.AreEqual(5, range.Start.Row);\r\n            Assert.AreEqual(6, range.End.Row);\r\n        }\r\n        private static DataTable GetDataTable()\r\n        {\r\n            var dt = new DataTable();\r\n            dt.Columns.Add(\"String\", typeof(string));\r\n            dt.Columns.Add(\"Int\", typeof(int));\r\n            dt.Columns.Add(\"Bool\", typeof(bool));\r\n            dt.Columns.Add(\"Double\", typeof(double));\r\n\r\n            var dr = dt.NewRow();\r\n            dr[0] = \"Row1\";\r\n            dr[1] = 1;\r\n            dr[2] = true;\r\n            dr[3] = 1.5;\r\n            dt.Rows.Add(dr);\r\n\r\n            dr = dt.NewRow();\r\n            dr[0] = \"Row2\";\r\n            dr[1] = 2;\r\n            dr[2] = false;\r\n            dr[3] = 2.25;\r\n            dt.Rows.Add(dr);\r\n            return dt;\r\n        }\r\n    \r\n        [TestMethod]\r\n        public void LoadDataTable()\r\n        {\r\n            if (_pck == null) _pck = new ExcelPackage();\r\n            _pck.Workbook.Properties.Title = $\"from {DateTime.Today.AddDays(-7):D} to {DateTime.Today:D}\";\r\n            _pck.Workbook.Properties.Author = \"Jan K\u00e4llman\";\r\n            _pck.Workbook.Properties.Company = \"EPPlus software\";\r\n\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Loaded DataTable\");\r\n            var dt = new DataTable();\r\n            dt.Columns.Add(\"String\", typeof(string));\r\n            dt.Columns.Add(\"Int\", typeof(int));\r\n            dt.Columns.Add(\"Bool\", typeof(bool));\r\n            dt.Columns.Add(\"Double\", typeof(double));\r\n\r\n\r\n            var dr = dt.NewRow();\r\n            dr[0] = \"Row1\";\r\n            dr[1] = 1;\r\n            dr[2] = true;\r\n            dr[3] = 1.5;\r\n            dt.Rows.Add(dr);\r\n\r\n            dr = dt.NewRow();\r\n            dr[0] = \"Row2\";\r\n            dr[1] = 2;\r\n            dr[2] = false;\r\n            dr[3] = 2.25;\r\n            dt.Rows.Add(dr);\r\n\r\n            dr = dt.NewRow();\r\n            dr[0] = \"Row3\";\r\n            dr[1] = 3;\r\n            dr[2] = true;\r\n            dr[3] = 3.125;\r\n            dt.Rows.Add(dr);\r\n\r\n            var range = ws.Cells[\"A1\"].LoadFromDataTable(dt, true, OfficeOpenXml.Table.TableStyles.Medium5);\r\n            range.AutoFilter = true;\r\n            ws.Tables[0].Columns[1].TotalsRowFunction = OfficeOpenXml.Table.RowFunctions.Sum;\r\n            ws.Tables[0].ShowTotal = true;\r\n\r\n            Assert.AreEqual(\"A1:D4\", range.Address);\r\n            Assert.AreEqual(\"String\", ws.Cells[\"A1\"].Value);\r\n            Assert.AreEqual(\"Double\", ws.Cells[\"D1\"].Value);\r\n            Assert.AreEqual(\"Row3\", ws.Cells[\"A4\"].Value);\r\n            Assert.AreEqual(3.125, ws.Cells[\"D4\"].Value);\r\n        }\r\n        [TestMethod]\r\n        public void LoadEmptyDataTable()\r\n        {\r\n            if (_pck == null) _pck = new ExcelPackage();\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Loaded Empty DataTable\");\r\n\r\n            var dt = new DataTable();\r\n            dt.Columns.Add(new DataColumn(\"col1\"));\r\n            dt.Columns.Add(new DataColumn(\"col2\"));\r\n            var range = ws.Cells[\"A1\"].LoadFromDataTable(dt, true);\r\n            Assert.AreEqual(\"A1:B1\", range.Address);\r\n            range = ws.Cells[\"D1\"].LoadFromDataTable(dt, false);\r\n            Assert.IsNull(range);\r\n        }\r\n        [TestMethod]\r\n        public void LoadText_Bug15015()\r\n        {\r\n            var package = new ExcelPackage();\r\n            var ws = package.Workbook.Worksheets.Add(\"Loaded Text\");\r\n            ws.Cells[\"A1\"].LoadFromText(\"\\\"text with eol,\\r\\n in a cell\\\",\\\"other value\\\"\", new ExcelTextFormat { TextQualifier = '\"', EOL = \",\\r\\n\", Delimiter = ',' });\r\n        }\r\n\r\n        [TestMethod]\r\n        public void LoadText_Bug15015_Negative()\r\n        {\r\n            var package = new ExcelPackage();\r\n            var ws = package.Workbook.Worksheets.Add(\"Loaded Text\");\r\n            bool exceptionThrown = false;\r\n            try\r\n            {\r\n                ws.Cells[\"A1\"].LoadFromText(\"\\\"text with eol,\\r\\n\",\r\n                                            new ExcelTextFormat { TextQualifier = '\"', EOL = \",\\r\\n\", Delimiter = ',' });\r\n            }\r\n            catch //(Exception e)\r\n            {\r\n                //Assert.AreEqual(\"Text delimiter is not closed in line : \\\"text with eol\", e.Message, \"Exception message\");\r\n                exceptionThrown = true;\r\n            }\r\n            Assert.IsTrue(exceptionThrown, \"Exception thrown\");\r\n        }\r\n\r\n        [TestMethod]\r\n        public void LoadText()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Loaded Text\");\r\n\r\n            ws.Cells[\"A1\"].LoadFromText(\"1.2\");\r\n            ws.Cells[\"A2\"].LoadFromText(\"1,\\\"Test av data\\\",\\\"12,2\\\",\\\"\\\"Test\\\"\\\"\");\r\n            ws.Cells[\"A3\"].LoadFromText(\"\\\"1,3\\\",\\\"Test av \\\"\\\"data\\\",\\\"12,2\\\",\\\"Test\\\"\\\"\\\"\", new ExcelTextFormat() { TextQualifier = '\"' });\r\n            ws.Cells[\"A4\"].LoadFromText(\"\\\"1,3\\\",\\\"\\\",\\\"12,2\\\",\\\"Test\\\"\\\"\\\"\", new ExcelTextFormat() { TextQualifier = '\"' });\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"File1\");\r\n            if(File.Exists(@\"c:\\temp\\csv\\et1c1004.csv\"))\r\n                ws.Cells[\"A1\"].LoadFromText(new FileInfo(@\"c:\\temp\\csv\\et1c1004.csv\"), new ExcelTextFormat() {SkipLinesBeginning=3,SkipLinesEnd=1, EOL=\"\\n\"});\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"File2\");\r\n            if (File.Exists(@\"c:\\temp\\csv\\etiv2812.csv\"))\r\n                ws.Cells[\"A1\"].LoadFromText(new FileInfo(@\"c:\\temp\\csv\\etiv2812.csv\"), new ExcelTextFormat() { SkipLinesBeginning = 3, SkipLinesEnd = 1, EOL = \"\\n\" });\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"File3\");\r\n            if (File.Exists(@\"c:\\temp\\csv\\last_gics.txt\"))\r\n                ws.Cells[\"A1\"].LoadFromText(new FileInfo(@\"c:\\temp\\csv\\last_gics.txt\"), new ExcelTextFormat() { SkipLinesBeginning = 1, Delimiter='|'});\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"File4\");\r\n\r\n            ws.Cells[\"A1\"].LoadFromText(\"1,\\\"Test\\\",\\\"\\\",\\\"\\\"\\\"\\\",3\\r\\n\", new ExcelTextFormat() { TextQualifier = '\\\"' });\r\n\r\n            var style = _pck.Workbook.Styles.CreateNamedStyle(\"RedStyle\");\r\n            style.Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n            style.Style.Fill.BackgroundColor.SetColor(Color.Red);\r\n        }\r\n        [TestMethod]\r\n        public void TestRepeatRowsAndColumnsTest()\r\n        {\r\n            var p = new ExcelPackage();\r\n\r\n            var w = p.Workbook.Worksheets.Add(\"RepeatRowsAndColumnsTest\");\r\n\r\n            w.PrinterSettings.RepeatColumns = new ExcelAddress(\"A:A\");\r\n            w.PrinterSettings.RepeatRows = new ExcelAddress(\"1:1\");\r\n\r\n            Assert.IsNotNull(w.PrinterSettings.RepeatColumns);\r\n            Assert.IsNotNull(w.PrinterSettings.RepeatRows); // Fails!\r\n        }\r\n        [TestMethod]\r\n        public void Merge()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Merge\");\r\n            ws.Cells[\"A1:A4\"].Merge = true;\r\n            ws.Cells[\"C1:C4,C8:C12\"].Merge = true;\r\n            ws.Cells[\"D13:E18,G5,U32:U45\"].Merge = true;\r\n            ws.Cells[\"D13:E18,G5,U32:U45\"].Style.WrapText = true;\r\n            //ws.Cells[\"50:52\"].Merge = true;\r\n            ws.Cells[\"AA:AC\"].Merge = true;\r\n            ws.SetValue(13, 4, \"Merged\\r\\nnew row\");\r\n        }\r\n        [TestMethod]\r\n        public void DefaultColWidth()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DefColWidth\");\r\n            ws.DefaultColWidth = 45;\r\n        }\r\n        [TestMethod]\r\n        public void LoadArray()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Loaded Array\");\r\n            List<object[]> testArray = new List<object[]>() { new object[] { 3, 4, 5 }, new string[] { \"Test1\", \"test\", \"5\", \"6\" } };\r\n            var range = ws.Cells[\"A1\"].LoadFromArrays(testArray);\r\n            Assert.AreEqual(\"A1:D2\", range.Address);\r\n        }\r\n        [TestMethod]\r\n        public void SetBackground()\r\n        {\r\n            var pck = new ExcelPackage();\r\n            var ws = pck.Workbook.Worksheets.Add(\"backimg\");\r\n\r\n            ws.BackgroundImage.Image = Properties.Resources.Test1;\r\n            ws = pck.Workbook.Worksheets.Add(\"backimg2\");\r\n            var fi = new FileInfo(Path.Combine(_clipartPath, \"Vector Drawing.wmf\"));\r\n            if (fi.Exists)\r\n            {\r\n                ws.BackgroundImage.SetFromFile(fi);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SetHeaderFooterImage()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"HeaderImage\");\r\n            ws.HeaderFooter.OddHeader.CenteredText = \"Before \";\r\n            var img = ws.HeaderFooter.OddHeader.InsertPicture(Properties.Resources.Test1, PictureAlignment.Centered);\r\n            img.Title = \"Renamed Image\";\r\n            //img.GrayScale = true;\r\n            //img.BiLevel = true;\r\n            //img.Gain = .5;\r\n            //img.Gamma = .35;\r\n\r\n            Assert.AreEqual(img.Width, 426);\r\n            img.Width /= 4;\r\n            Assert.AreEqual(img.Height, 49.5);\r\n            img.Height /= 4;\r\n            Assert.AreEqual(img.Left, 0);\r\n            Assert.AreEqual(img.Top, 0);\r\n            ws.HeaderFooter.OddHeader.CenteredText += \" After\";\r\n\r\n\r\n            //img = ws.HeaderFooter.EvenFooter.InsertPicture(new FileInfo(Path.Combine(_clipartPath,\"Vector Drawing.wmf\")), PictureAlignment.Left);\r\n            //img.Title = \"DiskFile\";\r\n\r\n            //img = ws.HeaderFooter.FirstHeader.InsertPicture(new FileInfo(Path.Combine(_clipartPath, \"Vector Drawing2.WMF\")), PictureAlignment.Right);\r\n            //img.Title = \"DiskFile2\";\r\n            ws.Cells[\"A1:A400\"].Value = 1;\r\n\r\n            _pck.Workbook.Worksheets.Copy(ws.Name, \"Copied HeaderImage\");\r\n        }\r\n        [TestMethod]\r\n        public void NamedStyles()\r\n        {\r\n            var wsSheet = _pck.Workbook.Worksheets.Add(\"NamedStyles\");\r\n\r\n            var firstNamedStyle =\r\n                _pck.Workbook.Styles.CreateNamedStyle(\"templateFirst\");\r\n\r\n            var s = firstNamedStyle.Style;\r\n\r\n            s.Fill.PatternType = ExcelFillStyle.Solid;\r\n            s.Fill.BackgroundColor.SetColor(Color.LightGreen);\r\n            s.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;\r\n            s.VerticalAlignment = ExcelVerticalAlignment.Center;\r\n\r\n            var secondNamedStyle = _pck.Workbook.Styles.CreateNamedStyle(\"first\", firstNamedStyle.Style).Style;\r\n            secondNamedStyle.Font.Bold = true;\r\n            secondNamedStyle.Font.SetFromFont(new Font(\"Arial Black\", 8));\r\n            secondNamedStyle.Border.Bottom.Style = ExcelBorderStyle.Medium;\r\n            secondNamedStyle.Border.Left.Style = ExcelBorderStyle.Medium;\r\n\r\n            wsSheet.Cells[\"B2\"].Value = \"Text Center\";\r\n            wsSheet.Cells[\"B2\"].StyleName = \"first\";\r\n            _pck.Workbook.Styles.NamedStyles[0].Style.Font.Name = \"Arial\";\r\n\r\n            var rowStyle = _pck.Workbook.Styles.CreateNamedStyle(\"RowStyle\", firstNamedStyle.Style).Style;\r\n            rowStyle.Fill.BackgroundColor.SetColor(Color.Pink);\r\n            wsSheet.Cells.StyleName = \"templateFirst\";\r\n            wsSheet.Cells[\"C5:H15\"].Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n            wsSheet.Cells[\"C5:H15\"].Style.Fill.BackgroundColor.SetColor(Color.OrangeRed);\r\n\r\n            wsSheet.Cells[\"30:35\"].StyleName = \"RowStyle\";\r\n            var colStyle = _pck.Workbook.Styles.CreateNamedStyle(\"columnStyle\", firstNamedStyle.Style).Style;\r\n            colStyle.Fill.BackgroundColor.SetColor(Color.CadetBlue);\r\n\r\n            wsSheet.Cells[\"D:E\"].StyleName = \"ColumnStyle\";\r\n\r\n            //Verify that cloned styles works.\r\n            var defaultStyle = _pck.Workbook.Styles.CreateNamedStyle(\"Default\");\r\n            defaultStyle.Style.Font.Name = \"Arial\";\r\n            defaultStyle.Style.Font.Size = 18;\r\n            defaultStyle.Style.Font.UnderLine = true;\r\n            var boldStyle = _pck.Workbook.Styles.CreateNamedStyle(\"Bold\", defaultStyle.Style);\r\n            boldStyle.Style.Font.Color.SetColor(Color.Red);\r\n\r\n            Assert.AreEqual(\"Arial\", defaultStyle.Style.Font.Name);\r\n            Assert.AreEqual(18, defaultStyle.Style.Font.Size);\r\n\r\n            Assert.AreEqual(boldStyle.Style.Font.Color.Rgb, \"FFFF0000\");\r\n\r\n        }\r\n        [TestMethod]\r\n        public void StyleFill()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Fills\");\r\n            ws.Cells[\"A1:C3\"].Style.Fill.Gradient.Type = ExcelFillGradientType.Linear;\r\n            ws.Cells[\"A1:C3\"].Style.Fill.Gradient.Color1.SetColor(Color.Red);\r\n            ws.Cells[\"A1:C3\"].Style.Fill.Gradient.Color2.SetColor(Color.Blue);\r\n\r\n            ws.Cells[\"J20:J23\"].Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n            ws.Cells[\"J20:J23\"].Style.Fill.BackgroundColor.SetColor(0xFF,0x00,0XFF,0x00); //Green\r\n\r\n            ws.Cells[\"A1\"].Style.Fill.PatternType = ExcelFillStyle.MediumGray;\r\n            ws.Cells[\"A1\"].Style.Fill.BackgroundColor.SetColor(Color.ForestGreen);\r\n            var r = ws.Cells[\"A2:A3\"];\r\n            r.Style.Fill.Gradient.Type = ExcelFillGradientType.Path;\r\n            r.Style.Fill.Gradient.Left = 0.7;\r\n            r.Style.Fill.Gradient.Right = 0.7;\r\n            r.Style.Fill.Gradient.Top = 0.7;\r\n            r.Style.Fill.Gradient.Bottom = 0.7;\r\n\r\n            ws.Cells[4, 1, 4, 360].Style.Fill.Gradient.Type = ExcelFillGradientType.Path;\r\n\r\n            for (double col = 1; col < 360; col++)\r\n            {\r\n                r = ws.Cells[4, Convert.ToInt32(col)];\r\n                r.Style.Fill.Gradient.Degree = col;\r\n                r.Style.Fill.Gradient.Left = col / 360;\r\n                r.Style.Fill.Gradient.Right = col / 360;\r\n                r.Style.Fill.Gradient.Top = col / 360;\r\n                r.Style.Fill.Gradient.Bottom = col / 360;\r\n            }\r\n            r = ws.Cells[\"A5\"];\r\n            r.Style.Fill.Gradient.Left = .50;\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"FullFills\");\r\n            ws.Cells.Style.Fill.Gradient.Left = 0.25;\r\n            ws.Cells[\"A1\"].Value = \"test\";\r\n            ws.Cells[\"A1\"].RichText.Add(\"Test rt\");\r\n            ws.Cells.AutoFilter = true;\r\n            Assert.AreNotEqual(ws.Cells[\"A1:D5\"].Value, null);\r\n        }\r\n        [TestMethod, Ignore]\r\n        public void BuildInStyles()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Default\");\r\n            ws.Cells.Style.Font.Name = \"Arial\";\r\n            ws.Cells.Style.Font.Size = 15;\r\n            ws.Cells.Style.Border.Bottom.Style = ExcelBorderStyle.MediumDashed;\r\n            var n = _pck.Workbook.Styles.NamedStyles[0];\r\n            n.Style.Numberformat.Format = \"yyyy\";\r\n            n.Style.Font.Name = \"Arial\";\r\n            n.Style.Font.Size = 15;\r\n            n.Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;\r\n            n.Style.Border.Bottom.Color.SetColor(Color.Red);\r\n            n.Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n            n.Style.Fill.BackgroundColor.SetColor(Color.Blue);\r\n            n.Style.Border.Bottom.Color.SetColor(Color.Red);\r\n            n.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;\r\n            n.Style.VerticalAlignment = ExcelVerticalAlignment.Center;\r\n            n.Style.TextRotation = 90;\r\n            ws.Cells[\"a1:c3\"].StyleName = \"Normal\";\r\n            //  n.CustomBuildin = true;\r\n        }\r\n        [TestMethod]\r\n        public void AutoFitColumns()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Autofit\");\r\n            ws.Cells[\"A1:H1\"].Value = \"Auto fit column that is veeery long...\";\r\n            ws.Cells[\"B1\"].Style.TextRotation = 30;\r\n            ws.Cells[\"C1\"].Style.TextRotation = 45;\r\n            ws.Cells[\"D1\"].Style.TextRotation = 75;\r\n            ws.Cells[\"E1\"].Style.TextRotation = 90;\r\n            ws.Cells[\"F1\"].Style.TextRotation = 120;\r\n            ws.Cells[\"G1\"].Style.TextRotation = 135;\r\n            ws.Cells[\"H1\"].Style.TextRotation = 180;\r\n            ws.Cells[\"A1:H1\"].AutoFitColumns(0);\r\n\r\n            ws.Column(40).AutoFit();\r\n        }\r\n        [TestMethod]\r\n        public void CopyOverwrite()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CopyOverwrite\");\r\n\r\n            for (int col = 1; col < 15; col++)\r\n            {\r\n                for (int row = 1; row < 30; row++)\r\n                {\r\n                    ws.SetValue(row, col, \"cell \" + ExcelAddressBase.GetAddress(row, col));\r\n                }\r\n            }\r\n            ws.Cells[\"A1:P30\"].Copy(ws.Cells[\"B1\"]);\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        public void ExcelWorksheetRenameWithStartApostropheThrowsException()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var sheet1 = package.Workbook.Worksheets.Add(\"Sheet1\");\r\n                sheet1.Name = \"'New Name\";\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        public void ExcelWorksheetRenameWithEndApostropheThrowsException()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var sheet1 = package.Workbook.Worksheets.Add(\"Sheet1\");\r\n                sheet1.Name = \"New Name'\";\r\n                package.SaveAs(new FileInfo(\"c:\\\\epplustest\\\\ap.xlsx\"));\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Text()\r\n        {\r\n            using (ExcelPackage p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"A1\"].Value = new DateTime(2018, 2, 3);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"d\";\r\n                Assert.AreEqual(\"3\", ws.Cells[\"A1\"].Text);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"D\";\r\n                Assert.AreEqual(\"3\", ws.Cells[\"A1\"].Text);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"M\";\r\n                Assert.AreEqual(\"2\", ws.Cells[\"A1\"].Text);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"Y\";\r\n                Assert.AreEqual(\"18\", ws.Cells[\"A1\"].Text);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"YY\";\r\n                Assert.AreEqual(\"18\", ws.Cells[\"A1\"].Text);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"YYY\";\r\n                Assert.AreEqual(\"2018\", ws.Cells[\"A1\"].Text);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CopyWorkSheetWithInsertInSharedFormula()\r\n        {\r\n            using (ExcelPackage package = new ExcelPackage())\r\n            {\r\n                var sheet1 = package.Workbook.Worksheets.Add(\"Sheet1\");\r\n                // Creates a shared formula.\r\n                sheet1.Cells[\"C1:C5\"].Formula = \"SUM(A1:B1)\";\r\n                var sheet2 = package.Workbook.Worksheets.Copy(sheet1.Name, \"Sheet2\");\r\n                sheet1.InsertColumn(2, 1);\r\n                // Inserting a column on sheet1 should modify the shared formula on sheet1, but not sheet2.\r\n                Assert.AreEqual(\"SUM(A1:C1)\", sheet1.Cells[\"D1\"].Formula);\r\n                Assert.AreEqual(\"SUM(A1:B1)\", sheet2.Cells[\"C1\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Sort()\r\n        {            \r\n            using (var package = OpenPackage(\"Sort.xlsx\", true))\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"Sorting\");\r\n                AddSortingData(ws,1,1);\r\n                ws.Cells[\"A:C\"].Sort(2, true);\r\n                ws.Cells[\"A:C\"].Sort(new int[] { 2,1 }, new bool[] { true, false });\r\n\r\n                AddSortingData(ws, 1, 5);\r\n                ws.Cells[\"H1:H1000\"].Formula = \"E1*2\";\r\n                ws.Calculate();\r\n\r\n                ws.Cells[\"E1:H1000\"].Sort(3);\r\n\r\n                ws.Cells[\"I5\"].Value = 8;\r\n                ws.Cells[\"I6\"].Value = 1;\r\n                ws.Cells[\"I7\"].Value = \"12\";\r\n                ws.Cells[\"I8\"].Value = \"Test\";\r\n                ws.Cells[\"I9\"].Value = \"aa\";\r\n                ws.Cells[\"I7\"].AddComment(\"Comment\", \"Jan\");\r\n\r\n\r\n                ws.Cells[\"I:I\"].Sort(0,true);\r\n                package.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ShowGridlines()\r\n        {\r\n            using (var p = OpenPackage(\"ShowGridlines.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"sort\");\r\n                Assert.IsTrue(ws.View.ShowGridLines);   //Default true\r\n                ws.View.ShowGridLines = false;\r\n                Assert.IsFalse(ws.View.ShowGridLines);\r\n                ws.View.ShowGridLines = true;\r\n                Assert.IsTrue(ws.View.ShowGridLines);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SheetProtection()\r\n        {\r\n            using (var p = OpenPackage(\"SheetProtection.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheetprotection\");\r\n\r\n                ws.View.ShowHeaders = false;\r\n                ws.Protection.AllowSelectLockedCells = false;\r\n                ws.Protection.AllowInsertColumns = false;\r\n                ws.Protection.AllowInsertRows = false;\r\n                ws.Protection.AllowDeleteColumns = false;\r\n                ws.Protection.AllowDeleteRows = false;\r\n                ws.Protection.AllowSort = false;\r\n                ws.Protection.AllowEditObject = false;\r\n                ws.Protection.AllowFormatCells = false;\r\n                ws.Protection.AllowInsertHyperlinks = false;\r\n                ws.Protection.AllowFormatCells = false;\r\n                ws.Protection.AllowFormatColumns = false;\r\n                ws.Protection.AllowFormatRows = false;\r\n                ws.Protection.AllowAutoFilter = false;\r\n                ws.Protection.AllowPivotTables = false;\r\n                ws.Cells[\"A3:D4\"].AutoFitColumns();\r\n\r\n                var drawing = ws.Drawings.AddShape(\"Note\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n                drawing.SetPosition(9, 0, 2, 0);\r\n                drawing.SetSize(500, 200);\r\n                drawing.Text = \"This is a note\";\r\n\r\n                ws.Protection.SetPassword(\"A4A71A39-12DF-4F7A-BD4A-CCA4AABCC159\");\r\n                //ws.Protection.SetPassword(\"ddd\");\r\n\r\n                p.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void IgnoreErrors()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"IgnoreError\");\r\n            ws.Cells[\"A1\"].Value = \"1\";\r\n            ws.Cells[\"C3\"].Value = \"5\";\r\n            ws.Cells[\"F6\"].Value = \"7\";\r\n            var ie = ws.IgnoredErrors.Add(ws.Cells[\"A1\"]);\r\n            var ie2 = ws.IgnoredErrors.Add(ws.Cells[\"A1:C3,D6:F7\"]);\r\n            ie.NumberStoredAsText = true;\r\n            ie2.NumberStoredAsText = true;\r\n\r\n            _pck.Save();\r\n        }\r\n        [TestMethod]\r\n        public void RepeateRowColumns()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"RepeatRowCols\");\r\n            ws.PrinterSettings.RepeatRows = new ExcelAddress(\"1:1\");\r\n            ws.PrinterSettings.RepeatColumns = new ExcelAddress(\"B:C\");\r\n            Assert.AreEqual(\"B:C\", ws.PrinterSettings.RepeatColumns.Address);\r\n            Assert.AreEqual(\"1:1\", ws.PrinterSettings.RepeatRows.Address);\r\n            Assert.AreEqual(\"B:C,1:1\", ws.Names[\"_xlnm.Print_Titles\"].Address);\r\n        }\r\n        private static void AddSortingData(ExcelWorksheet ws, int row, int col)\r\n        {\r\n            var rand = new Random();\r\n            var addr = ExcelCellBase.GetAddress(row, col, row + 999, col);\r\n            ws.Cells[addr].Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n            ws.Cells[addr].Style.Font.Color.SetColor(Color.White);\r\n            for (var r = row; r <= row+999; r++)\r\n            {\r\n                var v = rand.NextDouble() * row;\r\n                ws.SetValue(r, col, v);\r\n                ws.SetValue(r, col+1, $\"Rad {r} v={v}\");\r\n                ws.SetValue(r, col+2, $\"Rad {r} v={v}\");\r\n                ws.Cells[r, col].Style.Fill.BackgroundColor.SetColor(r % 3 == 0 ? Color.Red : r % 3 == 1 ? Color.Green : Color.Blue);\r\n                if (r % 10 == 0)\r\n                {\r\n                    ws.Cells[r, col+1, r, col+2].Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n                    ws.Cells[r, col+1].Style.Fill.BackgroundColor.SetColor(Color.LightPink);\r\n                    ws.Cells[r, col+2].Style.Fill.BackgroundColor.SetColor(Color.LightCyan);\r\n                }\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Get exception from thrown from <see cref=\"ExcelRangeBase.GetValue{T}\"/>\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">\r\n        ///     Type of value to attempt getting from <paramref name=\"range\"/>\r\n        /// </typeparam>\r\n        /// <param name=\"range\">\r\n        ///     Mandatory, cell range from which to attempt getting typed value\r\n        /// </param>\r\n        /// <returns>\r\n        ///     null if none is thrown\r\n        /// </returns>\r\n        private static Exception GetValueException<T>(ExcelRangeBase range)\r\n        {\r\n            return GetException(() => range.GetValue<T>());\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Get exception thrown by <paramref name=\"action\"/> when invoked.\r\n        /// </summary>\r\n        /// <param name=\"action\">\r\n        ///     Mandatory\r\n        /// </param>\r\n        /// <returns>\r\n        ///     null if none is thrown\r\n        /// </returns>\r\n        private static Exception GetException(Action action)\r\n        {\r\n            try\r\n            {\r\n                action.Invoke();\r\n                return null;\r\n            }\r\n            catch (Exception exception)\r\n            {\r\n                return exception;\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ClearFormulasTest()\r\n        {\r\n            using (ExcelPackage package = new ExcelPackage())\r\n            {\r\n                var worksheet = package.Workbook.Worksheets.Add(\"Sheet1\");\r\n                worksheet.Cells[\"A1\"].Value = 1;\r\n                worksheet.Cells[\"A2\"].Value = 2;\r\n                worksheet.Cells[\"A3\"].Formula = \"SUM(A1:A2)\";\r\n                worksheet.Calculate();\r\n                Assert.AreEqual(3d, worksheet.Cells[\"A3\"].Value);\r\n                Assert.AreEqual(\"SUM(A1:A2)\", worksheet.Cells[\"A3\"].Formula);\r\n                worksheet.ClearFormulas();\r\n                Assert.AreEqual(3d, worksheet.Cells[\"A3\"].Value);\r\n                Assert.AreEqual(string.Empty, worksheet.Cells[\"A3\"].Formula);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ClearFormulaValuesTest()\r\n        {\r\n            using (ExcelPackage package = new ExcelPackage())\r\n            {\r\n                var worksheet = package.Workbook.Worksheets.Add(\"Sheet1\");\r\n                worksheet.Cells[\"A1\"].Value = 1;\r\n                worksheet.Cells[\"A2\"].Value = 2;\r\n                worksheet.Cells[\"A3\"].Formula = \"SUM(A1:A2)\";\r\n                worksheet.Calculate();\r\n                Assert.AreEqual(3d, worksheet.Cells[\"A3\"].Value);\r\n                worksheet.ClearFormulaValues();\r\n                Assert.IsNull(worksheet.Cells[\"A3\"].Value);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "test_imports": ["using System;", "using System.Collections.Generic;", "using System.Linq;", "using Microsoft.VisualStudio.TestTools.UnitTesting;", "using OfficeOpenXml;", "using System.IO;", "using OfficeOpenXml.Drawing;", "using System.Drawing;", "using OfficeOpenXml.Drawing.Chart;", "using OfficeOpenXml.Drawing.Vml;", "using OfficeOpenXml.Style;", "using System.Data;", "using OfficeOpenXml.Table.PivotTable;", "using System.Reflection;", "using OfficeOpenXml.Table;", "using System.Threading;", "using System.Globalization;", "using System.Threading.Tasks;", "using System.Runtime.InteropServices;"], "test_namespace": "EPPlusTest", "test_class_name": "WorkSheetTest", "test_file_path": "EPPlusTest/WorkSheetTests.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}, {"tests": "/*******************************************************************************\r\n * You may amend and distribute as you like, but don't remove this header!\r\n *\r\n * Required Notice: Copyright (C) EPPlus Software AB. \r\n * https://epplussoftware.com\r\n *\r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 2.1 of the License, or (at your option) any later version.\r\n\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\n * See the GNU Lesser General Public License for more details.\r\n *\r\n * The GNU Lesser General Public License can be viewed at http://www.opensource.org/licenses/lgpl-license.php\r\n * If you unfamiliar with this license or have questions about it, here is an http://www.gnu.org/licenses/gpl-faq.html\r\n *\r\n * All code and executables are provided \"\" as is \"\" with no warranty either express or implied. \r\n * The author accepts no liability for any damage or loss of business that this product may cause.\r\n *\r\n * Code change notes:\r\n * \r\n  Date               Author                       Change\r\n *******************************************************************************\r\n  01/27/2020         EPPlus Software AB       Initial release EPPlus 5\r\n *******************************************************************************/\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing OfficeOpenXml;\r\n\r\nnamespace EPPlusTest\r\n{\r\n    [TestClass]\r\n    public class CommentsTest\r\n    {\r\n        [TestMethod]\r\n        public void VisibilityComments()\r\n        {\r\n            using (var pkg = new ExcelPackage())\r\n            {\r\n                var ws = pkg.Workbook.Worksheets.Add(\"Comment\");\r\n                var a1 = ws.Cells[\"A1\"];\r\n                a1.Value = \"Justin Dearing\";\r\n                a1.AddComment(\"I am A1s comment\", \"JD\");\r\n                Assert.IsFalse(a1.Comment.Visible); // Comments are by default invisible \r\n                a1.Comment.Visible = true;\r\n                a1.Comment.Visible = false;\r\n                Assert.IsNotNull(a1.Comment);\r\n                //check style attribute\r\n                var stylesDict = new System.Collections.Generic.Dictionary<string, string>();\r\n                string[] styles = a1.Comment.Style\r\n                    .Split(new[] { \";\" }, StringSplitOptions.RemoveEmptyEntries);\r\n                foreach(var s in styles)\r\n                {\r\n                    string[] split = s.Split(':');\r\n                    if (split.Length == 2)\r\n                    {\r\n                        var k = (split[0] ?? \"\").Trim().ToLower();\r\n                        var v = (split[1] ?? \"\").Trim().ToLower();\r\n                        stylesDict[k] = v;\r\n                    }\r\n                }\r\n                Assert.IsTrue(stylesDict.ContainsKey(\"visibility\"));\r\n                Assert.AreEqual(\"hidden\", stylesDict[\"visibility\"]);\r\n                Assert.IsFalse(a1.Comment.Visible);\r\n                    \r\n                pkg.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CommentInsertColumn()\r\n        {\r\n            using (var pkg = new ExcelPackage())\r\n            {\r\n                var ws = pkg.Workbook.Worksheets.Add(\"CommentInsert\");\r\n                ws.Cells[\"A1\"].AddComment(\"na\", \"test\");\r\n                Assert.AreEqual(1, ws.Comments.Count);\r\n\r\n                ws.InsertColumn(1, 1);\r\n\r\n                Assert.AreEqual(\"B1\", ws.Cells[\"B1\"].Comment.Address);\r\n                //Throws a null reference exception\r\n                ws.Comments.Remove(ws.Cells[\"B1\"].Comment);\r\n\r\n                //Throws an exception \"Comment does not exist\"\r\n                ws.DeleteColumn(2);\r\n                Assert.AreEqual(0, ws.Comments.Count);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CommentDeleteColumn()\r\n        {\r\n            using (var pkg = new ExcelPackage())\r\n            {\r\n                var ws = pkg.Workbook.Worksheets.Add(\"CommentInsert\");\r\n                ws.Cells[\"B1\"].AddComment(\"na\", \"test\");\r\n                Assert.AreEqual(1, ws.Comments.Count);\r\n\r\n                ws.DeleteColumn(1, 1);\r\n\r\n                Assert.AreEqual(\"A1\", ws.Cells[\"A1\"].Comment.Address);\r\n                //Throws a null reference exception\r\n                ws.Comments.Remove(ws.Cells[\"A1\"].Comment);\r\n\r\n                //Throws an exception \"Comment does not exist\"\r\n                ws.DeleteColumn(1);\r\n                Assert.AreEqual(0, ws.Comments.Count);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CommentInsertRow()\r\n        {\r\n            using (var pkg = new ExcelPackage())\r\n            {\r\n                var ws = pkg.Workbook.Worksheets.Add(\"CommentInsert\");\r\n                ws.Cells[\"A1\"].AddComment(\"na\", \"test\");\r\n                Assert.AreEqual(1, ws.Comments.Count);\r\n\r\n                ws.InsertRow(1, 1);\r\n\r\n                Assert.AreEqual(\"A2\", ws.Cells[\"A2\"].Comment.Address);                \r\n                Assert.IsNull(ws.Cells[\"A1\"].Comment);\r\n                //Throws a null reference exception\r\n                ws.Comments.Remove(ws.Cells[\"A2\"].Comment);\r\n\r\n                //Throws an exception \"Comment does not exist\"\r\n                ws.DeleteRow(2);\r\n                Assert.AreEqual(0, ws.Comments.Count);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CommentDeleteRow()\r\n        {\r\n            using (var pkg = new ExcelPackage())\r\n            {\r\n                var ws = pkg.Workbook.Worksheets.Add(\"CommentInsert\");\r\n                ws.Cells[\"A2\"].AddComment(\"na\", \"test\");\r\n                Assert.AreEqual(1, ws.Comments.Count);\r\n\r\n                ws.DeleteRow(1, 1);\r\n\r\n                Assert.AreEqual(\"A1\", ws.Cells[\"A1\"].Comment.Address);\r\n                //Throws a null reference exception\r\n                ws.Comments.Remove(ws.Cells[\"A1\"].Comment);\r\n\r\n                //Throws an exception \"Comment does not exist\"\r\n                ws.DeleteRow(1);\r\n                Assert.AreEqual(0, ws.Comments.Count);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void RangeShouldClearComment()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                for (int i = 0; i < 5; i++)\r\n                {\r\n                    ws.Cells[2, 2].Value = \"hallo\";\r\n                    ExcelComment comment = ws.Cells[2, 2].AddComment(\"hallo\", \"hallo\");\r\n                    comment.Font.FontName = \"Arial\";\r\n                    comment.AutoFit = true;\r\n                    ExcelRange cell = ws.Cells[2, 2];\r\n\r\n                    Assert.AreEqual(\"Arial\", comment.Font.FontName);\r\n                    Assert.IsTrue(comment.AutoFit);\r\n                    Assert.AreEqual(1, ws.Comments.Count);\r\n                    Assert.IsNotNull(cell.Comment);\r\n\r\n                    cell.Clear();\r\n\r\n                    Assert.AreEqual(0, ws.Comments.Count);\r\n                    Assert.IsNull(cell.Comment);\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SettingRichTextShouldNotEffectComment()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ExcelComment comment = ws.Cells[1, 1].AddComment(\"My Comment\", \"Me\");\r\n                Assert.IsNotNull(ws.Cells[1, 1].Comment);\r\n                ws.Cells[1, 1].IsRichText = true;\r\n                Assert.IsNotNull(ws.Cells[1, 1].Comment);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n", "test_imports": ["using System;", "using System.IO;", "using System.Linq;", "using Microsoft.VisualStudio.TestTools.UnitTesting;", "using OfficeOpenXml;"], "test_namespace": "EPPlusTest", "test_class_name": "CommentsTest", "test_file_path": "EPPlusTest/CommentsTest.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}, {"tests": "/*******************************************************************************\r\n * You may amend and distribute as you like, but don't remove this header!\r\n *\r\n * Required Notice: Copyright (C) EPPlus Software AB. \r\n * https://epplussoftware.com\r\n *\r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 2.1 of the License, or (at your option) any later version.\r\n\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\n * See the GNU Lesser General Public License for more details.\r\n *\r\n * The GNU Lesser General Public License can be viewed at http://www.opensource.org/licenses/lgpl-license.php\r\n * If you unfamiliar with this license or have questions about it, here is an http://www.gnu.org/licenses/gpl-faq.html\r\n *\r\n * All code and executables are provided \"\" as is \"\" with no warranty either express or implied. \r\n * The author accepts no liability for any damage or loss of business that this product may cause.\r\n *\r\n * Code change notes:\r\n * \r\n  Date               Author                       Change\r\n *******************************************************************************\r\n  01/27/2020         EPPlus Software AB       Initial release EPPlus 5\r\n *******************************************************************************/\r\nusing System;\r\nusing System.Drawing;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing OfficeOpenXml;\r\nusing OfficeOpenXml.Core.CellStore;\r\nusing OfficeOpenXml.Style;\r\n\r\nnamespace EPPlusTest.Core\r\n{\r\n    [TestClass]\r\n    public class CellStoreInWorksheetTest : TestBase\r\n    {\r\n        static ExcelPackage _pck;\r\n        [ClassInitialize]\r\n        public static void Init(TestContext context)\r\n        {\r\n            _pck = OpenPackage(\"CellStore.xlsx\", true);\r\n        }\r\n        [ClassCleanup]\r\n        public static void Cleanup()\r\n        {\r\n            SaveAndCleanup(_pck);\r\n        }\r\n        [TestMethod]\r\n        public void Insert1()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Insert1\");\r\n            LoadData(ws);\r\n\r\n            ws.InsertRow(2, 1000);\r\n            Assert.AreEqual(ws.GetValue(1002, 1), \"1,0\");\r\n            ws.InsertRow(1003, 1000);\r\n            Assert.AreEqual(ws.GetValue(2003, 1), \"2,0\");\r\n            ws.InsertRow(2004, 1000);\r\n            Assert.AreEqual(ws.GetValue(3004, 1), \"3,0\");\r\n            ws.InsertRow(2006, 1000);\r\n            Assert.AreEqual(ws.GetValue(4005, 1), \"4,0\");\r\n            ws.InsertRow(4500, 500);\r\n            Assert.AreEqual(ws.GetValue(5000, 1), \"499,0\");\r\n\r\n            ws.InsertRow(1, 1);\r\n            Assert.AreEqual(ws.GetValue(1003, 1), \"1,0\");\r\n            Assert.AreEqual(ws.GetValue(5001, 1), \"499,0\");\r\n\r\n            ws.InsertRow(1, 15);\r\n            Assert.AreEqual(ws.GetValue(4020, 1), \"3,0\");\r\n            Assert.AreEqual(ws.GetValue(5016, 1), \"499,0\");\r\n\r\n        }\r\n        [TestMethod]\r\n        public void Insert2()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Insert2-1\");\r\n            LoadData(ws);\r\n\r\n            for (int i = 0; i < 32; i++)\r\n            {\r\n                ws.InsertRow(1, 1);\r\n            }\r\n            Assert.AreEqual(ws.GetValue(33, 1), \"0,0\");\r\n\r\n            ws = _pck.Workbook.Worksheets.Add(\"Insert2-2\");\r\n            LoadData(ws);\r\n\r\n            for (int i = 0; i < 32; i++)\r\n            {\r\n                ws.InsertRow(15, 1);\r\n            }\r\n            Assert.AreEqual(ws.GetValue(1, 1), \"0,0\");\r\n            Assert.AreEqual(ws.GetValue(47, 1), \"14,0\");\r\n        }\r\n        [TestMethod]\r\n        public void InsertTwoFrom5000()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Insert3\");\r\n            LoadData(ws, 5000);\r\n\r\n            for (int i = 0; i < 5000; i += 4)\r\n            {\r\n                ws.InsertRow(i + 1, 3);\r\n            }\r\n            Assert.AreEqual(\"1249,0\", ws.GetValue(5000, 1));\r\n        }\r\n\r\n        [TestMethod]\r\n        public void InsertEveryOtherFrom5000()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"InsertOtherFrom5000\");\r\n\r\n            LoadData(ws, 5000);\r\n\r\n            for (int i = 5000; i > 0; i -= 2)\r\n            {\r\n                ws.InsertRow(i, 1);\r\n            }\r\n            Assert.AreEqual(\"3546,0\", ws.GetValue(5320, 1)); \r\n            Assert.AreEqual(\"4999,0\", ws.GetValue(7500, 1));\r\n        }\r\n        [TestMethod]\r\n        public void EnumCellstore()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"enum\");\r\n\r\n            LoadData(ws, 5000);\r\n\r\n            var o = new CellStoreEnumerator<ExcelValue>(ws._values, 2, 1, 5, 3);\r\n            for (var i=1;i<5000;i++)\r\n            {\r\n                Assert.AreEqual($\"{i-1},0\", ws.Cells[i, 1].Value);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRows()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"Delete\");\r\n            LoadData(ws, 5000);\r\n\r\n            ws.DeleteRow(2, 2);\r\n            Assert.AreEqual(\"3,0\", ws.GetValue(2, 1));\r\n            ws.DeleteRow(10, 10);\r\n            Assert.AreEqual(\"21,0\", ws.GetValue(10, 1));\r\n            ws.DeleteRow(50, 40);\r\n            Assert.AreEqual(\"101,0\", ws.GetValue(50, 1));\r\n            ws.DeleteRow(100, 100);\r\n            Assert.AreEqual(\"251,0\", ws.GetValue(100, 1));\r\n            ws.DeleteRow(1, 31);\r\n            Assert.AreEqual(\"43,0\", ws.GetValue(1, 1));\r\n            Assert.AreEqual(\"4999,0\",   ws.GetValue(4817, 1));\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRowsFirst()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteFirst\");\r\n            LoadData(ws, 5000);\r\n\r\n            ws.DeleteRow(32, 30);\r\n            for (int i = 1; i < 50; i++)\r\n            {\r\n                ws.DeleteRow(1, 1);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteInsert()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteInsert\");\r\n            LoadData(ws, 5000);\r\n\r\n            ws.DeleteRow(2, 33);\r\n            ws.InsertRow(2, 38);\r\n\r\n            for (int i = 0; i < 33; i++)\r\n            {\r\n                ws.SetValue(i + 2, 1, i + 2);\r\n            }\r\n        }\r\n        private void LoadData(ExcelWorksheet ws)\r\n        {\r\n            LoadData(ws, 1000);\r\n        }\r\n        private void LoadData(ExcelWorksheet ws, int rows, int cols = 1, bool isNumeric = false)\r\n        {\r\n            for (int r = 0; r < rows; r++)\r\n            {\r\n                for (int c = 0; c < cols; c++)\r\n                {\r\n                    if (isNumeric)\r\n                        ws.SetValue(r + 1, c + 1, r + c);\r\n                    else\r\n                        ws.SetValue(r + 1, c + 1, r.ToString() + \",\" + c.ToString());\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void FillInsertTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"FillInsert\");\r\n\r\n            LoadData(ws, 500);\r\n\r\n            var r = 1;\r\n            for (int i = 1; i <= 500; i++)\r\n            {\r\n                ws.InsertRow(r, i);\r\n                Assert.AreEqual((i - 1).ToString() + \",0\", ws.GetValue(r + i, 1).ToString());\r\n                r += i + 1;\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void CopyCellsTest()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CopyCells\");\r\n\r\n            LoadData(ws, 100, isNumeric: true);\r\n            ws.Cells[\"B1\"].Formula = \"SUM(A1:A500)\";\r\n            ws.Calculate();\r\n            ws.Cells[\"B1\"].Copy(ws.Cells[\"C1\"]);\r\n            ws.Cells[\"B1\"].Copy(ws.Cells[\"D1\"], ExcelRangeCopyOptionFlags.ExcludeFormulas);\r\n\r\n            Assert.AreEqual(ws.Cells[\"B1\"].Value, ws.Cells[\"C1\"].Value);\r\n            Assert.AreEqual(\"SUM(B1:B500)\", ws.Cells[\"C1\"].Formula);\r\n\r\n            Assert.AreEqual(ws.Cells[\"B1\"].Value, ws.Cells[\"D1\"].Value);\r\n            Assert.AreNotEqual(ws.Cells[\"B1\"].Formula, ws.Cells[\"D1\"].Formula);\r\n        }\r\n        [TestMethod]\r\n        public void Issues351()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                // Arrange\r\n                var worksheet = package.Workbook.Worksheets.Add(\"Test\");\r\n                worksheet.Cells[1, 1].Value = \"A\";                      // If you remove this \"anchor\", the problem doesn't happen.\r\n                worksheet.Cells[1026, 1].Value = \"B\";\r\n                worksheet.Cells[1026, 2].Value = \"B\";\r\n                var range = worksheet.Row(1026);\r\n                range.Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n                range.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 255, 0));\r\n\r\n                // Act - This should shift the whole row 1026 down 1\r\n                worksheet.InsertRow(1024, 1);\r\n\r\n                // Assert - This value should be null, instead it's \"B\"\r\n                Assert.IsNull(worksheet.Cells[1025, 1].Value);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateColumnsAreCreatedIfSpan()\r\n        {\r\n\r\n            var ws = _pck.Workbook.Worksheets.Add(\"ValidateColumnSpan\");\r\n            for (int i = 1; i < 11; i++)\r\n            {\r\n                ws.Cells[i, 1].Value = \"A\";\r\n                ws.Cells[i, 10].Value = \"J\";\r\n            }\r\n            ws.Cells[\"A1:J10\"].Style.Fill.SetBackground(System.Drawing.Color.AliceBlue);\r\n            ws.Cells[\"C3\"].Value = \"C3\";\r\n            Assert.AreEqual(\"A\", ws.Cells[\"A1\"].Value);\r\n            Assert.AreEqual(\"A\", ws.Cells[\"A5\"].Value);\r\n            Assert.AreEqual(\"A\", ws.Cells[\"A10\"].Value);\r\n            Assert.AreEqual(\"C3\", ws.Cells[\"C3\"].Value);\r\n            Assert.AreEqual(\"J\", ws.Cells[\"J1\"].Value);\r\n            Assert.AreEqual(\"J\", ws.Cells[\"J5\"].Value);\r\n            Assert.AreEqual(\"J\", ws.Cells[\"J10\"].Value);\r\n        }\r\n\r\n    }\r\n}\r\n", "test_imports": ["using System;", "using System.Drawing;", "using Microsoft.VisualStudio.TestTools.UnitTesting;", "using OfficeOpenXml;", "using OfficeOpenXml.Core.CellStore;", "using OfficeOpenXml.Style;"], "test_namespace": "EPPlusTest.Core", "test_class_name": "CellStoreInWorksheetTest", "test_file_path": "EPPlusTest/Core/CellStoreInWorksheetTest.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}, {"tests": "using Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing OfficeOpenXml;\r\nusing OfficeOpenXml.Drawing;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace EPPlusTest.Core.Range.Delete\r\n{\r\n    [TestClass]\r\n    public class WorksheetRangeInsertDeleteDrawingsTests : TestBase\r\n    {\r\n        public static ExcelPackage _pck;\r\n        [ClassInitialize]\r\n        public static void Init(TestContext context)\r\n        {\r\n            InitBase();\r\n            _pck = OpenPackage(\"WorksheetRangeInsertDeleteDrawings.xlsx\", true);\r\n        }\r\n        [ClassCleanup] \r\n        public static void Cleanup()\r\n        {\r\n            SaveAndCleanup(_pck);\r\n        }\r\n        #region Row Tests\r\n        [TestMethod]\r\n        public void DeleteRowsEntireDrawing()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteEntireRow\");\r\n            var shape1 = ws.Drawings.AddShape(\"Shape1\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            \r\n            var shape2 = ws.Drawings.AddShape(\"DeletedShape\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape2.SetPosition(2, 0, 11, 0);\r\n\r\n            var shape3 = ws.Drawings.AddShape(\"Shape3\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape3.SetPosition(5, 0, 22, 0);\r\n\r\n            //Act\r\n            ws.DeleteRow(3, 10);  \r\n\r\n            //Assert\r\n            Assert.AreEqual(2, ws.Drawings.Count);\r\n\r\n            Assert.AreEqual(0, shape1.From.Row);\r\n            Assert.AreEqual(2, shape1.To.Row);\r\n\r\n            Assert.AreEqual(2, shape3.From.Row);\r\n            Assert.AreEqual(5, shape3.To.Row);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRowsDrawingPartialRow()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeletePartialRow\");\r\n            var shape1 = ws.Drawings.AddShape(\"Shape1\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape1.SetPosition(0, 5, 0, 0);\r\n\r\n            var shape2 = ws.Drawings.AddShape(\"PartialShape\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape2.SetPosition(2, 5, 11, 0);\r\n\r\n            var shape3 = ws.Drawings.AddShape(\"Shape3\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape3.SetPosition(5, 5, 22, 0);\r\n\r\n            //Act\r\n            ws.DeleteRow(3, 10);\r\n\r\n            //Assert\r\n            Assert.AreEqual(3, ws.Drawings.Count);\r\n\r\n            Assert.AreEqual(0, shape1.From.Row);\r\n            Assert.AreEqual(5, shape1.From.RowOff / ExcelDrawing.EMU_PER_PIXEL);\r\n            Assert.AreEqual(2, shape1.To.Row);\r\n            Assert.AreEqual(0, shape1.To.RowOff);\r\n\r\n            Assert.AreEqual(2, shape2.From.Row);\r\n            Assert.AreEqual(0, shape2.From.RowOff);\r\n            Assert.AreEqual(2, shape2.To.Row);\r\n            Assert.AreEqual(5, shape2.To.RowOff/ExcelDrawing.EMU_PER_PIXEL);\r\n\r\n            Assert.AreEqual(2, shape3.From.Row);\r\n            Assert.AreEqual(0, shape3.From.RowOff);\r\n            Assert.AreEqual(5, shape3.To.Row);\r\n            Assert.AreEqual(5, shape3.To.RowOff / ExcelDrawing.EMU_PER_PIXEL);\r\n        }\r\n        #endregion\r\n        #region Column Tests\r\n        [TestMethod]\r\n        public void DeleteColumnWithDrawing()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteColumns\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", eShapeStyle.Rect);\r\n            shape.SetPosition(0, 0, 1, 0);\r\n\r\n            var pic = ws.Drawings.AddPicture(\"Picture1_OneCell\", Properties.Resources.Test1);\r\n            pic.SetPosition(11, 0, 1, 0);\r\n\r\n            var chart = ws.Drawings.AddLineChart(\"Chart1_TwoCellAbsolute\", OfficeOpenXml.Drawing.Chart.eLineChartType.Line);\r\n            chart.SetPosition(22, 0, 1, 0);\r\n            chart.EditAs = OfficeOpenXml.Drawing.eEditAs.Absolute;\r\n\r\n            //Act\r\n            ws.DeleteColumn(1, 1);\r\n            ws.DeleteColumn(3, 1);\r\n\r\n            //Assert\r\n            Assert.AreEqual(0, shape.From.Column);\r\n            Assert.AreEqual(0, pic.From.Column);\r\n            Assert.AreEqual(1, chart.From.Column);\r\n\r\n            Assert.AreEqual(9, shape.To.Column);\r\n            Assert.AreEqual(11, chart.To.Column);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteColumnEntireDrawing()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteEntireColumn\");\r\n            var shape1 = ws.Drawings.AddShape(\"Shape1\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n\r\n            var shape2 = ws.Drawings.AddShape(\"DeletedShape\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape2.SetPosition(11, 0, 2, 0);\r\n\r\n            var shape3 = ws.Drawings.AddShape(\"Shape3\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape3.SetPosition(22, 0, 5, 0);\r\n\r\n            var dv = ws.DataValidations.AddIntegerValidation(\"C1:D5\");\r\n            dv.Operator = OfficeOpenXml.DataValidation.ExcelDataValidationOperator.equal;\r\n            dv.Formula.Value = 1;\r\n            //Act\r\n            ws.DeleteColumn(3, 10);\r\n\r\n            //Assert\r\n            Assert.AreEqual(2, ws.Drawings.Count);\r\n\r\n            Assert.AreEqual(0, shape1.From.Column);\r\n            Assert.AreEqual(2, shape1.To.Column);\r\n\r\n            Assert.AreEqual(2, shape3.From.Column);\r\n            Assert.AreEqual(5, shape3.To.Column);\r\n            Assert.AreEqual(0, ws.DataValidations.Count);\r\n\r\n        }\r\n        [TestMethod]\r\n        public void DeleteColumnDrawingPartialColumn()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeletePartialColumn\");\r\n            var shape1 = ws.Drawings.AddShape(\"Shape1\", eShapeStyle.Rect);\r\n            shape1.SetPosition(0, 0, 0, 5);\r\n\r\n            var shape2 = ws.Drawings.AddShape(\"PartialShape\", eShapeStyle.Rect);\r\n            shape2.SetPosition(11, 0, 2, 5);\r\n\r\n            var shape3 = ws.Drawings.AddShape(\"Shape3\", eShapeStyle.Rect);\r\n            shape3.SetPosition(22, 0, 5, 5);\r\n\r\n            //Act\r\n            ws.DeleteColumn(3, 10);\r\n\r\n            //Assert\r\n            Assert.AreEqual(3, ws.Drawings.Count);\r\n\r\n            Assert.AreEqual(0, shape1.From.Column);\r\n            Assert.AreEqual(5, shape1.From.ColumnOff / ExcelDrawing.EMU_PER_PIXEL);\r\n            Assert.AreEqual(2, shape1.To.Column);\r\n            Assert.AreEqual(0, shape1.To.ColumnOff);\r\n\r\n            Assert.AreEqual(2, shape2.From.Column);\r\n            Assert.AreEqual(0, shape2.From.ColumnOff);\r\n            Assert.AreEqual(2, shape2.To.Column);\r\n            Assert.AreEqual(5, shape2.To.ColumnOff / ExcelDrawing.EMU_PER_PIXEL);\r\n\r\n            Assert.AreEqual(2, shape3.From.Column);\r\n            Assert.AreEqual(0, shape3.From.ColumnOff);\r\n            Assert.AreEqual(5, shape3.To.Column);\r\n            Assert.AreEqual(5, shape3.To.ColumnOff / ExcelDrawing.EMU_PER_PIXEL);\r\n        }\r\n\r\n        #endregion\r\n        #region Range\r\n        [TestMethod]\r\n        public void DeleteRangeWithDrawingFullShiftUp()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsInsertRangeDownFull\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape.SetPosition(2, 0, 0, 0);\r\n\r\n            var pic = ws.Drawings.AddPicture(\"Picture1_OneCell\", Properties.Resources.Test1);\r\n            pic.SetPosition(2, 0, 11, 0);\r\n\r\n            var chart = ws.Drawings.AddLineChart(\"Chart1_TwoCellAbsolute\", OfficeOpenXml.Drawing.Chart.eLineChartType.Line);\r\n            chart.SetPosition(2, 0, 22, 0);\r\n            chart.EditAs = eEditAs.Absolute;\r\n\r\n            //Act\r\n            ws.Cells[\"A1:J1\"].Delete(eShiftTypeDelete.Up);\r\n            ws.Cells[\"A3:J3\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(1, shape.From.Row);\r\n            Assert.AreEqual(2, pic.From.Row);\r\n            Assert.AreEqual(2, chart.From.Row);\r\n\r\n            Assert.AreEqual(10, shape.To.Row);\r\n            Assert.AreEqual(12, chart.To.Row);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRangeWithDrawingFullShiftRight()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteRangeLeftFull\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n            shape.SetPosition(2, 0, 1, 0);\r\n\r\n            var pic = ws.Drawings.AddPicture(\"Picture1_OneCell\", Properties.Resources.Test1);\r\n            pic.SetPosition(2, 0, 11, 0);\r\n\r\n            var chart = ws.Drawings.AddLineChart(\"Chart1_TwoCellAbsolute\", OfficeOpenXml.Drawing.Chart.eLineChartType.Line);\r\n            chart.SetPosition(2, 0, 22, 0);\r\n            chart.EditAs = eEditAs.Absolute;\r\n\r\n            //Act\r\n            ws.Cells[\"A1:A12\"].Delete(eShiftTypeDelete.Left);\r\n            ws.Cells[\"C1:C12\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            Assert.AreEqual(0, shape.From.Column);\r\n            Assert.AreEqual(9, pic.From.Column);\r\n            Assert.AreEqual(22, chart.From.Column);\r\n\r\n            Assert.AreEqual(9, shape.To.Column);\r\n            //Assert.AreEqual(picToCol, pic.To.Column);\r\n            Assert.AreEqual(32, chart.To.Column);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRangeWithDrawingPartialShiftUp()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteRangeUpPart\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n\r\n            var pic = ws.Drawings.AddPicture(\"Picture1_OneCell\", Properties.Resources.Test1);\r\n            pic.SetPosition(0, 0, 11, 0);\r\n\r\n            var chart = ws.Drawings.AddLineChart(\"Chart1_TwoCellAbsolute\", OfficeOpenXml.Drawing.Chart.eLineChartType.Line);\r\n            chart.SetPosition(0, 0, 22, 0);\r\n            chart.EditAs = OfficeOpenXml.Drawing.eEditAs.Absolute;\r\n\r\n            //Act\r\n            ws.Cells[\"A1:I1\"].Delete(eShiftTypeDelete.Up);\r\n            ws.Cells[\"B1:J1\"].Delete(eShiftTypeDelete.Up);\r\n            ws.Cells[\"A3:I3\"].Delete(eShiftTypeDelete.Up);\r\n            ws.Cells[\"B3:J3\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(0, shape.From.Row);\r\n            Assert.AreEqual(0, pic.From.Row);\r\n            Assert.AreEqual(0, chart.From.Row);\r\n\r\n            Assert.AreEqual(10, shape.To.Row);\r\n            Assert.AreEqual(10, chart.To.Row);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRangeWithDrawingPartialShiftUpOffset()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteRangeUpPartOff\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n\r\n            shape.SetPosition(5, 5, 11, 5);\r\n\r\n            //Act & Assert\r\n            ws.Cells[\"A1:X1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(4, shape.From.Row);\r\n            Assert.AreEqual(5*ExcelDrawing.EMU_PER_PIXEL, shape.From.RowOff);\r\n\r\n            ws.Cells[\"A5:X5\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(4, shape.From.Row);\r\n            Assert.AreEqual(0, shape.From.RowOff);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRangeWithDrawingPartialShiftLeftOffset()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteRangeLeftPartOff\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n\r\n            shape.SetPosition(5, 5, 5, 5);\r\n\r\n            //Act & Assert\r\n            ws.Cells[\"A1:A15\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(4, shape.From.Column);\r\n            Assert.AreEqual(5 * ExcelDrawing.EMU_PER_PIXEL, shape.From.ColumnOff);\r\n\r\n            ws.Cells[\"E1:E15\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(4, shape.From.Column);\r\n            Assert.AreEqual(0, shape.From.ColumnOff);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteRangeWithDrawingPartialShiftLeft()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DrawingsDeleteRangeLeftPart\");\r\n            var shape = ws.Drawings.AddShape(\"Shape1_TwoCell\", OfficeOpenXml.Drawing.eShapeStyle.Rect);\r\n\r\n            var pic = ws.Drawings.AddPicture(\"Picture1_OneCell\", Properties.Resources.Test1);\r\n            pic.SetPosition(0, 0, 11, 0);\r\n\r\n            var chart = ws.Drawings.AddLineChart(\"Chart1_TwoCellAbsolute\", OfficeOpenXml.Drawing.Chart.eLineChartType.Line);\r\n            chart.SetPosition(0, 0, 22, 0);\r\n            chart.EditAs = OfficeOpenXml.Drawing.eEditAs.Absolute;\r\n\r\n            //Act\r\n            ws.Cells[\"A1:A2\"].Delete(eShiftTypeDelete.Left);\r\n            ws.Cells[\"A2:A10\"].Delete(eShiftTypeDelete.Left);\r\n            ws.Cells[\"A3:A9\"].Delete(eShiftTypeDelete.Left);\r\n            ws.Cells[\"B3:J3\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            Assert.AreEqual(0, shape.From.Column);\r\n            Assert.AreEqual(11, pic.From.Column);\r\n            Assert.AreEqual(22, chart.From.Column);\r\n\r\n            Assert.AreEqual(10, shape.To.Column);\r\n            Assert.AreEqual(32, chart.To.Column);\r\n        }\r\n        #endregion\r\n    }\r\n}\r\n", "test_imports": ["using Microsoft.VisualStudio.TestTools.UnitTesting;", "using OfficeOpenXml;", "using OfficeOpenXml.Drawing;", "using System;", "using System.Collections.Generic;", "using System.Linq;", "using System.Text;", "using System.Threading.Tasks;"], "test_namespace": "EPPlusTest.Core.Range.Delete", "test_class_name": "WorksheetRangeInsertDeleteDrawingsTests", "test_file_path": "EPPlusTest/Core/Range/Delete/RangeDeleteDrawingsTests.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}, {"tests": "using Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing OfficeOpenXml;\r\nusing OfficeOpenXml.Drawing;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace EPPlusTest.Core.Range.Delete\r\n{\r\n    [TestClass]\r\n    public class RangeDeleteTests : TestBase\r\n    {\r\n        public static ExcelPackage _pck;\r\n        [ClassInitialize]\r\n        public static void Init(TestContext context)\r\n        {\r\n            InitBase();\r\n            _pck = OpenPackage(\"WorksheetRangeDelete.xlsx\", true);\r\n        }\r\n        [ClassCleanup]\r\n        public static void Cleanup()\r\n        {\r\n            SaveAndCleanup(_pck);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFormulasAfterDeleteRow()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRow_Sheet1\");\r\n            var ws2 = _pck.Workbook.Worksheets.Add(\"DeleteRow_Sheet2\");\r\n            ws.Cells[\"A1\"].Formula = \"Sum(C5:C10)\";\r\n            ws.Cells[\"B1:B2\"].Formula = \"Sum(C5:C10)\";\r\n            ws2.Cells[\"A1\"].Formula = \"Sum(DeleteRow_Sheet1!C5:C10)\";\r\n            ws2.Cells[\"B1:B2\"].Formula = \"Sum(DeleteRow_Sheet1!C5:C10)\";\r\n\r\n            //Act\r\n            ws.DeleteRow(3, 1);\r\n            var wsError = _pck.Workbook.Worksheets[\"DeleteRow_Sheet1\"];\r\n            if (wsError != null)\r\n            {\r\n                Assert.AreEqual(1, wsError._sharedFormulas.Count);\r\n            }\r\n\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"Sum(C4:C9)\", ws.Cells[\"A1\"].Formula);\r\n            Assert.AreEqual(\"Sum(C4:C9)\", ws.Cells[\"B1\"].Formula);\r\n            Assert.AreEqual(\"Sum(C5:C10)\", ws.Cells[\"B2\"].Formula);\r\n\r\n            Assert.AreEqual(\"Sum(DeleteRow_Sheet1!C4:C9)\", ws2.Cells[\"A1\"].Formula);\r\n            Assert.AreEqual(\"Sum(DeleteRow_Sheet1!C4:C9)\", ws2.Cells[\"B1\"].Formula);\r\n            Assert.AreEqual(\"Sum(DeleteRow_Sheet1!C5:C10)\", ws2.Cells[\"B2\"].Formula);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFormulasAfterDelete2Rows()\r\n        {\r\n            //Setup\r\n            var ws1 = _pck.Workbook.Worksheets.Add(\"DeleteRow2_Sheet1\");\r\n            var ws2 = _pck.Workbook.Worksheets.Add(\"DeleteRow2_Sheet2\");\r\n            ws1.Cells[\"B3:B6\"].Formula = \"A1+C3\";\r\n            ws2.Cells[\"B3:B6\"].Formula = \"DeleteRow2_Sheet1!A1+DeleteRow2_Sheet1!C2\";\r\n\r\n            //Act\r\n            ws1.DeleteRow(2, 2);\r\n            var wsError = _pck.Workbook.Worksheets[\"DeleteRow_Sheet1\"];\r\n            if (wsError != null)\r\n            {\r\n                Assert.AreEqual(1, wsError._sharedFormulas.Count);\r\n            }\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"\", ws1.Cells[\"B1\"].Formula);\r\n            Assert.AreEqual(\"#REF!+C2\", ws1.Cells[\"B2\"].Formula);\r\n            Assert.AreEqual(\"#REF!+C3\", ws1.Cells[\"B3\"].Formula);\r\n            Assert.AreEqual(\"A2+C4\", ws1.Cells[\"B4\"].Formula);\r\n            Assert.AreEqual(\"\", ws1.Cells[\"B6\"].Formula);\r\n\r\n            Assert.AreEqual(\"DeleteRow2_Sheet1!A1+DeleteRow2_Sheet1!#REF!\", ws2.Cells[\"B3\"].Formula);\r\n            Assert.AreEqual(\"DeleteRow2_Sheet1!#REF!+DeleteRow2_Sheet1!#REF!\", ws2.Cells[\"B4\"].Formula);\r\n            Assert.AreEqual(\"DeleteRow2_Sheet1!#REF!+DeleteRow2_Sheet1!C2\", ws2.Cells[\"B5\"].Formula);\r\n            Assert.AreEqual(\"DeleteRow2_Sheet1!A2+DeleteRow2_Sheet1!C3\", ws2.Cells[\"B6\"].Formula);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFormulasAfterDeleteColumn()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteCol_Sheet1\");\r\n            var ws2 = _pck.Workbook.Worksheets.Add(\"DeleteCol_Sheet2\");\r\n            ws.Cells[\"A1\"].Formula = \"Sum(E3:I3)\";\r\n            ws.Cells[\"A2:B2\"].Formula = \"Sum(E3:I3)\";\r\n            ws2.Cells[\"A1\"].Formula = \"Sum(DeleteCol_Sheet1!E3:I3)\";\r\n            ws2.Cells[\"A2:B2\"].Formula = \"Sum(DeleteCol_Sheet1!E3:I3)\";\r\n\r\n            //Act\r\n            ws.DeleteColumn(3, 1);\r\n            var wsError = _pck.Workbook.Worksheets[\"DeleteRow_Sheet1\"];\r\n            if (wsError != null)\r\n            {\r\n                Assert.AreEqual(1, wsError._sharedFormulas.Count);\r\n            }\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"Sum(D3:H3)\", ws.Cells[\"A1\"].Formula);\r\n            Assert.AreEqual(\"Sum(D3:H3)\", ws.Cells[\"A2\"].Formula);\r\n            Assert.AreEqual(\"Sum(E3:I3)\", ws.Cells[\"B2\"].Formula);\r\n\r\n            Assert.AreEqual(\"Sum(DeleteCol_Sheet1!D3:H3)\", ws2.Cells[\"A1\"].Formula);\r\n            Assert.AreEqual(\"Sum(DeleteCol_Sheet1!D3:H3)\", ws2.Cells[\"A2\"].Formula);\r\n            Assert.AreEqual(\"Sum(DeleteCol_Sheet1!E3:I3)\", ws2.Cells[\"B2\"].Formula);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFormulasAfterDelete2Columns()\r\n        {\r\n            //Setup\r\n            var ws1 = _pck.Workbook.Worksheets.Add(\"DeleteCol2_Sheet1\");\r\n            var ws2 = _pck.Workbook.Worksheets.Add(\"DeleteCol2_Sheet2\");\r\n            ws1.Cells[\"C2:F2\"].Formula = \"A1+C3\";\r\n            ws2.Cells[\"C2:F2\"].Formula = \"DeleteCol2_Sheet1!A1+DeleteCol2_Sheet1!C3\";\r\n\r\n            //Act\r\n            ws1.DeleteColumn(2, 2);\r\n            var wsError = _pck.Workbook.Worksheets[\"DeleteRow_Sheet1\"];\r\n            if (wsError != null)\r\n            {\r\n                Assert.AreEqual(1, wsError._sharedFormulas.Count);\r\n            }\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"\", ws1.Cells[\"A2\"].Formula);\r\n            Assert.AreEqual(\"#REF!+B3\", ws1.Cells[\"B2\"].Formula);\r\n            Assert.AreEqual(\"#REF!+C3\", ws1.Cells[\"C2\"].Formula);\r\n            Assert.AreEqual(\"B1+D3\", ws1.Cells[\"D2\"].Formula);\r\n            Assert.AreEqual(\"\", ws1.Cells[\"B6\"].Formula);\r\n\r\n            Assert.AreEqual(\"DeleteCol2_Sheet1!A1+DeleteCol2_Sheet1!#REF!\", ws2.Cells[\"C2\"].Formula);\r\n            Assert.AreEqual(\"DeleteCol2_Sheet1!#REF!+DeleteCol2_Sheet1!B3\", ws2.Cells[\"D2\"].Formula);\r\n            Assert.AreEqual(\"DeleteCol2_Sheet1!#REF!+DeleteCol2_Sheet1!C3\", ws2.Cells[\"E2\"].Formula);\r\n            Assert.AreEqual(\"DeleteCol2_Sheet1!B1+DeleteCol2_Sheet1!D3\", ws2.Cells[\"F2\"].Formula);\r\n        }\r\n        [TestMethod]\r\n        public void SharedFormulaShouldBeDeletedIfEntireRowIsDeleted()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"A2:B2\"].Formula = \"C2\";\r\n                //Act\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                ws.DeleteRow(2);\r\n\r\n                //Assert\r\n                Assert.AreEqual(0, ws._sharedFormulas.Count);\r\n                Assert.AreEqual(\"\", ws.Cells[\"A2\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"B2\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SharedFormulaShouldBeDeletedIfEntireColumnIsDeleted()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"B1:B2\"].Formula = \"C2\";\r\n                //Act\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                ws.DeleteColumn(2);\r\n\r\n                //Assert\r\n                Assert.AreEqual(0, ws._sharedFormulas.Count);\r\n                Assert.AreEqual(\"\", ws.Cells[\"B1\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"B2\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SharedFormulaShouldBePartialDeletedRow()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"A2:B3\"].Formula = \"C2\";\r\n                //Act\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                ws.DeleteRow(2);\r\n\r\n                //Assert\r\n                Assert.AreEqual(0, ws._sharedFormulas.Count);\r\n                Assert.AreEqual(\"C2\", ws.Cells[\"A2\"].Formula);\r\n                Assert.AreEqual(\"D2\", ws.Cells[\"B2\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"A3\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"B3\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SharedFormulaShouldBePartialDeletedColumn()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"B1:C2\"].Formula = \"B3\";\r\n                //Act\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                ws.DeleteColumn(2);\r\n\r\n                //Assert\r\n                Assert.AreEqual(0, ws._sharedFormulas.Count);\r\n                Assert.AreEqual(\"B3\", ws.Cells[\"B1\"].Formula);\r\n                Assert.AreEqual(\"B4\", ws.Cells[\"B2\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"C1\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"C2\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SharedFormulaShouldBePartialDeletedRowShareFormulaRetained()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"A2:B3\"].Formula = \"E12\";\r\n                //Act\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                ws.DeleteRow(2);\r\n\r\n                //Assert\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                Assert.AreEqual(\"E11\", ws.Cells[\"A2\"].Formula);\r\n                Assert.AreEqual(\"F11\", ws.Cells[\"B2\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"A3\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"B3\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void SharedFormulaShouldBePartialDeletedColumnShareFormulaRetained()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"B1:C2\"].Formula = \"E12\";\r\n                //Act\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                ws.DeleteColumn(2);\r\n\r\n                //Assert\r\n                Assert.AreEqual(1, ws._sharedFormulas.Count);\r\n                Assert.AreEqual(\"D12\", ws.Cells[\"B1\"].Formula);\r\n                Assert.AreEqual(\"D13\", ws.Cells[\"B2\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"C1\"].Formula);\r\n                Assert.AreEqual(\"\", ws.Cells[\"C2\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void FixedAddressesShouldBeDeletedRow()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws1 = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                var ws2 = p.Workbook.Worksheets.Add(\"Sheet2\");\r\n                ws1.Cells[\"A1\"].Formula = \"SUM($A$5:$A$8)\";\r\n                ws2.Cells[\"A1\"].Formula = \"SUM(sheet1!$A$5:$A$8)\";\r\n                //Act\r\n                ws1.DeleteRow(4);\r\n                Assert.AreEqual(\"SUM($A$4:$A$7)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$A$4:$A$7)\", ws2.Cells[\"A1\"].Formula);\r\n                ws1.DeleteRow(4);\r\n                Assert.AreEqual(\"SUM($A$4:$A$6)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$A$4:$A$6)\", ws2.Cells[\"A1\"].Formula);\r\n                ws1.DeleteRow(6);\r\n                Assert.AreEqual(\"SUM($A$4:$A$5)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$A$4:$A$5)\", ws2.Cells[\"A1\"].Formula);\r\n                ws1.DeleteRow(6);\r\n                Assert.AreEqual(\"SUM($A$4:$A$5)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$A$4:$A$5)\", ws2.Cells[\"A1\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void FixedAddressesShouldBeDeletedColumn()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws1 = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                var ws2 = p.Workbook.Worksheets.Add(\"Sheet2\");\r\n                ws1.Cells[\"A1\"].Formula = \"SUM($E$1:$H$1)\";\r\n                ws2.Cells[\"A1\"].Formula = \"SUM(sheet1!$E$1:$H$1)\";\r\n                //Act\r\n                ws1.DeleteColumn(4);\r\n                Assert.AreEqual(\"SUM($D$1:$G$1)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$D$1:$G$1)\", ws2.Cells[\"A1\"].Formula);\r\n\r\n                ws1.DeleteColumn(4);\r\n                Assert.AreEqual(\"SUM($D$1:$F$1)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$D$1:$F$1)\", ws2.Cells[\"A1\"].Formula);\r\n\r\n                ws1.DeleteColumn(6);\r\n                Assert.AreEqual(\"SUM($D$1:$E$1)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$D$1:$E$1)\", ws2.Cells[\"A1\"].Formula);\r\n\r\n                ws1.DeleteColumn(6);\r\n                Assert.AreEqual(\"SUM($D$1:$E$1)\", ws1.Cells[\"A1\"].Formula);\r\n                Assert.AreEqual(\"SUM(sheet1!$D$1:$E$1)\", ws2.Cells[\"A1\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateValuesAfterDeleteRowInRangeShiftUp()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeDown\");\r\n            SetValues(ws,3);\r\n\r\n            //Act\r\n            ws.Cells[\"B2\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"A1\", ws.Cells[\"A1\"].Value);\r\n            Assert.AreEqual(\"A2\", ws.Cells[\"A2\"].Value);\r\n            Assert.AreEqual(\"A3\", ws.Cells[\"A3\"].Value);\r\n            Assert.AreEqual(\"B1\", ws.Cells[\"B1\"].Value);\r\n            Assert.AreEqual(\"B3\", ws.Cells[\"B2\"].Value);\r\n            Assert.IsNull(ws.Cells[\"B3\"].Value);\r\n            Assert.AreEqual(\"C1\", ws.Cells[\"C1\"].Value);\r\n            Assert.AreEqual(\"C2\", ws.Cells[\"C2\"].Value);\r\n            Assert.AreEqual(\"C3\", ws.Cells[\"C3\"].Value);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateValuesAfterDeleteRowInRangeShiftLeft()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeLeft\");\r\n            SetValues(ws, 3);\r\n\r\n            //Act\r\n            ws.Cells[\"B2\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"A1\", ws.Cells[\"A1\"].Value);\r\n            Assert.AreEqual(\"A2\", ws.Cells[\"A2\"].Value);\r\n            Assert.AreEqual(\"A3\", ws.Cells[\"A3\"].Value);\r\n            Assert.AreEqual(\"B1\", ws.Cells[\"B1\"].Value);\r\n            Assert.AreEqual(\"C2\", ws.Cells[\"B2\"].Value);\r\n            Assert.AreEqual(\"C1\", ws.Cells[\"C1\"].Value);\r\n            Assert.IsNull(ws.Cells[\"C2\"].Value);\r\n            Assert.AreEqual(\"C3\", ws.Cells[\"C3\"].Value);\r\n\r\n            //Act 2\r\n            ws.Cells[\"A1:B1\"].Delete(eShiftTypeDelete.Left);\r\n            \r\n            //Assert 2\r\n            Assert.AreEqual(\"C1\", ws.Cells[\"A1\"].Value);\r\n            Assert.IsNull(ws.Cells[\"B1\"].Value);\r\n            Assert.IsNull(ws.Cells[\"C1\"].Value);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateValuesAfterDeleteInRangeShiftUpTwoRows()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeUpTwoRows\");\r\n            SetValues(ws, 4);\r\n\r\n            //Act\r\n            ws.Cells[\"B1:C2\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            AssertNoChange(ws.Cells[\"A1:A4,D1:D4\"]);\r\n            AssertIsNull(ws.Cells[\"B3:C4\"]);\r\n\r\n            Assert.AreEqual(\"B3\", ws.Cells[\"B1\"].Value);\r\n            Assert.AreEqual(\"B4\", ws.Cells[\"B2\"].Value);            \r\n            Assert.AreEqual(\"C3\", ws.Cells[\"C1\"].Value);\r\n            Assert.AreEqual(\"C4\", ws.Cells[\"C2\"].Value);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateValuesAfterDeleteInRangeShiftLeftTwoRows()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeLeftTwoRows\");\r\n            SetValues(ws, 4);\r\n\r\n            //Act\r\n            ws.Cells[\"B1:C2\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            AssertNoChange(ws.Cells[\"A1:A4,D1:D4\"]);\r\n            AssertIsNull(ws.Cells[\"C1:D2\"]);\r\n\r\n            Assert.AreEqual(\"D1\", ws.Cells[\"B1\"].Value);\r\n            Assert.AreEqual(\"D2\", ws.Cells[\"B2\"].Value);\r\n        }\r\n\r\n\r\n        [TestMethod]\r\n        public void ValidateCommentsAfterDeleteShiftUp()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeCommentsUp\");\r\n            ws.Cells[\"A1\"].AddComment(\"Comment A1\", \"EPPlus\");\r\n            ws.Cells[\"A2\"].AddComment(\"Comment A2\", \"EPPlus\");\r\n            ws.Cells[\"A3\"].AddComment(\"Comment A3\", \"EPPlus\");\r\n\r\n            //Act\r\n            ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"Comment A1\", ws.Cells[\"A1\"].Comment.Text);\r\n            Assert.AreEqual(\"Comment A3\", ws.Cells[\"A2\"].Comment.Text);\r\n            Assert.IsNull(ws.Cells[\"A3\"].Comment);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateCommentsAfterDeleteShiftLeft()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeCommentsLeft\");\r\n            ws.Cells[\"A1\"].AddComment(\"Comment A1\", \"EPPlus\");\r\n            ws.Cells[\"B1\"].AddComment(\"Comment B1\", \"EPPlus\");\r\n            ws.Cells[\"C1\"].AddComment(\"Comment C1\", \"EPPlus\");\r\n\r\n            //Act\r\n            ws.Cells[\"B1\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"Comment A1\", ws.Cells[\"A1\"].Comment.Text);\r\n            Assert.AreEqual(\"Comment C1\", ws.Cells[\"B1\"].Comment.Text);\r\n            Assert.IsNull(ws.Cells[\"C1\"].Comment);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateNameAfterDeleteShiftUp()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"InsertRangeNamesDown\");\r\n            ws.Names.Add(\"NameA1\", ws.Cells[\"A1\"]);\r\n            ws.Names.Add(\"NameA2\", ws.Cells[\"A2\"]);\r\n            ws.Names.Add(\"NameB1\", ws.Cells[\"B1\"]);\r\n            ws.Names.Add(\"NameB2\", ws.Cells[\"B2\"]);\r\n            ws.Names.Add(\"NameC1\", ws.Cells[\"C1\"]);\r\n            ws.Names.Add(\"NameC2\", ws.Cells[\"C2\"]);\r\n\r\n            //Act\r\n            ws.Cells[\"A1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"#REF!\", ws.Names[\"NameA1\"].Address);\r\n            Assert.AreEqual(\"A1\", ws.Names[\"NameA2\"].Address);\r\n            Assert.AreEqual(\"B1\", ws.Names[\"NameB1\"].Address);\r\n            Assert.AreEqual(\"C1\", ws.Names[\"NameC1\"].Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateNameAfterDeleteShiftUp_MustBeInsideRange()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"InsertRangeInsideNamesDown\");\r\n            ws.Names.Add(\"NameA2B4\", ws.Cells[\"A2:B4\"]);\r\n            ws.Names.Add(\"NameB2D3\", ws.Cells[\"B2:D3\"]);\r\n            ws.Names.Add(\"NameC1F3\", ws.Cells[\"C1:F3\"]);\r\n\r\n            //Act\r\n            ws.Cells[\"A2:B3\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"A2:B2\", ws.Names[\"NameA2B4\"].Address);\r\n            Assert.AreEqual(\"B2:D3\", ws.Names[\"NameB2D3\"].Address);\r\n            Assert.AreEqual(\"C1:F3\", ws.Names[\"NameC1F3\"].Address);\r\n\r\n            ws.Cells[\"B2:D5\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(\"A2:B2\", ws.Names[\"NameA2B4\"].Address);\r\n            Assert.AreEqual(\"#REF!\", ws.Names[\"NameB2D3\"].Address);\r\n            Assert.AreEqual(\"C1:F3\", ws.Names[\"NameC1F3\"].Address);\r\n\r\n            ws.Cells[\"B2:F2\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(\"A2:B2\", ws.Names[\"NameA2B4\"].Address);\r\n            Assert.AreEqual(\"#REF!\", ws.Names[\"NameB2D3\"].Address);\r\n            Assert.AreEqual(\"C1:F2\", ws.Names[\"NameC1F3\"].Address);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateNamesAfterDeleteShiftLeft_MustBeInsideRange()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"InsertRangeInsideNamesRight\");\r\n            ws.Names.Add(\"NameB1D2\", ws.Cells[\"D1:F2\"]);\r\n            ws.Names.Add(\"NameB2C4\", ws.Cells[\"D2:F4\"]);\r\n            ws.Names.Add(\"NameA3C6\", ws.Cells[\"A3:C6\"]);\r\n\r\n            //Act\r\n            ws.Cells[\"B1:C2\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"B1:D2\", ws.Names[\"NameB1D2\"].Address);\r\n            Assert.AreEqual(\"D2:F4\", ws.Names[\"NameB2C4\"].Address);\r\n            Assert.AreEqual(\"A3:C6\", ws.Names[\"NameA3C6\"].Address);\r\n\r\n            ws.Cells[\"B2:D5\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(\"B1:D2\", ws.Names[\"NameB1D2\"].Address);\r\n            Assert.AreEqual(\"B2:C4\", ws.Names[\"NameB2C4\"].Address);\r\n            Assert.AreEqual(\"A3:C6\", ws.Names[\"NameA3C6\"].Address);\r\n\r\n            ws.Cells[\"A2:C7\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(\"B1:D2\", ws.Names[\"NameB1D2\"].Address);\r\n            Assert.AreEqual(\"#REF!\", ws.Names[\"NameB2C4\"].Address);\r\n            Assert.AreEqual(\"#REF!\", ws.Names[\"NameA3C6\"].Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateSharedFormulasDeleteShiftUp()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeFormulaUp\");\r\n            ws.Cells[\"B1:D2\"].Formula = \"A1\";\r\n            ws.Cells[\"C3:F4\"].Formula = \"A1\";\r\n\r\n            //Act\r\n            ws.Cells[\"B1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"A2\", ws.Cells[\"B1\"].Formula);\r\n            Assert.AreEqual(\"\",ws.Cells[\"B2\"].Formula);\r\n            Assert.AreEqual(\"#REF!\", ws.Cells[\"C1\"].Formula);\r\n            Assert.AreEqual(\"C1\", ws.Cells[\"D1\"].Formula);\r\n            Assert.AreEqual(\"A1\", ws.Cells[\"C3\"].Formula);\r\n            Assert.AreEqual(\"#REF!\", ws.Cells[\"D3\"].Formula);\r\n            Assert.AreEqual(\"C1\", ws.Cells[\"E3\"].Formula);\r\n            Assert.AreEqual(\"D1\", ws.Cells[\"F3\"].Formula);\r\n\r\n\r\n            Assert.AreEqual(\"D2\", ws.Cells[\"F4\"].Formula);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateSharedFormulasDeleteShiftLeft()\r\n        {\r\n            //Setup\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteRangeFormulaLeft\");\r\n            ws.Cells[\"B1:D2\"].Formula = \"A1\";\r\n            ws.Cells[\"C3:F4\"].Formula = \"A1\";\r\n\r\n            //Act\r\n            ws.Cells[\"B1\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            //Assert\r\n            Assert.AreEqual(\"#REF!\", ws.Cells[\"B1\"].Formula);\r\n            Assert.AreEqual(\"B1\", ws.Cells[\"C1\"].Formula);\r\n            Assert.AreEqual(\"\", ws.Cells[\"D1\"].Formula);\r\n            Assert.AreEqual(\"A2\", ws.Cells[\"B2\"].Formula);\r\n            Assert.AreEqual(\"A1\", ws.Cells[\"C3\"].Formula);\r\n            Assert.AreEqual(\"#REF!\", ws.Cells[\"D3\"].Formula);\r\n            Assert.AreEqual(\"B1\", ws.Cells[\"E3\"].Formula);\r\n            Assert.AreEqual(\"C1\", ws.Cells[\"F3\"].Formula);\r\n\r\n\r\n            Assert.AreEqual(\"A1\", ws.Cells[\"C3\"].Formula);\r\n            Assert.AreEqual(\"D2\", ws.Cells[\"F4\"].Formula);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateDeleteMergedCellsUp()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"C3:E4\"].Merge = true;\r\n                ws.Cells[\"C2:E2\"].Delete(eShiftTypeDelete.Up);\r\n\r\n                Assert.AreEqual(\"C2:E3\", ws.MergedCells[0]);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteMergedCellsLeft()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"C2:E3\"].Merge = true;\r\n                ws.Cells[\"B2:B3\"].Delete(eShiftTypeDelete.Left);\r\n\r\n                Assert.AreEqual(\"B2:D3\", ws.MergedCells[0]);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateDeleteIntoMergedCellsPartialLeftThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"B2:D3\"].Merge = true;\r\n                ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateDeleteIntoMergedCellsPartialUpThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"B2:D3\"].Merge = true;\r\n                ws.Cells[\"C1\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteIntoMergedCellsPartialLeftShouldNotThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"B2:D3\"].Merge = true;\r\n                ws.Cells[\"C1\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteIntoMergedCellsPartialUpShouldNotThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"B2:D3\"].Merge = true;\r\n                ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateDeleteMergedCellsShouldShiftUp()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"B3:D4\"].Merge = true;\r\n                ws.Cells[\"A1:D1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n                Assert.AreEqual(\"B2:D3\", ws.MergedCells[0]);\r\n                Assert.IsFalse(ws.Cells[\"B4\"].Merge);\r\n                Assert.IsFalse(ws.Cells[\"C4\"].Merge);\r\n                Assert.IsFalse(ws.Cells[\"D4\"].Merge);\r\n\r\n                Assert.IsTrue(ws.Cells[\"B2\"].Merge);\r\n                Assert.IsTrue(ws.Cells[\"C2\"].Merge);\r\n                Assert.IsTrue(ws.Cells[\"D2\"].Merge);\r\n                Assert.IsTrue(ws.Cells[\"B3\"].Merge);\r\n                Assert.IsTrue(ws.Cells[\"C3\"].Merge);\r\n                Assert.IsTrue(ws.Cells[\"D3\"].Merge);\r\n\r\n                ws.DeleteRow(1);\r\n                Assert.AreEqual(\"B1:D2\", ws.MergedCells[0]);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteMergedCellsShouldBeNull()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergedCells\");\r\n                ws.Cells[\"B3:D3\"].Merge = true;\r\n                ws.Cells[\"B3:D3\"].Delete(eShiftTypeDelete.Up);\r\n\r\n                Assert.IsFalse(ws.Cells[\"B3\"].Merge);\r\n                Assert.IsFalse(ws.Cells[\"C3\"].Merge);\r\n                Assert.IsFalse(ws.Cells[\"D3\"].Merge);\r\n                Assert.IsNull(ws.MergedCells[0]);\r\n\r\n                ws.Cells[\"B3:D3\"].Merge = true;\r\n\r\n                ws.DeleteRow(3);\r\n                Assert.IsFalse(ws.Cells[\"B3\"].Merge);\r\n                Assert.IsFalse(ws.Cells[\"C3\"].Merge);\r\n                Assert.IsFalse(ws.Cells[\"D3\"].Merge);\r\n                Assert.IsNull(ws.MergedCells[1]);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateDeleteFromTablePartialLeftThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDelete\");\r\n                ws.Tables.Add(ws.Cells[\"B2:D3\"], \"table1\");\r\n                ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateDeleteFromTablePartialUpThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDelete\");\r\n                ws.Tables.Add(ws.Cells[\"B2:D3\"], \"table1\");\r\n                ws.Cells[\"C1\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeletFromTablePartialLeftShouldNotThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDelete\");\r\n                ws.Tables.Add(ws.Cells[\"B2:D3\"], \"table1\");\r\n                ws.Cells[\"C1\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteFromTablePartialUpShouldNotThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDelete\");\r\n                ws.Tables.Add(ws.Cells[\"B2:D3\"], \"table1\");\r\n                ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateDeleteFromPivotTablePartialLeftThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDelete\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                ws.PivotTables.Add(ws.Cells[\"B2:D3\"], ws.Cells[\"E5:F6\"], \"table1\");\r\n                ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateDeleteFromPivotTablePartialUpThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDelete\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                ws.PivotTables.Add(ws.Cells[\"B2:D3\"], ws.Cells[\"E5:F6\"], \"table1\");\r\n                ws.Cells[\"C1\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteFromPivotTablePartialLeftShouldNotThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDelte\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                ws.PivotTables.Add(ws.Cells[\"B2:D3\"], ws.Cells[\"E5:F6\"], \"table1\");\r\n                ws.Cells[\"C1\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteFromPivotTablePartialUpShouldNotThrowsException()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDelete\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                ws.PivotTables.Add(ws.Cells[\"B2:D3\"], ws.Cells[\"E5:F6\"], \"table1\");\r\n                ws.Cells[\"A2\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteFromTableShouldShiftUp()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDeleteShiftUp\");\r\n                var tbl = ws.Tables.Add(ws.Cells[\"B9:D10\"], \"table1\");\r\n                ws.Cells[\"B2:D2\"].Delete(eShiftTypeDelete.Up);\r\n                Assert.AreEqual(\"B8:D9\", tbl.Address.Address);\r\n\r\n                ws.Cells[\"A3:D3\"].Delete(eShiftTypeDelete.Up);\r\n                Assert.AreEqual(\"B7:D8\", tbl.Address.Address);\r\n\r\n                ws.Cells[\"B3:E3\"].Delete(eShiftTypeDelete.Up);\r\n                Assert.AreEqual(\"B6:D7\", tbl.Address.Address);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeleteTableShouldShiftLeft()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDeleteShiftLeft\");\r\n                var tbl = ws.Tables.Add(ws.Cells[\"E2:F4\"], \"table1\");\r\n                ws.Cells[\"B2:B4\"].Delete(eShiftTypeDelete.Left);\r\n                Assert.AreEqual(\"D2:E4\", tbl.Address.Address);\r\n\r\n                ws.Cells[\"B1:B4\"].Delete(eShiftTypeDelete.Left);\r\n                Assert.AreEqual(\"C2:D4\", tbl.Address.Address);\r\n\r\n                ws.Cells[\"B2:B6\"].Delete(eShiftTypeDelete.Left);\r\n                Assert.AreEqual(\"B2:C4\", tbl.Address.Address);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteEntireTableRangeShouldDeleteTable()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"TableDeleteFull\");\r\n                var tbl = ws.Tables.Add(ws.Cells[\"E2:F4\"], \"table1\");\r\n                //Act\r\n                ws.Cells[\"E2:F4\"].Delete(eShiftTypeDelete.Left);\r\n                //Assert\r\n                Assert.AreEqual(0, ws.Tables.Count);\r\n                Assert.IsNull(tbl.Address);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteEntirePivotTableRangeShouldDeletePivotTable()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                //Setup\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDeleteFull\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                var pt = ws.PivotTables.Add(ws.Cells[\"B2:D3\"], ws.Cells[\"E5:F6\"], \"pivottable1\");\r\n                //Act\r\n                ws.Cells[\"B2:D3\"].Delete\r\n                    (eShiftTypeDelete.Left);\r\n                //Assert\r\n                Assert.AreEqual(0, ws.PivotTables.Count);\r\n                Assert.IsNull(pt.Address);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateDeletePivotTableShouldShiftUp()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDeleteShiftUp\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                var pt = ws.PivotTables.Add(ws.Cells[\"B5:D6\"], ws.Cells[\"E5:F6\"], \"pivottable1\");\r\n                ws.Cells[\"B2:D2\"].Delete(eShiftTypeDelete.Up);\r\n                Assert.AreEqual(\"B4:D5\", pt.Address.Address);\r\n\r\n                ws.Cells[\"A2:E2\"].Delete(eShiftTypeDelete.Up);\r\n                Assert.AreEqual(\"B3:D4\", pt.Address.Address);\r\n\r\n                ws.Cells[\"B5:D5\"].Delete(eShiftTypeDelete.Up);\r\n                Assert.AreEqual(\"B3:D4\", pt.Address.Address);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDeletePivotTableShouldShiftLeft()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"PivotTableDeleteShiftLeft\");\r\n                ws.Cells[\"E5\"].Value = \"E5\";\r\n                ws.Cells[\"F5\"].Value = \"F5\";\r\n                var pt = ws.PivotTables.Add(ws.Cells[\"F2:G3\"], ws.Cells[\"E5:F6\"], \"pivottable1\");\r\n                ws.Cells[\"B2:B3\"].Delete(eShiftTypeDelete.Left);\r\n                Assert.AreEqual(\"E2:F3\", pt.Address.Address);\r\n                ws.Cells[\"B1:B4\"].Delete(eShiftTypeDelete.Left);\r\n                Assert.AreEqual(\"D2:E3\", pt.Address.Address);\r\n                ws.Cells[\"F2:F3\"].Delete(eShiftTypeDelete.Left);\r\n                Assert.AreEqual(\"D2:E3\", pt.Address.Address);\r\n            }\r\n        }\r\n\r\n        #region Data validation\r\n        [TestMethod]\r\n        public void ValidateDatavalidationFullShiftUp()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValShiftUpFull\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"A1:E1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B1:E4\", any.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDatavalidationPartialShiftUp_Left()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValPartialUpFullL\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"A1:C1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B1:C4,D2:E5\", any.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDatavalidationPartialShiftUp_Inside()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValPartialUpFullI\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"C1:D1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B2:B5,C1:D4,E2:E5\", any.Address.Address);\r\n        }\r\n\r\n\r\n        [TestMethod]\r\n        public void ValidateDatavalidationPartialShiftUp_Right()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValPartialUpFullR\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"C1:E1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B2:B5,C1:E4\", any.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDatavalidationPartialShiftLeft_Top()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValPartialLeftFullTop\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"A2:A4\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"A2:D4,B5:E5\", any.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateDatavalidationPartialShiftLeft_Inside()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValPartialLeftFullIns\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"A3:A4\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"B2:E2,A3:D4,B5:E5\", any.Address.Address);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateDatavalPartialShiftLeft_Bottom()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValPartialLeftFullBottom\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"A3:A6\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"B2:E2,A3:D5\", any.Address.Address);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateDatavalidationFullShiftLeft()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DataValidationShiftLeftFull\");\r\n            var any = ws.DataValidations.AddAnyValidation(\"B2:E5\");\r\n\r\n            ws.Cells[\"A2:A5\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"A2:D5\", any.Address.Address);\r\n        }\r\n        #endregion\r\n        #region Conditional formatting\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingFullShiftUp()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormShiftUpFull\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n            ws.Cells[\"A1:E1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B1:E4\", cf.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingPartialShiftUp_Left()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialUpFullL\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"A2:C2\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B2:C4,D2:E5\", cf.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingShiftUp_Inside()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialUpFullI\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"C2:D2\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B2:B5,C2:D4,E2:E5\", cf.Address.Address);\r\n        }\r\n\r\n\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingShiftUp_Right()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialUpFullR\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"C2:E3\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.AreEqual(\"B2:B5,C2:E3\", cf.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingPartialShiftLeft_Top()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialRightFullTop\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"A2:A4\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"A2:D4,B5:E5\", cf.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingPartialShiftLeft_Inside()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialRightFullIns\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"A3:A4\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"B2:E2,A3:D4,B5:E5\", cf.Address.Address);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingShiftLeft_Bottom()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialDownFullBottom\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"A3:A6\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"B2:E2,A3:D5\", cf.Address.Address);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingFullShiftLeft()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormShiftRightFull\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.Cells[\"A2:A5\"].Delete(eShiftTypeDelete.Left);\r\n\r\n            Assert.AreEqual(\"A2:D5\", cf.Address.Address);\r\n        }\r\n        #endregion\r\n\r\n        [TestMethod]\r\n        public void ValidateFilterShiftUp()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"AutoFilterShiftUp\");\r\n            LoadTestdata(ws);\r\n            ws.AutoFilterAddress = new ExcelAddressBase(\"A2:D100\");\r\n            ws.Cells[\"A1:D1\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(\"A1:D99\", ws.AutoFilterAddress.Address);\r\n            ws.Cells[\"A50:D50\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(\"A1:D98\", ws.AutoFilterAddress.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFilterDeleteFirstRow()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"AutoFilterDeleteFirstRow\");\r\n            LoadTestdata(ws);\r\n            ws.AutoFilterAddress = new ExcelAddressBase(\"A1:D100\");\r\n            ws.Cells[\"A1:D1\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.IsNull(ws.AutoFilterAddress);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFilterShiftLeft()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"AutoFilterShiftLeft\");\r\n            LoadTestdata(ws, 100, 2);\r\n            ws.AutoFilterAddress = new ExcelAddressBase(\"B1:E100\");\r\n            ws.Cells[\"A1:A100\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(\"A1:D100\", ws.AutoFilterAddress.Address);\r\n            ws.Cells[\"C1:C100\"].Delete(eShiftTypeDelete.Left); \r\n            Assert.AreEqual(\"A1:C100\", ws.AutoFilterAddress.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFilterDeleteRow()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"AutoFilterDeleteRow\");\r\n            LoadTestdata(ws);\r\n            ws.AutoFilterAddress = new ExcelAddressBase(\"A2:D100\");\r\n            ws.DeleteRow(1, 1);\r\n            Assert.AreEqual(\"A1:D99\", ws.AutoFilterAddress.Address);\r\n            ws.DeleteRow(5, 2);\r\n            Assert.AreEqual(\"A1:D97\", ws.AutoFilterAddress.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFilterDeleteRowFirstRow()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"AutoFilterDeleteRowFirstRow\");\r\n            LoadTestdata(ws);\r\n            ws.AutoFilterAddress = new ExcelAddressBase(\"A1:D100\");\r\n            ws.DeleteRow(1);\r\n            Assert.IsNull(ws.AutoFilterAddress);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateFilterDeleteColumn()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"AutoFilterDeleteCol\");\r\n            LoadTestdata(ws);\r\n            ws.AutoFilterAddress = new ExcelAddressBase(\"B1:E100\");\r\n            ws.DeleteColumn(1, 1);\r\n            Assert.AreEqual(\"A1:D100\", ws.AutoFilterAddress.Address);\r\n            ws.DeleteColumn(1, 2);\r\n            Assert.AreEqual(\"A1:B100\", ws.AutoFilterAddress.Address);\r\n        }\r\n\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateFilterShiftUpPartial()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"AutoFilterShiftUpPart\");\r\n                LoadTestdata(ws);\r\n                ws.AutoFilterAddress = new ExcelAddressBase(\"A1:D100\");\r\n                ws.Cells[\"A1:C1\"].Delete(eShiftTypeDelete.Up);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidOperationException))]\r\n        public void ValidateFilterShiftLeftPartial()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"AutoFilterShiftLeftPart\");\r\n                LoadTestdata(ws);\r\n                ws.AutoFilterAddress = new ExcelAddressBase(\"A1:D100\");\r\n                ws.Cells[\"A1:A99\"].Delete(eShiftTypeDelete.Left);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateSparkLineShiftLeft()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"SparklineShiftLeft\");\r\n            LoadTestdata(ws, 10, 2);\r\n            ws.SparklineGroups.Add(OfficeOpenXml.Sparkline.eSparklineType.Line, ws.Cells[\"F2:F10\"], ws.Cells[\"B2:E10\"]);\r\n            ws.Cells[\"F5\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(\"F6\", ws.SparklineGroups[0].Sparklines[3].Cell.Address);\r\n            ws.Cells[\"A1:A10\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(\"A2:D10\", ws.SparklineGroups[0].DataRange.Address);\r\n            ws.Cells[\"B2:D2\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(\"SparklineShiftLeft!A2\", ws.SparklineGroups[0].Sparklines[0].RangeAddress.Address);\r\n            ws.Cells[\"A3:D3\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.IsNull(ws.SparklineGroups[0].Sparklines[1].RangeAddress);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateSparkLineShiftUp()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"SparklineShiftUp\");\r\n            LoadTestdata(ws, 10);\r\n            ws.SparklineGroups.Add(OfficeOpenXml.Sparkline.eSparklineType.Column, ws.Cells[\"F2:F10\"], ws.Cells[\"B2:E10\"]);\r\n            ws.Cells[\"F5\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(\"F5\", ws.SparklineGroups[0].Sparklines[3].Cell.Address);\r\n            Assert.AreEqual(\"SparklineShiftUp!B6:E6\", ws.SparklineGroups[0].Sparklines[3].RangeAddress.Address);\r\n            ws.Cells[\"A1:E1\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.AreEqual(\"B1:E9\", ws.SparklineGroups[0].DataRange.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateSparkLineDeleteRow()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"SparklineDeleteRow\");\r\n            LoadTestdata(ws, 10);\r\n            ws.SparklineGroups.Add(OfficeOpenXml.Sparkline.eSparklineType.Column, ws.Cells[\"E2:E10\"], ws.Cells[\"A2:D10\"]);\r\n            ws.DeleteRow(5, 1);\r\n            Assert.AreEqual(\"E5\", ws.SparklineGroups[0].Sparklines[3].Cell.Address);\r\n            ws.DeleteRow(1, 1);\r\n            Assert.AreEqual(\"A1:D8\", ws.SparklineGroups[0].DataRange.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateSparkLineInsertColumn()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"SparklineDeleteColumn\");\r\n            LoadTestdata(ws, 10);\r\n            ws.SparklineGroups.Add(OfficeOpenXml.Sparkline.eSparklineType.Column, ws.Cells[\"E2:E10\"], ws.Cells[\"A2:D10\"]);\r\n            ws.DeleteColumn(2, 1);\r\n            Assert.AreEqual(\"D5\", ws.SparklineGroups[0].Sparklines[3].Cell.Address);\r\n            Assert.AreEqual(\"A5:C5\", ws.SparklineGroups[0].Sparklines[3].RangeAddress.FirstAddress);\r\n            ws.DeleteColumn(1, 1);\r\n            Assert.AreEqual(\"A2:B10\", ws.SparklineGroups[0].DataRange.Address);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteFromTemplate1()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"InsertDeleteTemplate.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"C3R\"];\r\n                var ws2 = ws.Workbook.Worksheets.Add(\"C3R-2\", ws);\r\n                ws.Cells[\"G49:G52\"].Delete(eShiftTypeDelete.Up);\r\n                ws2.Cells[\"G49:G52\"].Delete(eShiftTypeDelete.Left);\r\n\r\n                SaveWorkbook(\"DeleteTest1.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteFromTemplate2()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"InsertDeleteTemplate.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"C3R\"];\r\n                var ws2 = ws.Workbook.Worksheets.Add(\"C3R-2\", ws);\r\n                ws.Cells[\"L49:L52\"].Delete(eShiftTypeDelete.Up);\r\n                ws2.Cells[\"L49:L52\"].Delete(eShiftTypeDelete.Left);\r\n\r\n                SaveWorkbook(\"DeleteTest2.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void ValidateConditionalFormattingDeleteColumnMultiRange()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"CondFormPartialUpMR\");\r\n            var cf = ws.ConditionalFormatting.AddAboveAverage(new ExcelAddress(\"B2:E5,D3:E5\"));\r\n            cf.Style.Fill.BackgroundColor.SetColor(eThemeSchemeColor.Accent1);\r\n\r\n            ws.DeleteColumn(4);\r\n\r\n            Assert.AreEqual(\"B2:D5,D3:D5\", cf.Address.Address);\r\n        }\r\n        [TestMethod]\r\n        public void ValidateColumnShifting()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"ColumnDelete\");\r\n            var col1 = ws.Column(3);\r\n            col1.Width = 3;\r\n            var col2 = ws.Column(4);\r\n            col2.Width = 4;\r\n            var col3 = ws.Column(6);\r\n            col3.Width = 6;\r\n            col3.ColumnMax = 8;\r\n\r\n            var col4 = ws.Column(14);\r\n            col4.Width = 14;\r\n            col4.ColumnMax = 18;\r\n\r\n            ws.DeleteColumn(1, 2);\r\n            Assert.AreEqual(3, ws.Column(1).Width);\r\n            Assert.AreEqual(4, ws.Column(2).Width);\r\n            Assert.AreEqual(6, ws.Column(4).Width);\r\n            ws.DeleteColumn(2, 2);\r\n            Assert.AreEqual(6, ws.Column(2).Width);\r\n            Assert.AreEqual(6, ws.Column(3).Width);\r\n            Assert.AreEqual(6, ws.Column(4).Width);\r\n            ws.DeleteColumn(1, 2);\r\n            Assert.AreEqual(6, ws.Column(1).Width);\r\n            Assert.AreEqual(6, ws.Column(2).Width);\r\n            Assert.AreEqual(9.140625, ws.Column(3).Width);\r\n        }\r\n    }\r\n}\r\n", "test_imports": ["using Microsoft.VisualStudio.TestTools.UnitTesting;", "using OfficeOpenXml;", "using OfficeOpenXml.Drawing;", "using System;", "using System.Collections.Generic;", "using System.Linq;", "using System.Text;", "using System.Threading;", "using System.Threading.Tasks;"], "test_namespace": "EPPlusTest.Core.Range.Delete", "test_class_name": "RangeDeleteTests", "test_file_path": "EPPlusTest/Core/Range/Delete/RangeDeleteTests.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}, {"tests": "/*******************************************************************************\r\n * You may amend and distribute as you like, but don't remove this header!\r\n *\r\n * Required Notice: Copyright (C) EPPlus Software AB. \r\n * https://epplussoftware.com\r\n *\r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 2.1 of the License, or (at your option) any later version.\r\n\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\n * See the GNU Lesser General Public License for more details.\r\n *\r\n * The GNU Lesser General Public License can be viewed at http://www.opensource.org/licenses/lgpl-license.php\r\n * If you unfamiliar with this license or have questions about it, here is an http://www.gnu.org/licenses/gpl-faq.html\r\n *\r\n * All code and executables are provided \"\" as is \"\" with no warranty either express or implied. \r\n * The author accepts no liability for any damage or loss of business that this product may cause.\r\n *\r\n * Code change notes:\r\n * \r\n  Date               Author                       Change\r\n *******************************************************************************\r\n  01/27/2020         EPPlus Software AB       Initial release EPPlus 5\r\n *******************************************************************************/\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing System.IO;\r\nusing OfficeOpenXml;\r\nusing OfficeOpenXml.Style;\r\nusing System.Data;\r\nusing OfficeOpenXml.Table;\r\nusing System.Collections.Generic;\r\nusing OfficeOpenXml.Table.PivotTable;\r\nusing System.Text;\r\nusing System.Globalization;\r\nusing OfficeOpenXml.Drawing;\r\nusing System.Threading;\r\nusing OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup;\r\nusing System.Threading.Tasks;\r\nusing OfficeOpenXml.FormulaParsing.Excel.Functions.Math;\r\nusing OfficeOpenXml.FormulaParsing.ExcelUtilities;\r\n\r\nnamespace EPPlusTest\r\n{\r\n    /// <summary>\r\n    /// This class contains testcases for issues on Codeplex and Github.\r\n    /// All tests requiering an template should be set to ignored as it's not practical to include all xlsx templates in the project.\r\n    /// </summary>\r\n    [TestClass]\r\n    public class Issues : TestBase\r\n    {\r\n        [ClassInitialize]\r\n        public static void Init(TestContext context)\r\n        {\r\n        }\r\n        [ClassCleanup]\r\n        public static void Cleanup()\r\n        {\r\n        }\r\n        [TestInitialize]\r\n        public void Initialize()\r\n        {\r\n        }\r\n        [TestMethod]\r\n        public void Issue15041()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"Test\");\r\n                ws.Cells[\"A1\"].Value = 202100083;\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"00\\\\.00\\\\.00\\\\.000\\\\.0\";\r\n                Assert.AreEqual(\"02.02.10.008.3\", ws.Cells[\"A1\"].Text);\r\n                ws.Dispose();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15031()\r\n        {\r\n            var d = OfficeOpenXml.Utils.ConvertUtil.GetValueDouble(new TimeSpan(35, 59, 1));\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"Test\");\r\n                ws.Cells[\"A1\"].Value = d;\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"[t]:mm:ss\";\r\n                ws.Dispose();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15022()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"Test\");\r\n                ws.Cells.AutoFitColumns();\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"0\";\r\n                ws.Cells.AutoFitColumns();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15056()\r\n        {\r\n            using (var ep = OpenPackage(@\"output.xlsx\", true))\r\n            {\r\n                var s = ep.Workbook.Worksheets.Add(\"test\");\r\n                s.Cells[\"A1:A2\"].Formula = \"\"; // or null, or non-empty whitespace, with same result\r\n                ep.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15113()\r\n        {\r\n            var p = new ExcelPackage();\r\n            var ws = p.Workbook.Worksheets.Add(\"t\");\r\n            ws.Cells[\"A1\"].Value = \" Performance Update\";\r\n            ws.Cells[\"A1:H1\"].Merge = true;\r\n            ws.Cells[\"A1:H1\"].Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous;\r\n            ws.Cells[\"A1:H1\"].Style.Font.Size = 14;\r\n            ws.Cells[\"A1:H1\"].Style.Font.Color.SetColor(Color.Red);\r\n            ws.Cells[\"A1:H1\"].Style.Font.Bold = true;\r\n            SaveWorkbook(@\"merge.xlsx\", p);\r\n            p.Dispose();\r\n        }\r\n        [TestMethod]\r\n        public void Issue15141()\r\n        {\r\n            using (ExcelPackage package = new ExcelPackage())\r\n            using (ExcelWorksheet sheet = package.Workbook.Worksheets.Add(\"Test\"))\r\n            {\r\n                sheet.Cells.Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n                sheet.Cells.Style.Fill.BackgroundColor.SetColor(Color.White);\r\n                sheet.Cells[1, 1, 1, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);\r\n                sheet.Cells[1, 5, 2, 5].Style.Border.BorderAround(ExcelBorderStyle.Thin);\r\n                ExcelColumn column = sheet.Column(3); // fails with exception\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue15123()\r\n        {\r\n            var p = new ExcelPackage();\r\n            var ws = p.Workbook.Worksheets.Add(\"t\");\r\n            using (var dt = new DataTable())\r\n            {\r\n                dt.Columns.Add(\"String\", typeof(string));\r\n                dt.Columns.Add(\"Int\", typeof(int));\r\n                dt.Columns.Add(\"Bool\", typeof(bool));\r\n                dt.Columns.Add(\"Double\", typeof(double));\r\n                dt.Columns.Add(\"Date\", typeof(DateTime));\r\n\r\n                var dr = dt.NewRow();\r\n                dr[0] = \"Row1\";\r\n                dr[1] = 1;\r\n                dr[2] = true;\r\n                dr[3] = 1.5;\r\n                dr[4] = new DateTime(2014, 12, 30);\r\n                dt.Rows.Add(dr);\r\n\r\n                dr = dt.NewRow();\r\n                dr[0] = \"Row2\";\r\n                dr[1] = 2;\r\n                dr[2] = false;\r\n                dr[3] = 2.25;\r\n                dr[4] = new DateTime(2014, 12, 31);\r\n                dt.Rows.Add(dr);\r\n\r\n                ws.Cells[\"A1\"].LoadFromDataTable(dt, true);\r\n                ws.Cells[\"D2:D3\"].Style.Numberformat.Format = \"(* #,##0.00);_(* (#,##0.00);_(* \\\"-\\\"??_);(@)\";\r\n\r\n                ws.Cells[\"E2:E3\"].Style.Numberformat.Format = \"mm/dd/yyyy\";\r\n                ws.Cells.AutoFitColumns();\r\n                Assert.AreNotEqual(ws.Cells[2, 5].Text, \"\");\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15128()\r\n        {\r\n            var p = new ExcelPackage();\r\n            var ws = p.Workbook.Worksheets.Add(\"t\");\r\n            ws.Cells[\"A1\"].Value = 1;\r\n            ws.Cells[\"B1\"].Value = 2;\r\n            ws.Cells[\"B2\"].Formula = \"A1+$B$1\";\r\n            ws.Cells[\"C1\"].Value = \"Test\";\r\n            ws.Cells[\"A1:B2\"].Copy(ws.Cells[\"C1\"]);\r\n            ws.Cells[\"B2\"].Copy(ws.Cells[\"D1\"]);\r\n            SaveWorkbook(\"Copy.xlsx\", p);\r\n            p.Dispose();\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IssueMergedCells()\r\n        {\r\n            var p = new ExcelPackage();\r\n            var ws = p.Workbook.Worksheets.Add(\"t\");\r\n            ws.Cells[\"A1:A5,C1:C8\"].Merge = true;\r\n            ws.Cells[\"C1:C8\"].Merge = false;\r\n            ws.Cells[\"A1:A8\"].Merge = false;\r\n            p.Dispose();\r\n        }\r\n\r\n        public class cls1\r\n        {\r\n            public int prop1 { get; set; }\r\n        }\r\n\r\n        public class cls2 : cls1\r\n        {\r\n            public string prop2 { get; set; }\r\n        }\r\n        [TestMethod]\r\n        public void LoadFromColIssue()\r\n        {\r\n            var l = new List<cls1>();\r\n\r\n            l.Add(new cls1() { prop1 = 1 });\r\n            l.Add(new cls2() { prop1 = 1, prop2 = \"test1\" });\r\n\r\n            var p = new ExcelPackage();\r\n            var ws = p.Workbook.Worksheets.Add(\"Test\");\r\n\r\n            ws.Cells[\"A1\"].LoadFromCollection(l, true, TableStyles.Light16, BindingFlags.Instance | BindingFlags.Public,\r\n                new MemberInfo[] { typeof(cls2).GetProperty(\"prop2\") });\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue15168()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Test\");\r\n                ws.Cells[1, 1].Value = \"A1\";\r\n                ws.Cells[2, 1].Value = \"A2\";\r\n\r\n                ws.Cells[2, 1].Value = ws.Cells[1, 1].Value;\r\n                Assert.AreEqual(\"A1\", ws.Cells[1, 1].Value);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15179()\r\n        {\r\n            using (var package = new OfficeOpenXml.ExcelPackage())\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"MergeDeleteBug\");\r\n                ws.Cells[\"E3:F3\"].Merge = true;\r\n                ws.Cells[\"E3:F3\"].Merge = false;\r\n                ws.DeleteRow(2, 6);\r\n                ws.Cells[\"A1\"].Value = 0;\r\n                var s = ws.Cells[\"A1\"].Value.ToString();\r\n\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15212()\r\n        {\r\n            var s = \"_(\\\"R$ \\\"* #,##0.00_);_(\\\"R$ \\\"* (#,##0.00);_(\\\"R$ \\\"* \\\"-\\\"??_);_(@_) )\";\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"StyleBug\");\r\n                ws.Cells[\"A1\"].Value = 5698633.64;\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = s;\r\n                var t = ws.Cells[\"A1\"].Text;\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        /**** Pivottable issue ****/\r\n        public void Issue()\r\n        {\r\n\r\n            using (var p = OpenPackage(\"pivottable.xlsx\", true))\r\n            {\r\n                LoadData(p);\r\n                BuildPivotTable1(p);\r\n                BuildPivotTable2(p);\r\n                p.Save();\r\n            }\r\n        }\r\n\r\n        private void LoadData(ExcelPackage p)\r\n        {\r\n            // add a new worksheet to the empty workbook\r\n            ExcelWorksheet wsData = p.Workbook.Worksheets.Add(\"Data\");\r\n            //Add the headers\r\n            wsData.Cells[1, 1].Value = \"INVOICE_DATE\";\r\n            wsData.Cells[1, 2].Value = \"TOTAL_INVOICE_PRICE\";\r\n            wsData.Cells[1, 3].Value = \"EXTENDED_PRICE_VARIANCE\";\r\n            wsData.Cells[1, 4].Value = \"AUDIT_LINE_STATUS\";\r\n            wsData.Cells[1, 5].Value = \"RESOLUTION_STATUS\";\r\n            wsData.Cells[1, 6].Value = \"COUNT\";\r\n\r\n            //Add some items...\r\n            wsData.Cells[\"A2\"].Value = Convert.ToDateTime(\"04/2/2012\");\r\n            wsData.Cells[\"B2\"].Value = 33.63;\r\n            wsData.Cells[\"C2\"].Value = (-.87);\r\n            wsData.Cells[\"D2\"].Value = \"Unfavorable Price Variance\";\r\n            wsData.Cells[\"E2\"].Value = \"Pending\";\r\n            wsData.Cells[\"F2\"].Value = 1;\r\n\r\n            wsData.Cells[\"A3\"].Value = Convert.ToDateTime(\"04/2/2012\");\r\n            wsData.Cells[\"B3\"].Value = 43.14;\r\n            wsData.Cells[\"C3\"].Value = (-1.29);\r\n            wsData.Cells[\"D3\"].Value = \"Unfavorable Price Variance\";\r\n            wsData.Cells[\"E3\"].Value = \"Pending\";\r\n            wsData.Cells[\"F3\"].Value = 1;\r\n\r\n            wsData.Cells[\"A4\"].Value = Convert.ToDateTime(\"11/8/2011\");\r\n            wsData.Cells[\"B4\"].Value = 55;\r\n            wsData.Cells[\"C4\"].Value = (-2.87);\r\n            wsData.Cells[\"D4\"].Value = \"Unfavorable Price Variance\";\r\n            wsData.Cells[\"E4\"].Value = \"Pending\";\r\n            wsData.Cells[\"F4\"].Value = 1;\r\n\r\n            wsData.Cells[\"A5\"].Value = Convert.ToDateTime(\"11/8/2011\");\r\n            wsData.Cells[\"B5\"].Value = 38.72;\r\n            wsData.Cells[\"C5\"].Value = (-5.00);\r\n            wsData.Cells[\"D5\"].Value = \"Unfavorable Price Variance\";\r\n            wsData.Cells[\"E5\"].Value = \"Pending\";\r\n            wsData.Cells[\"F5\"].Value = 1;\r\n\r\n            wsData.Cells[\"A6\"].Value = Convert.ToDateTime(\"3/4/2011\");\r\n            wsData.Cells[\"B6\"].Value = 77.44;\r\n            wsData.Cells[\"C6\"].Value = (-1.55);\r\n            wsData.Cells[\"D6\"].Value = \"Unfavorable Price Variance\";\r\n            wsData.Cells[\"E6\"].Value = \"Pending\";\r\n            wsData.Cells[\"F6\"].Value = 1;\r\n\r\n            wsData.Cells[\"A7\"].Value = Convert.ToDateTime(\"3/4/2011\");\r\n            wsData.Cells[\"B7\"].Value = 127.55;\r\n            wsData.Cells[\"C7\"].Value = (-10.50);\r\n            wsData.Cells[\"D7\"].Value = \"Unfavorable Price Variance\";\r\n            wsData.Cells[\"E7\"].Value = \"Pending\";\r\n            wsData.Cells[\"F7\"].Value = 1;\r\n\r\n            using (var range = wsData.Cells[2, 1, 7, 1])\r\n            {\r\n                range.Style.Numberformat.Format = \"mm-dd-yy\";\r\n            }\r\n\r\n            wsData.Cells.AutoFitColumns(0);\r\n        }\r\n        private void BuildPivotTable1(ExcelPackage p)\r\n        {\r\n            var wsData = p.Workbook.Worksheets[\"Data\"];\r\n            var totalRows = wsData.Dimension.Address;\r\n            ExcelRange data = wsData.Cells[totalRows];\r\n\r\n            var wsAuditPivot = p.Workbook.Worksheets.Add(\"Pivot1\");\r\n\r\n            var pivotTable1 = wsAuditPivot.PivotTables.Add(wsAuditPivot.Cells[\"A7:C30\"], data, \"PivotAudit1\");\r\n            pivotTable1.ColumnGrandTotals = true;\r\n            var rowField = pivotTable1.RowFields.Add(pivotTable1.Fields[\"INVOICE_DATE\"]);\r\n\r\n\r\n            rowField.AddDateGrouping(eDateGroupBy.Years);\r\n            var yearField = pivotTable1.Fields.GetDateGroupField(eDateGroupBy.Years);\r\n            yearField.Name = \"Year\";\r\n\r\n            var rowField2 = pivotTable1.RowFields.Add(pivotTable1.Fields[\"AUDIT_LINE_STATUS\"]);\r\n\r\n            var TotalSpend = pivotTable1.DataFields.Add(pivotTable1.Fields[\"TOTAL_INVOICE_PRICE\"]);\r\n            TotalSpend.Name = \"Total Spend\";\r\n            TotalSpend.Format = \"$##,##0\";\r\n\r\n\r\n            var CountInvoicePrice = pivotTable1.DataFields.Add(pivotTable1.Fields[\"COUNT\"]);\r\n            CountInvoicePrice.Name = \"Total Lines\";\r\n            CountInvoicePrice.Format = \"##,##0\";\r\n\r\n            pivotTable1.DataOnRows = false;\r\n        }\r\n\r\n        private void BuildPivotTable2(ExcelPackage p)\r\n        {\r\n            var wsData = p.Workbook.Worksheets[\"Data\"];\r\n            var totalRows = wsData.Dimension.Address;\r\n            ExcelRange data = wsData.Cells[totalRows];\r\n\r\n            var wsAuditPivot = p.Workbook.Worksheets.Add(\"Pivot2\");\r\n\r\n            var pivotTable1 = wsAuditPivot.PivotTables.Add(wsAuditPivot.Cells[\"A7:C30\"], data, \"PivotAudit2\");\r\n            pivotTable1.ColumnGrandTotals = true;\r\n            var rowField = pivotTable1.RowFields.Add(pivotTable1.Fields[\"INVOICE_DATE\"]);\r\n\r\n\r\n            rowField.AddDateGrouping(eDateGroupBy.Years);\r\n            var yearField = pivotTable1.Fields.GetDateGroupField(eDateGroupBy.Years);\r\n            yearField.Name = \"Year\";\r\n\r\n            var rowField2 = pivotTable1.RowFields.Add(pivotTable1.Fields[\"AUDIT_LINE_STATUS\"]);\r\n\r\n            var TotalSpend = pivotTable1.DataFields.Add(pivotTable1.Fields[\"TOTAL_INVOICE_PRICE\"]);\r\n            TotalSpend.Name = \"Total Spend\";\r\n            TotalSpend.Format = \"$##,##0\";\r\n\r\n\r\n            var CountInvoicePrice = pivotTable1.DataFields.Add(pivotTable1.Fields[\"COUNT\"]);\r\n            CountInvoicePrice.Name = \"Total Lines\";\r\n            CountInvoicePrice.Format = \"##,##0\";\r\n\r\n            pivotTable1.DataOnRows = false;\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue15377()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"ws1\");\r\n                ws.Cells[\"A1\"].Value = (double?)1;\r\n                var v = ws.GetValue<double?>(1, 1);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15374()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"RT\");\r\n                var r = ws.Cells[\"A1\"];\r\n                r.RichText.Text = \"Cell 1\";\r\n                r[\"A2\"].RichText.Add(\"Cell 2\");\r\n                SaveWorkbook(@\"rt.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void IssueTranslate()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Trans\");\r\n                ws.Cells[\"A1:A2\"].Formula = \"IF(1=1, \\\"A's B C\\\",\\\"D\\\") \";\r\n                var fr = ws.Cells[\"A1:A2\"].FormulaR1C1;\r\n                ws.Cells[\"A1:A2\"].FormulaR1C1 = fr;\r\n                Assert.AreEqual(\"IF(1=1,\\\"A's B C\\\",\\\"D\\\")\", ws.Cells[\"A2\"].Formula);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15397()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var workSheet = p.Workbook.Worksheets.Add(\"styleerror\");\r\n                workSheet.Cells[\"F:G\"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;\r\n                workSheet.Cells[\"F:G\"].Style.Fill.BackgroundColor.SetColor(Color.Red);\r\n\r\n                workSheet.Cells[\"A:A,C:C\"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;\r\n                workSheet.Cells[\"A:A,C:C\"].Style.Fill.BackgroundColor.SetColor(Color.Red);\r\n\r\n                //And then: \r\n\r\n                workSheet.Cells[\"A:H\"].Style.Font.Color.SetColor(Color.Blue);\r\n\r\n                workSheet.Cells[\"I:I\"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;\r\n                workSheet.Cells[\"I:I\"].Style.Fill.BackgroundColor.SetColor(Color.Red);\r\n                workSheet.Cells[\"I2\"].Style.Fill.BackgroundColor.SetColor(Color.Green);\r\n                workSheet.Cells[\"I4\"].Style.Fill.BackgroundColor.SetColor(Color.Blue);\r\n                workSheet.Cells[\"I9\"].Style.Fill.BackgroundColor.SetColor(Color.Pink);\r\n\r\n                workSheet.InsertColumn(2, 2, 9);\r\n                workSheet.Column(45).Width = 0;\r\n\r\n                SaveWorkbook(@\"styleerror.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issuer14801()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var workSheet = p.Workbook.Worksheets.Add(\"rterror\");\r\n                var cell = workSheet.Cells[\"A1\"];\r\n                cell.RichText.Add(\"toto: \");\r\n                cell.RichText[0].PreserveSpace = true;\r\n                cell.RichText[0].Bold = true;\r\n                cell.RichText.Add(\"tata\");\r\n                cell.RichText[1].Bold = false;\r\n                cell.RichText[1].Color = Color.Green;\r\n                SaveWorkbook(@\"rtpreserve.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issuer15445()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws1 = p.Workbook.Worksheets.Add(\"ws1\");\r\n                var ws2 = p.Workbook.Worksheets.Add(\"ws2\");\r\n                ws2.View.SelectedRange = \"A1:B3 D12:D15\";\r\n                ws2.View.ActiveCell = \"D15\";\r\n                SaveWorkbook(@\"activeCell.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15438()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Test\");\r\n                var c = ws.Cells[\"A1\"].Style.Font.Color;\r\n                c.Indexed = 3;\r\n                Assert.AreEqual(c.LookupColor(c), \"#FF00FF00\");\r\n            }\r\n        }\r\n        public static byte[] ReadTemplateFile(string templateName)\r\n        {\r\n            byte[] templateFIle;\r\n            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\r\n            {\r\n                using (var sw = new System.IO.FileStream(templateName, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.ReadWrite))\r\n                {\r\n                    byte[] buffer = new byte[2048];\r\n                    int bytesRead;\r\n                    while ((bytesRead = sw.Read(buffer, 0, buffer.Length)) > 0)\r\n                    {\r\n                        ms.Write(buffer, 0, bytesRead);\r\n                    }\r\n                }\r\n                ms.Position = 0;\r\n                templateFIle = ms.ToArray();\r\n            }\r\n            return templateFIle;\r\n\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue15455()\r\n        {\r\n            using (var pck = new ExcelPackage())\r\n            {\r\n\r\n                var sheet1 = pck.Workbook.Worksheets.Add(\"sheet1\");\r\n                var sheet2 = pck.Workbook.Worksheets.Add(\"Sheet2\");\r\n                sheet1.Cells[\"C2\"].Value = 3;\r\n                sheet1.Cells[\"C3\"].Formula = \"VLOOKUP(E1, Sheet2!A1:D6, C2, 0)\";\r\n                sheet1.Cells[\"E1\"].Value = \"d\";\r\n\r\n                sheet2.Cells[\"A1\"].Value = \"d\";\r\n                sheet2.Cells[\"C1\"].Value = \"dg\";\r\n                pck.Workbook.Calculate();\r\n                var c3 = sheet1.Cells[\"C3\"].Value;\r\n                Assert.AreEqual(\"dg\", c3);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue15548_SumIfsShouldHandleGaps()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var test = package.Workbook.Worksheets.Add(\"Test\");\r\n\r\n                test.Cells[\"A1\"].Value = 1;\r\n                test.Cells[\"B1\"].Value = \"A\";\r\n\r\n                //test.Cells[\"A2\"] is default\r\n                test.Cells[\"B2\"].Value = \"A\";\r\n\r\n                test.Cells[\"A3\"].Value = 1;\r\n                test.Cells[\"B4\"].Value = \"B\";\r\n\r\n                test.Cells[\"D2\"].Formula = \"SUMIFS(A1:A3,B1:B3,\\\"A\\\")\";\r\n\r\n                test.Calculate();\r\n\r\n                var result = test.Cells[\"D2\"].GetValue<int>();\r\n\r\n                Assert.AreEqual(1, result, string.Format(\"Expected 1, got {0}\", result));\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue15548_SumIfsShouldHandleBadData()\r\n        {\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var test = package.Workbook.Worksheets.Add(\"Test\");\r\n\r\n                test.Cells[\"A1\"].Value = 1;\r\n                test.Cells[\"B1\"].Value = \"A\";\r\n\r\n                test.Cells[\"A2\"].Value = \"Not a number\";\r\n                test.Cells[\"B2\"].Value = \"A\";\r\n\r\n                test.Cells[\"A3\"].Value = 1;\r\n                test.Cells[\"B4\"].Value = \"B\";\r\n\r\n                test.Cells[\"D2\"].Formula = \"SUMIFS(A1:A3,B1:B3,\\\"A\\\")\";\r\n\r\n                test.Calculate();\r\n\r\n                var result = test.Cells[\"D2\"].GetValue<int>();\r\n\r\n                Assert.AreEqual(1, result, string.Format(\"Expected 1, got {0}\", result));\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue63() // See https://github.com/JanKallman/EPPlus/issues/63\r\n        {\r\n            using (var p1 = new ExcelPackage())\r\n            {\r\n                ExcelWorksheet ws = p1.Workbook.Worksheets.Add(\"ArrayTest\");\r\n                ws.Cells[\"A1\"].Value = 1;\r\n                ws.Cells[\"A2\"].Value = 2;\r\n                ws.Cells[\"A3\"].Value = 3;\r\n                ws.Cells[\"B1:B3\"].CreateArrayFormula(\"A1:A3\");\r\n                p1.Save();\r\n\r\n                // Test: basic support to recognize array formulas after reading Excel workbook file\r\n                using (var p2 = new ExcelPackage(p1.Stream))\r\n                {\r\n                    Assert.AreEqual(\"A1:A3\", p1.Workbook.Worksheets[\"ArrayTest\"].Cells[\"B1\"].Formula);\r\n                    Assert.IsTrue(p1.Workbook.Worksheets[\"ArrayTest\"].Cells[\"B1\"].IsArrayFormula);\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue61()\r\n        {\r\n            DataTable table1 = new DataTable(\"TestTable\");\r\n            table1.Columns.Add(\"name\");\r\n            table1.Columns.Add(\"id\");\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"i61\");\r\n                ws.Cells[\"A1\"].LoadFromDataTable(table1, true);\r\n            }\r\n\r\n        }\r\n        [TestMethod]\r\n        public void Issue57()\r\n        {\r\n            ExcelPackage pck = new ExcelPackage();\r\n            ExcelWorksheet ws = pck.Workbook.Worksheets.Add(\"test\");\r\n            ws.Cells[\"A1\"].LoadFromArrays(Enumerable.Empty<object[]>());\r\n        }\r\n        [TestMethod]\r\n        public void Issue66()\r\n        {\r\n\r\n            using (var pck = new ExcelPackage())\r\n            {\r\n                var ws = pck.Workbook.Worksheets.Add(\"Test!\");\r\n                ws.Cells[\"A1\"].Value = 1;\r\n                ws.Cells[\"B1\"].Formula = \"A1\";\r\n                var wb = pck.Workbook;\r\n                wb.Names.Add(\"Name1\", ws.Cells[\"A1:A2\"]);\r\n                ws.Names.Add(\"Name2\", ws.Cells[\"A1\"]);\r\n                pck.Save();\r\n                using (var pck2 = new ExcelPackage(pck.Stream))\r\n                {\r\n                    ws = pck2.Workbook.Worksheets[\"Test!\"];\r\n\r\n                }\r\n            }\r\n        }\r\n        /// <summary>\r\n        /// Creating a new ExcelPackage with an external stream should not dispose of \r\n        /// that external stream. That is the responsibility of the caller.\r\n        /// Note: This test would pass with EPPlus 4.1.1. In 4.5.1 the line CloseStream() was added\r\n        /// to the ExcelPackage.Dispose() method. That line is redundant with the line before, \r\n        /// _stream.Close() except that _stream.Close() is only called if the _stream is NOT\r\n        /// an External Stream (and several other conditions).\r\n        /// Note that CloseStream() doesn't do anything different than _stream.Close().\r\n        /// </summary>\r\n        [TestMethod]\r\n        public void Issue184_Disposing_External_Stream()\r\n        {\r\n            // Arrange\r\n            var stream = new MemoryStream();\r\n\r\n            using (var excelPackage = new ExcelPackage(stream))\r\n            {\r\n                var worksheet = excelPackage.Workbook.Worksheets.Add(\"Issue 184\");\r\n                worksheet.Cells[1, 1].Value = \"Hello EPPlus!\";\r\n                excelPackage.SaveAs(stream);\r\n                // Act\r\n            } // This dispose should not dispose of stream.\r\n\r\n            // Assert\r\n            Assert.IsTrue(stream.Length > 0);\r\n        }\r\n        [TestMethod]\r\n        public void Issue204()\r\n        {\r\n            using (var pack = new ExcelPackage())\r\n            {\r\n                //create sheets\r\n                var sheet1 = pack.Workbook.Worksheets.Add(\"Sheet 1\");\r\n                var sheet2 = pack.Workbook.Worksheets.Add(\"Sheet 2\");\r\n                //set some default values\r\n                sheet1.Cells[1, 1].Value = 1;\r\n                sheet2.Cells[1, 1].Value = 2;\r\n                //fill the formula\r\n                var formula = string.Format(\"'{0}'!R1C1\", sheet1.Name);\r\n\r\n                var cell = sheet2.Cells[2, 1];\r\n                cell.FormulaR1C1 = formula;\r\n                //Formula should remain the same\r\n                Assert.AreEqual(formula.ToUpper(), cell.FormulaR1C1.ToUpper());\r\n            }\r\n        }\r\n        [TestMethod, Ignore]\r\n        public void Issue170()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"print_titles_170.xlsx\"))\r\n            {\r\n                p.Compatibility.IsWorksheets1Based = false;\r\n                ExcelWorksheet sheet = p.Workbook.Worksheets[0];\r\n\r\n                sheet.PrinterSettings.RepeatColumns = new ExcelAddress(\"$A:$C\");\r\n                sheet.PrinterSettings.RepeatRows = new ExcelAddress(\"$1:$3\");\r\n\r\n                SaveWorkbook(\"print_titles_170-Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue172()\r\n        {\r\n            var pck = OpenTemplatePackage(\"quest.xlsx\");\r\n            foreach (var ws in pck.Workbook.Worksheets)\r\n            {\r\n                Console.WriteLine(ws.Name);\r\n            }\r\n\r\n            pck.Dispose();\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue219()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"issueFile.xlsx\"))\r\n            {\r\n                foreach (var ws in p.Workbook.Worksheets)\r\n                {\r\n                    Console.WriteLine(ws.Name);\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        [ExpectedException(typeof(InvalidDataException))]\r\n        public void Issue234()\r\n        {\r\n            using (var s = new MemoryStream())\r\n            {\r\n                var data = Encoding.UTF8.GetBytes(\"Bad data\").ToArray();\r\n                s.Write(data, 0, data.Length);\r\n                var package = new ExcelPackage(s);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void WorksheetNameWithSingeQuote()\r\n        {\r\n            var pck = OpenPackage(\"sheetname_pbl.xlsx\", true);\r\n            var ws = pck.Workbook.Worksheets.Add(\"Deal's History\");\r\n            var a = ws.Cells[\"A:B\"];\r\n            ws.AutoFilterAddress = ws.Cells[\"A1:C3\"];\r\n            pck.Workbook.Names.Add(\"Test\", ws.Cells[\"B1:D2\"]);\r\n            var name = a.WorkSheetName;\r\n\r\n            var a2 = new ExcelAddress(\"'Deal''s History'!a1:a3\");\r\n            Assert.AreEqual(a2.WorkSheetName, \"Deal's History\");\r\n            pck.Save();\r\n            pck.Dispose();\r\n\r\n        }\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        [TestMethod]\r\n        public void Issue233()\r\n        {\r\n            //get some test data\r\n            var cars = Car.GenerateList();\r\n\r\n            var pck = OpenPackage(\"issue233.xlsx\", true);\r\n\r\n            var sheetName = \"Summary_GLEDHOWSUGARCO![]()PTY\";\r\n\r\n            //Create the worksheet \r\n            var sheet = pck.Workbook.Worksheets.Add(sheetName);\r\n\r\n            //Read the data into a range\r\n            var range = sheet.Cells[\"A1\"].LoadFromCollection(cars, true);\r\n\r\n            //Make the range a table\r\n            var tbl = sheet.Tables.Add(range, $\"data{sheetName}\");\r\n            tbl.ShowTotal = true;\r\n            tbl.Columns[\"ReleaseYear\"].TotalsRowFunction = OfficeOpenXml.Table.RowFunctions.Sum;\r\n\r\n            //save and dispose\r\n            pck.Save();\r\n            pck.Dispose();\r\n        }\r\n        public class Car\r\n        {\r\n            public int Id { get; set; }\r\n            public string Make { get; set; }\r\n            public string Model { get; set; }\r\n            public int ReleaseYear { get; set; }\r\n\r\n            public Car(int id, string make, string model, int releaseYear)\r\n            {\r\n                Id = Id;\r\n                Make = make;\r\n                Model = model;\r\n                ReleaseYear = releaseYear;\r\n            }\r\n\r\n            internal static List<Car> GenerateList()\r\n            {\r\n                return new List<Car>\r\n            {\r\n\t\t\t\t//random data\r\n\t\t\t\tnew Car(1,\"Toyota\", \"Carolla\", 1950),\r\n                new Car(2,\"Toyota\", \"Yaris\", 2000),\r\n                new Car(3,\"Toyota\", \"Hilux\", 1990),\r\n                new Car(4,\"Nissan\", \"Juke\", 2010),\r\n                new Car(5,\"Nissan\", \"Trail Blazer\", 1995),\r\n                new Car(6,\"Nissan\", \"Micra\", 2018),\r\n                new Car(7,\"BMW\", \"M3\", 1980),\r\n                new Car(8,\"BMW\", \"X5\", 2008),\r\n                new Car(9,\"BMW\", \"M6\", 2003),\r\n                new Car(10,\"Merc\", \"S Class\", 2001)\r\n            };\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue236()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue236.xlsx\"))\r\n            {\r\n                p.Workbook.Worksheets[\"Sheet1\"].Cells[7, 10].AddComment(\"test\", \"Author\");\r\n                SaveWorkbook(\"Issue236-Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue228()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Font55.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"Sheet1\"];\r\n                var d = ws.Drawings.AddShape(\"Shape1\", eShapeStyle.Diamond);\r\n                ws.Cells[\"A1\"].Value = \"tasetraser\";\r\n                ws.Cells.AutoFitColumns();\r\n                SaveWorkbook(\"Font55-Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue241()\r\n        {\r\n            var pck = OpenPackage(\"issue241\", true);\r\n            var wks = pck.Workbook.Worksheets.Add(\"test\");\r\n            wks.DefaultRowHeight = 35;\r\n            pck.Save();\r\n            pck.Dispose();\r\n        }\r\n        [TestMethod]\r\n        public void Issue195()\r\n        {\r\n            using (var pkg = new OfficeOpenXml.ExcelPackage())\r\n            {\r\n                var sheet = pkg.Workbook.Worksheets.Add(\"Sheet1\");\r\n                var defaultStyle = pkg.Workbook.Styles.CreateNamedStyle(\"Default\");\r\n                defaultStyle.Style.Font.Name = \"Arial\";\r\n                defaultStyle.Style.Font.Size = 18;\r\n                defaultStyle.Style.Font.UnderLine = true;\r\n                var boldStyle = pkg.Workbook.Styles.CreateNamedStyle(\"Bold\", defaultStyle.Style);\r\n                boldStyle.Style.Font.Color.SetColor(Color.Red);\r\n\r\n                Assert.AreEqual(\"Arial\", defaultStyle.Style.Font.Name);\r\n                Assert.AreEqual(18, defaultStyle.Style.Font.Size);\r\n\r\n                Assert.AreEqual(\"Arial\", boldStyle.Style.Font.Name);\r\n                Assert.AreEqual(18, boldStyle.Style.Font.Size);\r\n                Assert.AreEqual(boldStyle.Style.Font.Color.Rgb, \"FFFF0000\");\r\n\r\n                SaveWorkbook(\"DefaultStyle.xlsx\", pkg);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue332()\r\n        {\r\n            InitBase();\r\n            var pkg = OpenPackage(\"Hyperlink.xlsx\", true);\r\n            var ws = pkg.Workbook.Worksheets.Add(\"Hyperlink\");\r\n            ws.Cells[\"A1\"].Hyperlink = new ExcelHyperLink(\"A2\", \"A2\");\r\n            pkg.Save();\r\n        }\r\n        [TestMethod]\r\n        public void Issue332_2()\r\n        {\r\n            InitBase();\r\n            var pkg = OpenPackage(\"Hyperlink.xlsx\");\r\n            var ws = pkg.Workbook.Worksheets[\"Hyperlink\"];\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].Hyperlink);\r\n        }\r\n        [TestMethod]\r\n        public void Issuer246()\r\n        {\r\n            InitBase();\r\n            var pkg = OpenPackage(\"issue246.xlsx\", true);\r\n            var ws = pkg.Workbook.Worksheets.Add(\"DateFormat\");\r\n            ws.Cells[\"A1\"].Value = 43465;\r\n            ws.Cells[\"A1\"].Style.Numberformat.Format = @\"[$-F800]dddd,\\ mmmm\\ dd,\\ yyyy\";\r\n            pkg.Save();\r\n\r\n            pkg = OpenPackage(\"issue246.xlsx\");\r\n            ws = pkg.Workbook.Worksheets[\"DateFormat\"];\r\n            var pCulture = System.Threading.Thread.CurrentThread.CurrentCulture;\r\n            System.Threading.Thread.CurrentThread.CurrentCulture = new CultureInfo(\"sv-Se\");\r\n            Assert.AreEqual(ws.Cells[\"A1\"].Text, \"den 31 december 2018\");\r\n            Assert.AreEqual(ws.GetValue<DateTime>(1, 1), new DateTime(2018, 12, 31));\r\n            System.Threading.Thread.CurrentThread.CurrentCulture = pCulture;\r\n        }\r\n        [TestMethod]\r\n        public void Issue347()\r\n        {\r\n            var package = OpenTemplatePackage(\"Issue327.xlsx\");\r\n            var templateWS = package.Workbook.Worksheets[\"Template\"];\r\n            //package.Workbook.Worksheets.Add(\"NewWs\", templateWS);\r\n            package.Workbook.Worksheets.Delete(templateWS);\r\n        }\r\n        [TestMethod]\r\n        public void Issue348()\r\n        {\r\n            using (ExcelPackage pck = new ExcelPackage())\r\n            {\r\n                ExcelWorksheet ws = pck.Workbook.Worksheets.Add(\"S1\");\r\n                string formula = \"VLOOKUP(C2,A:B,1,0)\";\r\n                ws.Cells[2, 4].Formula = formula;\r\n                var t1 = ws.Cells[2, 4].FormulaR1C1; // VLOOKUP(C2,C[-3]:C[-2],1,0)\r\n                ws.Cells[2, 5].FormulaR1C1 = ws.Cells[2, 4].FormulaR1C1;\r\n                var t2 = ws.Cells[2, 5].FormulaR1C1; // VLOOKUP(C2,C[-3]**:B:C:C**,1,0)   //unexpected value here\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue367()\r\n        {\r\n            using (var pck = OpenTemplatePackage(@\"ProductFunctionTest.xlsx\"))\r\n            {\r\n                var sheet = pck.Workbook.Worksheets.First();\r\n                //sheet.Cells[\"B13\"].Value = null;\r\n                sheet.Cells[\"B14\"].Value = 11;\r\n                sheet.Cells[\"B15\"].Value = 13;\r\n                sheet.Cells[\"B16\"].Formula = \"Product(B13:B15)\";\r\n                sheet.Calculate();\r\n\r\n                Assert.AreEqual(0d, sheet.Cells[\"B16\"].Value);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue345()\r\n        {\r\n            using (ExcelPackage package = OpenTemplatePackage(\"issue345.xlsx\"))\r\n            {\r\n                var worksheet = package.Workbook.Worksheets[\"test\"];\r\n                int[] sortColumns = new int[1];\r\n                sortColumns[0] = 0;\r\n                worksheet.Cells[\"A2:A30864\"].Sort(sortColumns);\r\n                package.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue387()\r\n        {\r\n\r\n            using (ExcelPackage package = OpenTemplatePackage(\"issue345.xlsx\"))\r\n            {\r\n                var workbook = package.Workbook;\r\n                var worksheet = workbook.Worksheets.Add(\"One\");\r\n\r\n                worksheet.Cells[1, 3].Value = \"Hello\";\r\n                var cells = worksheet.Cells[\"A3\"];\r\n\r\n                worksheet.Names.Add(\"R0\", cells);\r\n                workbook.Names.Add(\"Q0\", cells);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue333()\r\n        {\r\n            var ci = Thread.CurrentThread.CurrentCulture;\r\n            Thread.CurrentThread.CurrentCulture = new CultureInfo(\"sv-SE\");\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"TextBug\");\r\n                ws.Cells[\"A1\"].Value = new DateTime(2019, 3, 7);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"mm-dd-yy\";\r\n\r\n                Assert.AreEqual(\"2019-03-07\", ws.Cells[\"A1\"].Text);\r\n            }\r\n            Thread.CurrentThread.CurrentCulture = new CultureInfo(\"en-US\");\r\n            using (var package = new ExcelPackage())\r\n            {\r\n                var ws = package.Workbook.Worksheets.Add(\"TextBug\");\r\n                ws.Cells[\"A1\"].Value = new DateTime(2019, 3, 7);\r\n                ws.Cells[\"A1\"].Style.Numberformat.Format = \"mm-dd-yy\";\r\n\r\n                Assert.AreEqual(\"3/7/2019\", ws.Cells[\"A1\"].Text);\r\n            }\r\n            Thread.CurrentThread.CurrentCulture = ci;\r\n        }\r\n        [TestMethod]\r\n        public void Issue445()\r\n        {\r\n            ExcelPackage p = new ExcelPackage();\r\n            ExcelWorksheet ws = p.Workbook.Worksheets.Add(\"AutoFit\"); //<-- This line takes forever. The process hangs.\r\n            ws.Cells[1, 1].Value = new string('a', 50000);\r\n            ws.Cells[1, 1].AutoFitColumns();\r\n        }\r\n        [TestMethod]\r\n        public void Issue551()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Submittal.Extract.5.ton.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n                SaveWorkbook(\"Submittal.Extract.5.ton_Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue558()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"GoogleSpreadsheet.xlsx\"))\r\n            {\r\n                ExcelWorksheet ws = p.Workbook.Worksheets[0];\r\n                p.Workbook.Worksheets.Copy(ws.Name, \"NewName\");\r\n                SaveWorkbook(\"GoogleSpreadsheet-Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue520()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"template_slim.xlsx\"))\r\n            {\r\n\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n                workSheet.Cells[\"B5\"].LoadFromArrays(new List<object[]> { new object[] { \"xx\", \"Name\", 1, 2, 3, 5, 6, 7 } });\r\n\r\n                SaveWorkbook(\"ErrorStyle0.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue510()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Error.Opening.with.EPPLus.xlsx\"))\r\n            {\r\n\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n\r\n                SaveWorkbook(\"Issue510.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue464()\r\n        {\r\n            using (var p1 = OpenTemplatePackage(\"Sample_Cond_Format.xlsx\"))\r\n            {\r\n                var ws = p1.Workbook.Worksheets[0];\r\n                using (var p2 = new ExcelPackage())\r\n                {\r\n                    var ws2 = p2.Workbook.Worksheets.Add(\"Test\", ws);\r\n                    foreach (var cf in ws2.ConditionalFormatting)\r\n                    {\r\n\r\n                    }\r\n                    SaveWorkbook(\"CondCopy.xlsx\", p2);\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue436()\r\n        {\r\n            using (var p1 = OpenTemplatePackage(\"issue436.xlsx\"))\r\n            {\r\n                var ws = p1.Workbook.Worksheets[0];\r\n                Assert.IsNotNull(((ExcelShape)ws.Drawings[0]).Text);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue425()\r\n        {\r\n            using (var p1 = OpenTemplatePackage(\"issue425.xlsm\"))\r\n            {\r\n                var ws = p1.Workbook.Worksheets[1];\r\n\r\n                p1.Workbook.Worksheets.Add(\"NewNotCopied\");\r\n                p1.Workbook.Worksheets.Add(\"NewCopied\", ws);\r\n\r\n                SaveWorkbook(\"issue425.xlsm\", p1);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue422()\r\n        {\r\n            using (var p1 = OpenTemplatePackage(\"CustomFormula.xlsx\"))\r\n            {\r\n                SaveWorkbook(\"issue422.xlsx\", p1);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue625()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"multiple_print_areas.xlsx\"))\r\n            {\r\n\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n\r\n                SaveWorkbook(\"Issue625.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue403()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"issue403.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n                SaveWorkbook(\"Issue403.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue39()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"MyExcel.xlsx\"))\r\n            {\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n\r\n                workSheet.InsertRow(8, 2, 8);\r\n                SaveWorkbook(\"Issue39.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue70()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"HiddenOO.xlsx\"))\r\n            {\r\n                Assert.IsTrue(p.Workbook.Worksheets[0].Column(2).Hidden);\r\n                SaveWorkbook(\"Issue70.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue72()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue72-Table.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n                Assert.AreEqual(\"COUNTIF(Base[Date],Calc[[#This Row],[Date]])\", ws.Cells[\"F3\"].Formula);\r\n                SaveWorkbook(\"Issue72.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue54()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"MergeBug\");\r\n\r\n                var r = ws.Cells[1, 1, 1, 5];\r\n                r.Merge = true;\r\n                r.Value = \"Header\";\r\n                SaveWorkbook(\"Issue54.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue55()\r\n        {\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var worksheet = p.Workbook.Worksheets.Add(\"DV test\");\r\n                var rangeToSet = ExcelCellBase.GetAddress(1, 3, ExcelPackage.MaxRows, 3);\r\n                worksheet.Names.Add(\"ListName\", worksheet.Cells[\"D1:D3\"]);\r\n                worksheet.Cells[\"D1\"].Value = \"A\";\r\n                worksheet.Cells[\"D2\"].Value = \"B\";\r\n                worksheet.Cells[\"D3\"].Value = \"C\";\r\n                var validation = worksheet.DataValidations.AddListValidation(rangeToSet);\r\n                validation.Formula.ExcelFormula = $\"=ListName\";\r\n                SaveWorkbook(\"dv.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue73()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue73.xlsx\"))\r\n            {\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n\r\n                SaveWorkbook(\"Issue73Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue74()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue74.xlsx\"))\r\n            {\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n\r\n                SaveWorkbook(\"Issue74Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue76()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue76.xlsx\"))\r\n            {\r\n                var workSheet = p.Workbook.Worksheets[0];\r\n\r\n                SaveWorkbook(\"Issue76Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue88()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue88.xlsm\"))\r\n            {\r\n                var ws1 = p.Workbook.Worksheets[0];\r\n                var ws2 = p.Workbook.Worksheets.Add(\"test\", ws1);\r\n                SaveWorkbook(\"Issue88Saved.xlsm\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue94()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue425.xlsm\"))\r\n            {\r\n                p.Workbook.VbaProject.Remove();\r\n                SaveWorkbook(\"Issue425.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue95()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue95.xlsx\"))\r\n            {\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue99()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue-99-2.xlsx\"))\r\n            {\r\n                //var p2 = OpenPackage(\"Issue99-2Saved-new.xlsx\", true);\r\n                //var ws = p2.Workbook.Worksheets.Add(\"Picture\");\r\n                //ws.Drawings.AddPicture(\"Test1\", Properties.Resources.Test1);\r\n                //p.Workbook.Worksheets.Add(\"copy1\", p.Workbook.Worksheets[0]);\r\n                //p2.Workbook.Worksheets.Add(\"copy1\", p.Workbook.Worksheets[0]);\r\n                //p.Workbook.Worksheets.Add(\"copy2\", p2.Workbook.Worksheets[0]);\r\n                //SaveAndCleanup(p2);\r\n                SaveWorkbook(\"Issue99-2Saved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue115()\r\n        {\r\n            using (var p = OpenPackage(\"Issue115.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"DefinedNamesIssue\");\r\n                p.Workbook.Names.Add(\"Name\", ws.Cells[\"B6:D8,B10:D11\"]);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue121()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Deployment aftaler.xlsx\"))\r\n            {\r\n                var sheet = p.Workbook.Worksheets[0];\r\n            }\r\n        }\r\n\r\n        [TestMethod, Ignore]\r\n        public void SupportCase17()\r\n        {\r\n            using (var p = new ExcelPackage(new FileInfo(@\"c:\\temp\\Issue17\\BreakLinks3.xlsx\")))\r\n            {\r\n                var stopwatch = Stopwatch.StartNew();\r\n                p.Workbook.FormulaParserManager.AttachLogger(new FileInfo(\"c:\\\\temp\\\\formulalog.txt\"));\r\n                p.Workbook.Calculate();\r\n                stopwatch.Stop();\r\n                var ms = stopwatch.Elapsed.TotalSeconds;\r\n\r\n            }\r\n        }\r\n        [TestMethod, Ignore]\r\n        public void Issue17()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Excel Sample Circular Ref break links.xlsx\"))\r\n            {\r\n                p.Workbook.Calculate();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue18()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"000P020-SQ101_H0.xlsm\"))\r\n            {\r\n                p.Workbook.Worksheets.Delete(0);\r\n                p.Workbook.Worksheets.Delete(2);\r\n                p.Workbook.Calculate();\r\n                SaveWorkbook(\"null_issue_vba.xlsm\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue26()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue26.xlsx\"))\r\n            {\r\n                SaveAndCleanup(p);\r\n            }\r\n            using (var p = OpenPackage(\"Issue26.xlsx\"))\r\n            {\r\n                SaveWorkbook(\"Issue26-resaved.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue180()\r\n        {\r\n            var p1 = OpenTemplatePackage(\"Issue180-1.xlsm\");\r\n            var p2 = OpenTemplatePackage(\"Issue180-2.xlsm\");\r\n            p2.Workbook.Worksheets.Add(p1.Workbook.Worksheets[0].Name, p1.Workbook.Worksheets[0]);\r\n            p2.SaveAs(new FileInfo(\"c:\\\\epplustest\\\\t.xlsm\"));\r\n        }\r\n        [TestMethod]\r\n        public void Issue34()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue34.xlsx\"))\r\n            {\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void Issue38()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"pivottest.xlsx\"))\r\n            {\r\n                Assert.AreEqual(1, p.Workbook.Worksheets[1].PivotTables.Count);\r\n                var tbl = p.Workbook.Worksheets[0].Tables[0];\r\n                var pt = p.Workbook.Worksheets[1].PivotTables[0];\r\n                Assert.IsNotNull(p.Workbook.Worksheets[1].PivotTables[0].CacheDefinition);\r\n                var s1 = pt.Fields[0].AddSlicer();\r\n                s1.SetPosition(0, 500);\r\n                var s2 = pt.Fields[\"OpenDate\"].AddSlicer();\r\n                pt.Fields[\"Distance\"].Format = \"#,##0.00\";\r\n                pt.Fields[\"Distance\"].AddSlicer();\r\n                s2.SetPosition(0, 500 + (int)s1._width);\r\n                tbl.Columns[\"IsUser\"].AddSlicer();\r\n                pt.Fields[\"IsUser\"].AddSlicer();\r\n\r\n                SaveWorkbook(\"pivotTable2.xlsx\", p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue195_PivotTable()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue195.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[1];\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue45()\r\n        {\r\n            using (var p = OpenPackage(\"LinkIssue.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"A1:A2\"].Value = 1;\r\n                ws.Cells[\"B1:B2\"].Formula = $\"VLOOKUP($A1,[externalBook.xlsx]Prices!$A:$H, 3, FALSE)\";\r\n                SaveAndCleanup(p);\r\n            }\r\n\r\n        }\r\n        [TestMethod]\r\n        public void EmfIssue()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"emfIssue.xlsm\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue201()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"book1.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n                Assert.AreEqual(\"0\", ws.Cells[\"A1\"].Text);\r\n                Assert.AreEqual(\"-\", ws.Cells[\"A2\"].Text);\r\n                Assert.AreEqual(\"0\", ws.Cells[\"A3\"].Text);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void IssueCellstore()\r\n        {\r\n            int START_ROW = 1;\r\n            int CustomTemplateRowsOffset = 4;\r\n            int rowCount = 34000;\r\n            using (var package = OpenTemplatePackage(\"CellStoreIssue.xlsm\"))\r\n            {\r\n                var worksheet = package.Workbook.Worksheets[0];\r\n                worksheet.Cells[\"A5\"].Value = \"Test\";\r\n                worksheet.InsertRow(START_ROW + CustomTemplateRowsOffset, rowCount - 1, CustomTemplateRowsOffset + 1);\r\n                Assert.AreEqual(\"Test\", worksheet.Cells[\"A34004\"].Value);\r\n                //for (int k = START_ROW+CustomTemplateRowsOffset; k < rowCount; k++)\r\n                //{\r\n                //    worksheet.Cells[(START_ROW + CustomTemplateRowsOffset) + \":\" + (START_ROW + CustomTemplateRowsOffset)]\r\n                //        .Copy(worksheet.Cells[k + 1 + \":\" + k + 1]);\r\n                //}\r\n                SaveAndCleanup(package);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue220()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Generated.with.EPPlus.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue232()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"pivotbug541.xlsx\"))\r\n            {\r\n                var overviewSheet = p.Workbook.Worksheets[\"Overblik\"];\r\n                var serverSheet = p.Workbook.Worksheets[\"Servers\"];\r\n                var serverPivot = overviewSheet.PivotTables.Add(overviewSheet.Cells[\"A4\"], serverSheet.Cells[serverSheet.Dimension.Address], \"ServerPivot\");\r\n                p.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue_234()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"ExcelErrorFile.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"Leistung\"];\r\n\r\n                Assert.IsNull(ws.Cells[\"C65538\"].Value);\r\n                Assert.IsNull(ws.Cells[\"C71715\"].Value);\r\n                Assert.AreEqual(0D, ws.Cells[\"C71716\"].Value);\r\n                Assert.AreEqual(0D, ws.Cells[\"C71811\"].Value);\r\n                Assert.IsNull(ws.Cells[\"C71812\"].Value);\r\n                Assert.IsNull(ws.Cells[\"C77667\"].Value);\r\n                Assert.AreEqual(0D, ws.Cells[\"C77668\"].Value);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void InflateIssue()\r\n        {\r\n            using (var p = OpenPackage(\"inflateStart.xlsx\", true))\r\n            {\r\n                var worksheet = p.Workbook.Worksheets.Add(\"Test\");\r\n                for (int i = 1; i <= 10; i++)\r\n                {\r\n                    worksheet.Cells[1, i].Hyperlink = new Uri(\"https://epplussoftware.com\");\r\n                    worksheet.Cells[1, i].Value = \"Url \" + worksheet.Cells[1, i].Address;\r\n                }\r\n                p.Save();\r\n                using (var p2 = new ExcelPackage(p.Stream))\r\n                {\r\n                    for (int i = 0; i < 10; i++)\r\n                    {\r\n                        p.Save();\r\n                    }\r\n                    SaveWorkbook(\"Inflate.xlsx\", p2);\r\n                }\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DrawingSetFont()\r\n        {\r\n            using (var p = OpenPackage(\"DrawingSetFromFont.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"Drawing1\");\r\n                var shape = ws.Drawings.AddShape(\"x\", eShapeStyle.Rect);\r\n                shape.Font.SetFromFont(new Font(\"Arial\", 20));\r\n                shape.Text = \"Font\";\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue_258()\r\n        {\r\n            using (var package = OpenTemplatePackage(\"Test.xlsx\"))\r\n            {\r\n                var overviewSheet = package.Workbook.Worksheets[\"Overview\"];\r\n                if (overviewSheet != null)\r\n                    package.Workbook.Worksheets.Delete(overviewSheet);\r\n                overviewSheet = package.Workbook.Worksheets.Add(\"Overview\");\r\n                var serverSheet = package.Workbook.Worksheets[\"Servers\"];\r\n                var serverPivot = overviewSheet.PivotTables.Add(overviewSheet.Cells[\"A4\"], serverSheet.Cells[serverSheet.Dimension.Address], \"ServerPivot\");\r\n                var serverNameField = serverPivot.Fields[\"Name\"];\r\n                serverPivot.RowFields.Add(serverNameField);\r\n                var standardBackupField = serverPivot.Fields[\"StandardBackup\"];\r\n                serverPivot.PageFields.Add(standardBackupField);\r\n                standardBackupField.Items.Refresh();\r\n                var items = standardBackupField.Items;\r\n                items.SelectSingleItem(1); // <===== this one is to select only the \"false\" condition\r\n                SaveWorkbook(\"Issue248.xlsx\", package);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue_243()\r\n        {\r\n            using (var p = OpenPackage(\"formula.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"formula\");\r\n                ws.Cells[\"A1\"].Value = \"column1\";\r\n                ws.Cells[\"A2\"].Value = 1;\r\n                ws.Cells[\"A3\"].Value = 2;\r\n                ws.Cells[\"A4\"].Value = 3;\r\n\r\n                var tbl = ws.Tables.Add(ws.Cells[\"A1:A4\"], \"Table1\");\r\n\r\n                ws.Cells[\"B1\"].Formula = \"TEXTJOIN(\\\" | \\\", false, INDIRECT(\\\"Table1[#data]\\\"))\";\r\n                ws.Calculate();\r\n                Assert.AreEqual(\"1 | 2 | 3\", ws.Cells[\"B1\"].Value);\r\n\r\n                ws.Cells[\"B1\"].Formula = \"TEXTJOIN(\\\" | \\\", false, INDIRECT(\\\"Table1\\\"))\";\r\n                ws.Calculate();\r\n                Assert.AreEqual(\"1 | 2 | 3\", ws.Cells[\"B1\"].Value);\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void IssueCommentInsert()\r\n        {\r\n\r\n            using (var p = OpenPackage(\"comment.xlsx\", true))\r\n            {\r\n                var ws = p.Workbook.Worksheets.Add(\"CommentInsert\");\r\n                ws.Cells[\"A2\"].AddComment(\"na\", \"test\");\r\n                Assert.AreEqual(1, ws.Comments.Count);\r\n\r\n                ws.InsertRow(2, 1);\r\n                ws.Cells[\"A3\"].Insert(eShiftTypeInsert.Right);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue261()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"issue261.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"data\"];\r\n                ws.Cells[\"A1\"].Value = \"test\";\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue260()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"issue260.xlsx\"))\r\n            {\r\n                var workbook = p.Workbook;\r\n                Console.WriteLine(workbook.Worksheets.Count);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue268()\r\n        {\r\n            using (var p = OpenPackage(\"Issue268.xlsx\", true))\r\n            {\r\n                ExcelWorksheet formSheet = CreateFormSheet(p);\r\n                var r1 = formSheet.Drawings.AddCheckBoxControl(\"OptionSingleRoom\");\r\n                r1.Text = \"Single Room\";\r\n                r1.LinkedCell = formSheet.Cells[\"G7\"];\r\n                r1.SetPosition(5, 0, 1, 0);\r\n                var tableSheet = p.Workbook.Worksheets.Add(\"Table\");\r\n                ExcelRange tableRange = formSheet.Cells[10, 20, 30, 22];\r\n                ExcelTable faultsTable = formSheet.Tables.Add(tableRange, \"FaultsTable\");\r\n                faultsTable.StyleName = \"None\";\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        private static ExcelWorksheet CreateFormSheet(ExcelPackage package)\r\n        {\r\n            var formSheet = package.Workbook.Worksheets.Add(\"Form\");\r\n            formSheet.Cells[\"A1\"].Value = \"Room booking\";\r\n            formSheet.Cells[\"A1\"].Style.Font.Size = 18;\r\n            formSheet.Cells[\"A1\"].Style.Font.Bold = true;\r\n            return formSheet;\r\n        }\r\n        [TestMethod]\r\n        public void Issue269()\r\n        {\r\n            var data = new List<TestDTO>();\r\n\r\n            using (var p = new ExcelPackage())\r\n            {\r\n                var sheet = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                var r = sheet.Cells[\"A1\"].LoadFromCollection(data, false);\r\n                Assert.IsNull(r);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue272()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue272.xlsx\"))\r\n            {\r\n                var workbook = p.Workbook;\r\n                Console.WriteLine(workbook.Worksheets.Count);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void IssueS84()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"XML in Cells.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[0];\r\n                var cell = ws.Cells[\"D43\"];\r\n                cell.Value = cell.Value + \" \";\r\n\r\n                ExcelRichText rtx = cell.RichText.Add(\"a\");\r\n\r\n                rtx.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;\r\n\r\n                ws.Cells[\"D43:E44\"].Value = new object[,] { { \"Cell1\", \"Cell2\" }, { \"Cell21\", \"Cell22\" } };\r\n\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void IssueS80()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Example - CANNOT OPEN EPPLUS.xlsx\"))\r\n            {\r\n                var workbook = p.Workbook;\r\n                SaveAndCleanup(p);\r\n                new ExcelAddress(\"f\");\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void IssueS91()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Tagging Template V14.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"Stacked Logs\"];\r\n                //Insert 2 rows extending the data validations. \r\n                ws.InsertRow(4, 2, 4);\r\n\r\n                //Get the data validation of choice.\r\n                var dv = ws.DataValidations[0].As.ListValidation;\r\n\r\n                //Adjust the formula using the R1C1 translator...\r\n                var formula = dv.Formula.ExcelFormula;\r\n                var r1c1Formula = OfficeOpenXml.Core.R1C1Translator.ToR1C1Formula(formula, dv.Address.Start.Row, dv.Address.Start.Column);\r\n                //Add one row to the formula\r\n                var formulaRowPlus1 = OfficeOpenXml.Core.R1C1Translator.FromR1C1Formula(r1c1Formula, dv.Address.Start.Row + 1, dv.Address.Start.Column);\r\n\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        public class Test\r\n        {\r\n            public int Value1 { get; set; }\r\n            public int Value2 { get; set; }\r\n            public int Value3 { get; set; }\r\n\r\n        }\r\n        [TestMethod]\r\n        public void Issue284()\r\n        {\r\n            //1\r\n            var report1 = new List<Test>\r\n            {\r\n                new Test{ Value1 = 1, Value2= 2, Value3=3 },\r\n                new Test{ Value1 = 2, Value2= 3, Value3=4 },\r\n                new Test{ Value1 = 5, Value2= 6, Value3=7 }\r\n            };\r\n\r\n            //3\r\n            var report2 = new List<Test>\r\n            {\r\n                new Test{ Value1 = 0, Value2= 0, Value3=0 },\r\n                new Test{ Value1 = 0, Value2= 0, Value3=0 },\r\n                new Test{ Value1 = 0, Value2= 0, Value3=0 }\r\n            };\r\n\r\n            //4\r\n            var report3 = new List<Test>\r\n            {\r\n                new Test{ Value1 = 3, Value2= 3, Value3=3 },\r\n                new Test{ Value1 = 3, Value2= 3, Value3=3 },\r\n                new Test{ Value1 = 3, Value2= 3, Value3=3 }\r\n            };\r\n\r\n\r\n            string workingDirectory = AppDomain.CurrentDomain.BaseDirectory;\r\n            using (var excelFile = OpenTemplatePackage(\"issue284.xlsx\"))\r\n            {\r\n                //Data1\r\n                var worksheet = excelFile.Workbook.Worksheets[\"Test1\"];\r\n                ExcelRangeBase location = worksheet.Cells[\"A1\"].LoadFromCollection(Collection: report1, PrintHeaders: true);\r\n                worksheet.Tables.Add(location, \"mytestTbl\");\r\n\r\n                //Data2\r\n                worksheet = excelFile.Workbook.Worksheets[\"Test2\"];\r\n                location = worksheet.Cells[\"A1\"].LoadFromCollection(Collection: report2, PrintHeaders: true);\r\n                worksheet.Tables.Add(location, \"mytestsureTbl\");\r\n\r\n                //Data3\r\n                location = worksheet.Cells[\"K1\"].LoadFromCollection(Collection: report3, PrintHeaders: true);\r\n                worksheet.Tables.Add(location, \"Test3\");\r\n\r\n                var wsFirst = excelFile.Workbook.Worksheets[\"Test1\"];\r\n\r\n                wsFirst.Select();\r\n                SaveAndCleanup(excelFile);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Ticket90()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Example - Calculate.xlsx\"))\r\n            {\r\n                var sheet = p.Workbook.Worksheets[\"Others\"];\r\n                var fi = new FileInfo(@\"c:\\Temp\\countiflog.txt\");\r\n                p.Workbook.FormulaParserManager.AttachLogger(fi);\r\n                sheet.Calculate(x => x.PrecisionAndRoundingStrategy = OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy.Excel);\r\n                p.Workbook.FormulaParserManager.DetachLogger();\r\n                var result = sheet.Cells[\"R5\"].Value;\r\n                ExcelAddress a = new ExcelAddress();\r\n\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Ticket90_2()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"s70.xlsx\"))\r\n            {\r\n                p.Workbook.Calculate();\r\n                Assert.AreEqual(7D, p.Workbook.Worksheets[0].Cells[\"P1\"].Value);\r\n                Assert.AreEqual(1D, p.Workbook.Worksheets[0].Cells[\"P2\"].Value);\r\n                Assert.AreEqual(0D, p.Workbook.Worksheets[0].Cells[\"P3\"].Value);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue287()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"issue287.xlsm\"))\r\n            {\r\n                p.Workbook.CreateVBAProject();\r\n                p.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue309()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"test1.xlsx\"))\r\n            {\r\n                p.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue274()\r\n        {\r\n            using (var p = OpenPackage(\"Issue274.xlsx\", true))\r\n            {\r\n                var worksheet = p.Workbook.Worksheets.Add(\"PayrollData\");\r\n\r\n                //Add the headers\r\n                worksheet.Cells[1, 1].Value = \"Employee\";\r\n                worksheet.Cells[1, 2].Value = \"HomeOffice\";\r\n                worksheet.Cells[1, 3].Value = \"JobNo\";\r\n                worksheet.Cells[1, 4].Value = \"Ordinary\";\r\n                worksheet.Cells[1, 5].Value = \"TimeHalf\";\r\n                worksheet.Cells[1, 6].Value = \"DoubleTime\";\r\n                worksheet.Cells[1, 7].Value = \"ProductiveHrs\";\r\n                worksheet.Cells[1, 8].Value = \"NonProductiveHrs\";\r\n\r\n\r\n                int cnt = 2;\r\n                worksheet.Cells[cnt, 1].Value = \"Steve\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"SW001\";\r\n                worksheet.Cells[cnt, 4].Value = 12.0;\r\n                worksheet.Cells[cnt, 5].Value = 6.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 18.0;\r\n                worksheet.Cells[cnt, 8].Value = 0.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Steve\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"SW002\";\r\n                worksheet.Cells[cnt, 4].Value = 7.0;\r\n                worksheet.Cells[cnt, 5].Value = 0.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 7.0;\r\n                worksheet.Cells[cnt, 8].Value = 0.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Steve\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"Admin\";\r\n                worksheet.Cells[cnt, 4].Value = 4.0;\r\n                worksheet.Cells[cnt, 5].Value = 0.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 0.0;\r\n                worksheet.Cells[cnt, 8].Value = 4.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Peter\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"SW001\";\r\n                worksheet.Cells[cnt, 4].Value = 12.0;\r\n                worksheet.Cells[cnt, 5].Value = 6.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 18.0;\r\n                worksheet.Cells[cnt, 8].Value = 0.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Peter\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"SW002\";\r\n                worksheet.Cells[cnt, 4].Value = 7.0;\r\n                worksheet.Cells[cnt, 5].Value = 0.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 7.0;\r\n                worksheet.Cells[cnt, 8].Value = 0.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Peter\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"Admin\";\r\n                worksheet.Cells[cnt, 4].Value = 4.0;\r\n                worksheet.Cells[cnt, 5].Value = 0.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 0.0;\r\n                worksheet.Cells[cnt, 8].Value = 4.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Brian\";\r\n                worksheet.Cells[cnt, 2].Value = \"Sydney\";\r\n                worksheet.Cells[cnt, 3].Value = \"SW001\";\r\n                worksheet.Cells[cnt, 4].Value = 12.0;\r\n                worksheet.Cells[cnt, 5].Value = 6.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 18.0;\r\n                worksheet.Cells[cnt, 8].Value = 0.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Brian\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"SW002\";\r\n                worksheet.Cells[cnt, 4].Value = 7.0;\r\n                worksheet.Cells[cnt, 5].Value = 0.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 7.0;\r\n                worksheet.Cells[cnt, 8].Value = 0.0;\r\n                cnt++;\r\n                worksheet.Cells[cnt, 1].Value = \"Brian\";\r\n                worksheet.Cells[cnt, 2].Value = \"Binda\";\r\n                worksheet.Cells[cnt, 3].Value = \"Admin\";\r\n                worksheet.Cells[cnt, 4].Value = 4.0;\r\n                worksheet.Cells[cnt, 5].Value = 0.0;\r\n                worksheet.Cells[cnt, 6].Value = 0.0;\r\n                worksheet.Cells[cnt, 7].Value = 0.0;\r\n                worksheet.Cells[cnt, 8].Value = 4.0;\r\n\r\n                cnt--;\r\n                using (var range = worksheet.Cells[1, 1, 1, 8])\r\n                {\r\n                    range.Style.Font.Bold = true;\r\n                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;\r\n                    range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);\r\n                    range.Style.Font.Color.SetColor(Color.White);\r\n                }\r\n                var dataRange = worksheet.Cells[1, 1, cnt, 8];\r\n                ExcelTableCollection tblcollection = worksheet.Tables;\r\n                ExcelTable table = tblcollection.Add(dataRange, \"payrolldata\");\r\n                table.ShowHeader = true;\r\n                table.ShowFilter = true;\r\n                var wsPivot = p.Workbook.Worksheets.Add(\"Employee-Job\");\r\n                var pivotTable = wsPivot.PivotTables.Add(wsPivot.Cells[\"A3\"], dataRange, \"ByEmployee\");\r\n                pivotTable.RowFields.Add(pivotTable.Fields[\"Employee\"]);\r\n                var rowField1 = pivotTable.RowFields.Add(pivotTable.Fields[\"HomeOffice\"]);\r\n                var rowField2 = pivotTable.RowFields.Add(pivotTable.Fields[\"JobNo\"]);\r\n                var calcField1 = pivotTable.Fields.AddCalculatedField(\"Productive\", \"'ProductiveHrs'/('ProductiveHrs'+'NonProductiveHrs')*100\");\r\n                calcField1.Format = \"#,##0\";\r\n                ExcelPivotTableDataField dataField;\r\n                dataField = pivotTable.DataFields.Add(pivotTable.Fields[\"Productive\"]);\r\n                dataField.Format = \"#,##0.0\";\r\n                dataField.Name = \"Productive2\";\r\n\r\n                dataField = pivotTable.DataFields.Add(pivotTable.Fields[\"Ordinary\"]);\r\n                dataField.Format = \"#,##0.0\";\r\n                dataField = pivotTable.DataFields.Add(pivotTable.Fields[\"TimeHalf\"]);\r\n                dataField.Format = \"#,##0.0\";\r\n                dataField = pivotTable.DataFields.Add(pivotTable.Fields[\"DoubleTime\"]);\r\n                dataField.Format = \"#,##0.0\";\r\n                dataField = pivotTable.DataFields.Add(pivotTable.Fields[\"ProductiveHrs\"]);\r\n                dataField.Format = \"#,##0.0\";\r\n                dataField = pivotTable.DataFields.Add(pivotTable.Fields[\"NonProductiveHrs\"]);\r\n                dataField.Format = \"#,##0.0\";\r\n                pivotTable.DataOnRows = false;\r\n                pivotTable.Compact = true;\r\n                pivotTable.CompactData = true;\r\n                pivotTable.OutlineData = true;\r\n                //pivotTable.ShowDrill = true;\r\n                //pivotTable.CacheDefinition.Refresh();\r\n                pivotTable.Fields[\"Employee\"].Items.ShowDetails(false);\r\n                rowField1.Items.ShowDetails(false);\r\n                worksheet.Cells.AutoFitColumns(0);\r\n\r\n                // create macro's to collapse pivot table\r\n\r\n                //p.Workbook.CreateVBAProject();\r\n                //var sb = new StringBuilder();\r\n                //sb.AppendLine(\"Private Sub Workbook_Open()\");\r\n                //sb.AppendLine(\"    Sheets(\\\"Employee-Job\\\").Select\");\r\n                //sb.AppendLine(\"    ActiveSheet.PivotTables(\\\"ByEmployee\\\").PivotFields(\\\"Employee\\\").ShowDetail = False\");\r\n                //sb.AppendLine(\"    ActiveSheet.PivotTables(\\\"ByEmployee\\\").PivotFields(\\\"HomeOffice\\\").ShowDetail = False\");\r\n                //sb.AppendLine(\"End Sub\");\r\n                //p.Workbook.CodeModule.Code = sb.ToString();\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteCommentIssue()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"CommentDelete.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"S3\"];\r\n                ws.Comments[0].RichText.Add(\"T\");\r\n                ws.Comments[0].RichText.Add(\"x\");\r\n                var ws2 = p.Workbook.Worksheets.Add(\"Copied S3\", ws);\r\n                ws.InsertRow(2,1);\r\n                ws.DeleteRow(2);\r\n                ws2.DeleteRow(2);\r\n                ws.InsertRow(2, 2);\r\n                var c = ws2.Comments;   // Access the comment collection to force loading it. Otherwise Exception!\r\n                int dummy = c.Count;    // to load!\r\n                p.Workbook.Worksheets.Delete(ws);\r\n                p.Workbook.Worksheets.Delete(ws2);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void DeleteWorksheetIssue()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"CommentDelete.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"S3\"];\r\n                var c = ws.Comments; // Access the comment collection to force loading it. Otherwise Exception!\r\n                int dummy = c.Count; // to load!\r\n                //ws.DeleteRow(2);\r\n                dummy = c.Count; // to load!\r\n                p.Workbook.Worksheets.Delete(ws);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue294()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"test_excel_workbook_before2-xl.xlsx\"))\r\n            {\r\n                var s = p.Workbook.Styles.NamedStyles.Count;\r\n                var ws = p.Workbook.Worksheets[\"Summary\"];\r\n                p.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue333_2()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"issue333-2.xlsx\"))\r\n            {\r\n                var sheet = p.Workbook.Worksheets[1];\r\n                Assert.IsFalse(string.IsNullOrEmpty(sheet.Cells[8, 1].Formula));\r\n                Assert.IsFalse(string.IsNullOrEmpty(sheet.Cells[9, 1].Formula));\r\n                Assert.IsFalse(string.IsNullOrEmpty(sheet.Cells[9, 2].Formula));\r\n                Assert.IsFalse(string.IsNullOrEmpty(sheet.Cells[32, 2].Formula));\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void S107()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"2021-03-18 - Styling issues.xlsm\"))\r\n            {\r\n                p.Save();\r\n                var p2 = new ExcelPackage(p.Stream);\r\n                p2.SaveAs(new FileInfo(p.File.DirectoryName + \"\\\\Test.xlsm\"));\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void S127()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Tagging Template V15 - New Format.xlsx\"))\r\n            {\r\n                SaveWorkbook(\"Tagging Template V15 - New Format2.xlsx\",p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void MergeIssue()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"MergeIssue.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[\"s7\"];\r\n                ws.Cells[\"B2:F2\"].Merge = false;\r\n                ws.Cells[\"B2:F12\"].Clear();\r\n                ws.Cells[\"B2:F2\"].Merge = true;\r\n\r\n                ws.Cells[\"B2:F12\"].Merge = false;\r\n                ws.Cells[\"B2:F12\"].Clear();\r\n\r\n                ws.Cells[\"B2:F12\"].Merge = true;\r\n                ws.Cells[\"B1:F12\"].Clear();\r\n\r\n                ws.Cells[\"B2:F2\"].Merge = true;\r\n                ws.Cells[\"B2:F2\"].Merge = false;\r\n                ws.Cells[\"B2:F12\"].Clear();\r\n                ws.Cells[\"B2:F2\"].Merge = true;\r\n            }\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DefinedNamesAddressIssue()\r\n        {\r\n            using (var p = OpenPackage(\"defnames.xlsx\"))\r\n            {\r\n                var ws1 = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                var ws2 = p.Workbook.Worksheets.Add(\"Sheet2\");\r\n\r\n                var name = ws1.Names.Add(\"Name2\", ws1.Cells[\"B1:C5\"]);\r\n                Assert.AreEqual(\"Sheet1\", name.Worksheet.Name);\r\n                name.Address = \"Sheet3!B2:C6\";\r\n                Assert.IsNull(name.Worksheet);\r\n                Assert.AreEqual(\"Sheet3\" ,name.WorkSheetName);\r\n\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue341()\r\n        {\r\n            using (var package = OpenTemplatePackage(\"Base_debug.xlsx\"))\r\n            {\r\n                using (var atomic_sheet_package = OpenTemplatePackage(\"Test_debug.xlsx\"))\r\n                {\r\n                    var s = atomic_sheet_package.Workbook.Worksheets[\"Test3\"];\r\n                    var s_copy = package.Workbook.Worksheets.Add(\"Test3\", s); // Exception on this line\r\n                    s_copy.Drawings[0].As.Chart.LineChart.Series[0].XSeries = \"A1:a15\";\r\n                    atomic_sheet_package.Save();\r\n                }\r\n                package.Save();\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue347_2()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"i347.xlsx\"))\r\n            {\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue353()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"HeaderFooterTest (1).xlsx\"))\r\n            {\r\n                ExcelWorksheet worksheet = p.Workbook.Worksheets[0]; \r\n                Assert.IsFalse(worksheet.HeaderFooter.differentFirst); \r\n                Assert.IsFalse(worksheet.HeaderFooter.differentOddEven);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue354()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"i354.xlsx\"))\r\n            {\r\n                var ws1=p.Workbook.Worksheets[0];\r\n                var ws2 = p.Workbook.Worksheets[2];\r\n                var pt = ws1.PivotTables.Add(ws1.Cells[\"A2\"], ws2.Cells[\"A1:E3005\"], \"pt\");\r\n                ws2.Cells[\"B2\"].Value = eDateGroupBy.Years;\r\n                ws2.Cells[\"B3\"].Value = eDateGroupBy.Months;\r\n                pt.ColumnFields.Add(pt.Fields[1]);\r\n                pt.RowFields.Add(pt.Fields[4]);\r\n                pt.Fields[4].AddDateGrouping(eDateGroupBy.Years | eDateGroupBy.Months);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void MatchNamedRangeIssue()\r\n        {\r\n            foreach (bool onColumns in new[] { true, false })\r\n            {\r\n                var ep = new ExcelPackage();\r\n                var ws = ep.Workbook.Worksheets.Add(\"Test\");\r\n\r\n                // Header area (along with freezing the header in the view)\r\n                ws.Cells[1, 1, 1, 8].Style.Font.Bold = true;\r\n                for (int i = 1; i < 9; ++i)\r\n                    ws.Cells[1, i].Value = $\"Test {i}\";\r\n                ws.View.FreezePanes(2, 1);\r\n\r\n                if (onColumns)\r\n                {\r\n                    // Set the horizontal alignment on the columns themselves\r\n                    ws.Column(3).Style.HorizontalAlignment = ws.Column(4).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;\r\n                    ws.Column(5).Style.HorizontalAlignment = ws.Column(6).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;\r\n                    ws.Column(7).Style.HorizontalAlignment = ws.Column(8).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Right;\r\n                }\r\n                else\r\n                {\r\n                    // Set the horizontal alignment on the cells of the header\r\n                    ws.Cells[1, 3, 1, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;\r\n                    ws.Cells[1, 5, 1, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;\r\n                    ws.Cells[1, 7, 1, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Right;\r\n                }\r\n\r\n                for (int row = 2; row < 30; ++row)\r\n                {\r\n                    for (int i = 1; i < 9; ++i)\r\n                        ws.Cells[row, i].Value = row % 2 == 0 ? (8 * (row - 2) + i).ToString() : $\"Test {8 * (row - 2) + i}\";\r\n                    if (!onColumns)\r\n                    {\r\n                        // Set the horizontal alignment on this row's cells\r\n                        ws.Cells[row, 3, row, 4].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;\r\n                        ws.Cells[row, 5, row, 6].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;\r\n                        ws.Cells[row, 7, row, 8].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Right;\r\n                    }\r\n                }\r\n\r\n                ws.Cells.AutoFitColumns(0);\r\n\r\n                ep.SaveAs(new FileInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), $\"AlignmentTest-On{(onColumns ? \"Columns\" : \"Cells\")}.xlsx\")));\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue382()\r\n        {\r\n            using (var p = OpenPackage(\"Issue382.xlsx\", true))\r\n            {\r\n                p.Workbook.Styles.NamedStyles[0].Style.Font.Size = 9;\r\n                var ws = p.Workbook.Worksheets.Add(\"Sheet1\");\r\n                ws.Cells[\"A1\"].Value = \"Cell Value\";                \r\n                ws.Cells.AutoFitColumns();\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n        [TestMethod]\r\n        public void Issue381()\r\n        {\r\n            using (var p = OpenTemplatePackage(\"Issue381.xlsx\"))\r\n            {\r\n                var ws = p.Workbook.Worksheets[1];\r\n                Assert.AreEqual(2, ws.Drawings.Count);\r\n                SaveAndCleanup(p);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "test_imports": ["using System;", "using System.Diagnostics;", "using System.Drawing;", "using System.Linq;", "using System.Reflection;", "using Microsoft.VisualStudio.TestTools.UnitTesting;", "using System.IO;", "using OfficeOpenXml;", "using OfficeOpenXml.Style;", "using System.Data;", "using OfficeOpenXml.Table;", "using System.Collections.Generic;", "using OfficeOpenXml.Table.PivotTable;", "using System.Text;", "using System.Globalization;", "using OfficeOpenXml.Drawing;", "using System.Threading;", "using OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup;", "using System.Threading.Tasks;", "using OfficeOpenXml.FormulaParsing.Excel.Functions.Math;", "using OfficeOpenXml.FormulaParsing.ExcelUtilities;"], "test_namespace": "EPPlusTest", "test_class_name": "Issues", "test_file_path": "EPPlusTest/Issues.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}, {"tests": "using Microsoft.VisualStudio.TestTools.UnitTesting;\r\nusing OfficeOpenXml;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Runtime.InteropServices;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace EPPlusTest.ThreadedComments\r\n{\r\n    [TestClass]\r\n    public class ThreadedCommentsDeleteTests : TestBase\r\n    {\r\n        static ExcelPackage _pck;\r\n        [ClassInitialize]\r\n        public static void Init(TestContext context)\r\n        {\r\n            InitBase();\r\n            _pck = OpenPackage(\"ThreadedCommentDelete.xlsx\", true);\r\n        }\r\n        [ClassCleanup]\r\n        public static void Cleanup()\r\n        {\r\n            SaveAndCleanup(_pck);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void DeleteOneRowShiftUp()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"OneRowA2\");\r\n            var th=ws.ThreadedComments.Add(\"A2\");\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"Shift up from A2\");\r\n\r\n            Assert.IsNotNull(ws.Cells[\"A2\"].ThreadedComment);\r\n            ws.DeleteRow(1, 1);\r\n            Assert.IsNull(ws.Cells[\"A2\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteOneColumnShiftLeft()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"OneColumnB1\");\r\n            var th = ws.ThreadedComments.Add(\"B1\");\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"Shift left from B1\");\r\n\r\n            Assert.IsNotNull(ws.Cells[\"B1\"].ThreadedComment);\r\n            ws.DeleteColumn(1, 1);\r\n            Assert.IsNull(ws.Cells[\"B1\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteOneRowDeleteThreadedComment()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteA1Row\");\r\n            var th = ws.ThreadedComments.Add(\"A1\");\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"DELTETED!\");\r\n\r\n            Assert.AreEqual(1, ws.ThreadedComments.Count);\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].ThreadedComment);\r\n            ws.DeleteRow(1, 1);\r\n            Assert.AreEqual(0, ws.ThreadedComments.Count);\r\n            Assert.IsNull(ws.Cells[\"A1\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteOneColumnThreadedComment()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"DeleteA1Column\");\r\n            var th = ws.ThreadedComments.Add(\"A1\");\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"DELTETED!\");\r\n\r\n            Assert.AreEqual(1, ws.ThreadedComments.Count);\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].ThreadedComment);\r\n            ws.DeleteColumn(1, 1);\r\n            Assert.AreEqual(0, ws.ThreadedComments.Count);\r\n            Assert.IsNull(ws.Cells[\"A1\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteTwoRowA3()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"A1_A2RowC1\");\r\n            var th = ws.Cells[\"A3\"].AddThreadedComment();\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"Shift down from A1\");\r\n\r\n            Assert.IsNotNull(ws.Cells[\"A3\"].ThreadedComment);\r\n            ws.Cells[\"A1:A2\"].Delete(eShiftTypeDelete.Up);\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].ThreadedComment);\r\n            Assert.IsNull(ws.Cells[\"A3\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteTwoColumnC1()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"A1_B1ColumnC1\");\r\n            var th = ws.Cells[\"C1\"].AddThreadedComment();\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"Shift right from A1\");\r\n\r\n            Assert.IsNotNull(ws.Cells[\"C1\"].ThreadedComment);\r\n            ws.Cells[\"A1:B1\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.IsNotNull(ws.Cells[\"A1\"].ThreadedComment);\r\n            Assert.IsNull(ws.Cells[\"C1\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteInRangeColumn()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"ColumnInRange\");\r\n            var th = ws.Cells[\"B2:B4\"].AddThreadedComment();\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"Deleted\");\r\n            ws.ThreadedComments[\"B3\"].AddComment(p.Id, \"No shift from B3\");\r\n            ws.Cells[\"B4\"].ThreadedComment.AddComment(p.Id, \"No shift from B4\");\r\n\r\n            Assert.IsNotNull(ws.Cells[\"B2\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"B3\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"B4\"].ThreadedComment);\r\n            Assert.AreEqual(3, ws.ThreadedComments.Count);\r\n            ws.Cells[\"A2:B2\"].Delete(eShiftTypeDelete.Left);\r\n            Assert.AreEqual(2, ws.ThreadedComments.Count);\r\n            Assert.IsNotNull(ws.Cells[\"B3\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"B4\"].ThreadedComment);\r\n        }\r\n        [TestMethod]\r\n        public void DeleteInRangeRow()\r\n        {\r\n            var ws = _pck.Workbook.Worksheets.Add(\"RowInRange\");\r\n            var th = ws.Cells[\"B2:D2\"].AddThreadedComment();\r\n            var p = ws.ThreadedComments.Persons.Add(\"Jan K\u00e4llman\");\r\n            th.AddComment(p.Id, \"Shift down from B2\");\r\n            ws.ThreadedComments[\"C2\"].AddComment(p.Id, \"No shift from C2\");\r\n            ws.Cells[\"D2\"].ThreadedComment.AddComment(p.Id, \"No shift from D2\");\r\n\r\n            Assert.IsNotNull(ws.Cells[\"B2\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"C2\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"D2\"].ThreadedComment);\r\n            ws.Cells[\"B1\"].Delete(eShiftTypeDelete.Up);\r\n\r\n            Assert.IsNotNull(ws.Cells[\"B1\"].ThreadedComment);\r\n            Assert.IsNull(ws.Cells[\"B2\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"C2\"].ThreadedComment);\r\n            Assert.IsNotNull(ws.Cells[\"D2\"].ThreadedComment);\r\n        }\r\n    }\r\n}\r\n", "test_imports": ["using Microsoft.VisualStudio.TestTools.UnitTesting;", "using OfficeOpenXml;", "using System;", "using System.Collections.Generic;", "using System.Linq;", "using System.Runtime.InteropServices;", "using System.Text;", "using System.Threading.Tasks;"], "test_namespace": "EPPlusTest.ThreadedComments", "test_class_name": "ThreadedCommentsDeleteTests", "test_file_path": "EPPlusTest/ThreadedComments/ThreadedCommentsDeleteTests.cs", "test_runner": "MSTest", "project_path": "EPPlusTest/EPPlus.Test.csproj"}], "results": {"(code, new_tests)": [[], [], []]}, "new_tests": "using OfficeOpenXml.Table.PivotTable;\nusing OfficeOpenXml.Table;\nusing System.Threading;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\nusing System.Linq;\nusing OfficeOpenXml.Drawing.Vml;\nusing OfficeOpenXml.Drawing.Chart;\nusing OfficeOpenXml;\nusing System.Data;\nusing System.Reflection;\nusing System;\nusing OfficeOpenXml.Style;\nusing OfficeOpenXml.Drawing;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Globalization;\n\nnamespace EPPlusTest\n{\n\n[TestClass]\npublic class WorkSheetTests\n{\n    [TestMethod]\n    public void DeleteRow_Test_1()\n{\n        // Arrange\n        var package = new ExcelPackage();\n        var worksheet = package.Workbook.Worksheets.Add(\"TestSheet\");\n        worksheet.Cells[1, 1].Value = \"A1\";\n        worksheet.Cells[2, 1].Value = \"A2\";\n        worksheet.Cells[3, 1].Value = \"A3\";\n\n        // Act\n        worksheet.DeleteRow(2);\n\n        // Assert\n        Assert.AreEqual(\"A1\", worksheet.Cells[1, 1].Value);\n        Assert.AreEqual(\"A3\", worksheet.Cells[2, 1].Value); // A3 should now be in row 2\n        Assert.IsNull(worksheet.Cells[3, 1].Value); // Row 3 should be empty\n    }\n\n    [TestMethod]\n    public void DeleteRow_Test_2()\n    {\n        // Arrange\n        var package = new ExcelPackage();\n        var worksheet = package.Workbook.Worksheets.Add(\"TestSheet\");\n        worksheet.Cells[1, 1].Value = \"A1\";\n        worksheet.Cells[2, 1].Value = \"A2\";\n        worksheet.Cells[3, 1].Value = \"A3\";\n        worksheet.Cells[4, 1].Value = \"A4\";\n\n        // Act\n        worksheet.DeleteRow(1, 2); // Delete rows 1 and 2\n\n        // Assert\n        Assert.IsNull(worksheet.Cells[1, 1].Value); // Row 1 should be empty\n        Assert.AreEqual(\"A3\", worksheet.Cells[2, 1].Value); // A3 should now be in row 2\n        Assert.AreEqual(\"A4\", worksheet.Cells[3, 1].Value); // A4 should now be in row 3\n    }\n\n    [TestMethod]\n    public void DeleteRow_Test_3()\n    {\n        // Arrange\n        var package = new ExcelPackage();\n        var worksheet = package.Workbook.Worksheets.Add(\"TestSheet\");\n        for (int i = 1; i <= 5; i++)\n        {\n            worksheet.Cells[i, 1].Value = $\"A{i}\";\n        }\n\n        // Act\n        worksheet.DeleteRow(3, 3); // Delete rows 3, 4, and 5\n\n        // Assert\n        Assert.AreEqual(\"A1\", worksheet.Cells[1, 1].Value);\n        Assert.AreEqual(\"A2\", worksheet.Cells[2, 1].Value);\n        Assert.IsNull(worksheet.Cells[3, 1].Value); // Row 3 should be empty\n        Assert.IsNull(worksheet.Cells[4, 1].Value); // Row 4 should be empty\n        Assert.IsNull(worksheet.Cells[5, 1].Value); // Row 5 should be empty\n    }\n\n    [TestMethod]\n    public void DeleteRow_Test_4()\n    {\n        // Arrange\n        var package = new ExcelPackage();\n        var worksheet = package.Workbook.Worksheets.Add(\"TestSheet\");\n        worksheet.Cells[1, 1].Value = \"A1\";\n        worksheet.Cells[2, 1].Value = \"A2\";\n\n        // Act\n        worksheet.DeleteRow(1); // Delete the first row\n\n        // Assert\n        Assert.AreEqual(\"A2\", worksheet.Cells[1, 1].Value); // A2 should now be in row 1\n        Assert.IsNull(worksheet.Cells[2, 1].Value); // Row 2 should be empty\n    }\n\n    [TestMethod]\n    public void DeleteRow_Test_5()\n    {\n        // Arrange\n        var package = new ExcelPackage();\n        var worksheet = package.Workbook.Worksheets.Add(\"TestSheet\");\n        worksheet.Cells[1, 1].Value = \"A1\";\n        worksheet.Cells[2, 1].Value = \"A2\";\n        worksheet.Cells[3, 1].Value = \"A3\";\n\n        // Act\n        worksheet.DeleteRow(3); // Delete the last row\n\n        // Assert\n        Assert.AreEqual(\"A1\", worksheet.Cells[1, 1].Value);\n        Assert.AreEqual(\"A2\", worksheet.Cells[2, 1].Value);\n        Assert.IsNull(worksheet.Cells[3, 1].Value); // Row 3 should be empty\n    }\n}}", "response": {"id": "chatcmpl-Axb1malh69dDLcZJ4IWvburSQl1UB", "choices": [{"finish_reason": "stop", "index": 0, "logprobs": null, "message": {"content": "```csharp\nfor (int i = 0; i < rows; i++)\n{\n    int currentRow = rowFrom + i;\n    // Remove values, formulas, and styles for the row\n    _values.RemoveRow(currentRow);\n    _formulas.RemoveRow(currentRow);\n    _flags.RemoveRow(currentRow);\n    _hyperLinks.RemoveRow(currentRow);\n    _commentsStore.RemoveRow(currentRow);\n    _threadedCommentsStore.RemoveRow(currentRow);\n    _metadataStore.RemoveRow(currentRow);\n    \n    // Update merged cells if necessary\n    _mergedCells.RemoveRow(currentRow);\n    \n    // Adjust the row count and shift rows up\n    for (int j = currentRow + 1; j <= _maxCol; j++)\n    {\n        if (_values.Exists(j, 0)) // Assuming 0 is the first column\n        {\n            // Shift the row data up\n            _values.SetValueInner(j - 1, 0, _values.GetValueInner(j, 0));\n            _formulas.SetValueInner(j - 1, 0, _formulas.GetValueInner(j, 0));\n            _flags.SetValueInner(j - 1, 0, _flags.GetValueInner(j, 0));\n            _hyperLinks.SetValueInner(j - 1, 0, _hyperLinks.GetValueInner(j, 0));\n            _commentsStore.SetValueInner(j - 1, 0, _commentsStore.GetValueInner(j, 0));\n            _threadedCommentsStore.SetValueInner(j - 1, 0, _threadedCommentsStore.GetValueInner(j, 0));\n            _metadataStore.SetValueInner(j - 1, 0, _metadataStore.GetValueInner(j, 0));\n        }\n    }\n}\n\n// Update the max row count\n_maxCol -= rows;\n```", "role": "assistant", "function_call": null, "tool_calls": null, "refusal": null}}], "created": 1738767050, "model": "gpt-4o-mini-2024-07-18", "object": "chat.completion", "system_fingerprint": "fp_bd83329f63", "usage": {"completion_tokens": 386, "prompt_tokens": 5942, "total_tokens": 6328, "prompt_tokens_details": {"cached_tokens": 0, "audio_tokens": 0}, "completion_tokens_details": {"reasoning_tokens": 0, "audio_tokens": 0, "accepted_prediction_tokens": 0, "rejected_prediction_tokens": 0}}, "service_tier": "default"}}