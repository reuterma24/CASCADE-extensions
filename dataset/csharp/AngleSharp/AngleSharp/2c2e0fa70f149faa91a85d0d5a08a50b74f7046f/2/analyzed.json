[
    {
        "doc": "/// <summary>\r\n/// Acts if a li tag in the InBody state has been found.\r\n/// </summary>\r\n/// <param name = \"tag\">The actual tag given.</param>",
        "signature": {
            "name": "InBodyStartTagListItem",
            "returns": "void",
            "params": [
                "HtmlTagToken tag"
            ],
            "modifier": [],
            "annotations": [],
            "generics": []
        },
        "language": "csharp",
        "parent": {
            "name": "HtmlParser",
            "doc": "/// <summary>\r\n/// Represents the Tree construction as specified in\r\n/// 8.2.5 Tree construction, on the following page:\r\n/// http://www.w3.org/html/wg/drafts/html/master/syntax.html\r\n/// </summary>",
            "other_methods": [
                {
                    "doc": "/// <summary>\r\n/// Parses the given source asynchronously and creates the document.\r\n/// </summary>\r\n/// <returns>\r\n/// The task which could be awaited or continued differently.\r\n/// </returns>",
                    "signature": {
                        "name": "ParseAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            return ParseAsync(CancellationToken.None);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Parses the given source asynchronously and creates the document.\r\n/// </summary>\r\n/// <param name = \"cancelToken\">The cancellation token to use.</param>\r\n/// <returns>\r\n/// The task which could be awaited or continued differently.\r\n/// </returns>",
                    "signature": {
                        "name": "ParseAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [
                            "CancellationToken cancelToken"
                        ],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            lock (_syncGuard)\r\n            {\r\n                if (!_started)\r\n                {\r\n                    _started = true;\r\n                    _parsing = KernelAsync(cancelToken);\r\n                }\r\n            }\r\n\r\n            return _parsing;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Parses the given source and creates the document.\r\n/// </summary>",
                    "signature": {
                        "name": "Parse",
                        "returns": "IHtmlDocument",
                        "params": [],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            lock (_syncGuard)\r\n            {\r\n                if (!_started)\r\n                {\r\n                    _started = true;\r\n                    Kernel();\r\n                }\r\n            }\r\n\r\n            return _document;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Parses the given source as an embedded document asynchronously and\r\n/// creates the document.\r\n/// </summary>\r\n/// <returns>\r\n/// The task which could be awaited or continued differently.\r\n/// </returns>",
                    "signature": {
                        "name": "ParseEmbeddedAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            return ParseEmbeddedAsync(CancellationToken.None);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Parses the given source as an embedded document asynchronously and\r\n/// creates the document.\r\n/// </summary>\r\n/// <param name = \"cancelToken\">The cancellation token to use.</param>\r\n/// <returns>\r\n/// The task which could be awaited or continued differently.\r\n/// </returns>",
                    "signature": {
                        "name": "ParseEmbeddedAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [
                            "CancellationToken cancelToken"
                        ],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            lock (_syncGuard)\r\n            {\r\n                if (!_started)\r\n                {\r\n                    _started = true;\r\n                    _embedded = true;\r\n                    _parsing = KernelAsync(cancelToken);\r\n                }\r\n            }\r\n\r\n            return _parsing;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Parses the given source as an embedded document and creates the\r\n/// document.\r\n/// </summary>",
                    "signature": {
                        "name": "ParseEmbedded",
                        "returns": "IDocument",
                        "params": [],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            lock (_syncGuard)\r\n            {\r\n                if (!_started)\r\n                {\r\n                    _started = true;\r\n                    _embedded = true;\r\n                    Kernel();\r\n                }\r\n            }\r\n\r\n            return _document;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Switches to the fragment algorithm with the specified context\r\n/// element. Then parses the given source asynchronously and creates\r\n/// the document.\r\n/// </summary>\r\n/// <param name = \"context\">\r\n/// The context element where the algorithm is applied to.\r\n/// </param>\r\n/// <returns>\r\n/// The task which could be awaited or continued differently.\r\n/// </returns>",
                    "signature": {
                        "name": "ParseFragmentAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [
                            "IElement context"
                        ],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            return ParseFragmentAsync(context, CancellationToken.None);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Switches to the fragment algorithm with the specified context\r\n/// element. Then parses the given source asynchronously and creates\r\n/// the document.\r\n/// </summary>\r\n/// <param name = \"context\">\r\n/// The context element where the algorithm is applied to.\r\n/// </param>\r\n/// <param name = \"cancelToken\">The cancellation token to use.</param>\r\n/// <returns>\r\n/// The task which could be awaited or continued differently.\r\n/// </returns>",
                    "signature": {
                        "name": "ParseFragmentAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [
                            "IElement context",
                            "CancellationToken cancelToken"
                        ],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            lock (_syncGuard)\r\n            {\r\n                if (!_started)\r\n                {\r\n                    _started = true;\r\n                    SwitchToFragment(context as Element);\r\n                    _parsing = KernelAsync(cancelToken);\r\n                }\r\n            }\r\n\r\n            return _parsing;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Switches to the fragment algorithm with the specified context\r\n/// element. Then parses the given source and creates the document.\r\n/// </summary>\r\n/// <param name = \"context\">\r\n/// The context element where the algorithm is applied to.\r\n/// </param>\r\n/// <returns></returns>",
                    "signature": {
                        "name": "ParseFragment",
                        "returns": "IDocument",
                        "params": [
                            "IElement context"
                        ],
                        "modifier": [
                            "public"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            lock (_syncGuard)\r\n            {\r\n                if (!_started)\r\n                {\r\n                    _started = true;\r\n                    SwitchToFragment(context as Element);\r\n                    Kernel();\r\n                }\r\n            }\r\n\r\n            return _document;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Switches to the fragment algorithm with the specified context\r\n/// element.\r\n/// </summary>\r\n/// <param name = \"context\">\r\n/// The context element where the algorithm is applied to.\r\n/// </param>\r\n/// <returns>The current instance for chaining.</returns>",
                    "signature": {
                        "name": "SwitchToFragment",
                        "returns": "void",
                        "params": [
                            "Element context"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (context == null)\r\n                throw new ArgumentNullException(\"context\");\r\n\r\n            var tagName = context.LocalName;\r\n\r\n            if (tagName.IsOneOf(Tags.Title, Tags.Textarea))\r\n                _tokenizer.State = HtmlParseMode.RCData;\r\n            else if (tagName.IsOneOf(Tags.Style, Tags.Xmp, Tags.Iframe, Tags.NoEmbed, Tags.NoFrames))\r\n                _tokenizer.State = HtmlParseMode.Rawtext;\r\n            else if (tagName == Tags.Script)\r\n                _tokenizer.State = HtmlParseMode.Script;\r\n            else if (tagName == Tags.Plaintext)\r\n                _tokenizer.State = HtmlParseMode.Plaintext;\r\n            else if (tagName == Tags.NoScript && _scripting)\r\n                _tokenizer.State = HtmlParseMode.Rawtext;\r\n\r\n            var root = new HtmlHtmlElement(_document);\r\n            _document.AddNode(root);\r\n            _openElements.Add(root);\r\n\r\n            if (context is HtmlTemplateElement)\r\n                _templateModes.Push(HtmlTreeMode.InTemplate);\r\n\r\n            Reset(context);\r\n\r\n            _fragmentContext = context;\r\n            _tokenizer.IsAcceptingCharacterData = !AdjustedCurrentNode.Flags.HasFlag(NodeFlags.HtmlMember);\r\n\r\n            do\r\n            {\r\n                if (context is HtmlFormElement)\r\n                {\r\n                    _currentFormElement = (HtmlFormElement)context;\r\n                    break;\r\n                }\r\n\r\n                context = context.ParentElement as Element;\r\n            }\r\n            while (context != null);\r\n        }"
                },
                {
                    "doc": "",
                    "signature": {
                        "name": "Restart",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            _currentMode = HtmlTreeMode.Initial;\r\n            _tokenizer.State = HtmlParseMode.PCData;\r\n            _document.ReplaceAll(null, true);\r\n            _frameset = true;\r\n            _openElements.Clear();\r\n            _formattingElements.Clear();\r\n            _templateModes.Clear();\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Resets the current insertation mode to the rules according to the\r\n/// algorithm specified in 8.2.3.1 The insertion mode.\r\n/// http://www.w3.org/html/wg/drafts/html/master/syntax.html#the-insertion-mode\r\n/// </summary>",
                    "signature": {
                        "name": "Reset",
                        "returns": "void",
                        "params": [
                            "IElement context = null"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var last = false;\r\n            var node = default(IElement);\r\n\r\n            for (var i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                node = _openElements[i];\r\n\r\n                if (i == 0)\r\n                {\r\n                    last = true;\r\n                    node = context ?? node;\r\n                }\r\n\r\n                var tagName = node.LocalName;\r\n\r\n                if (tagName == Tags.Select)\r\n                    _currentMode = HtmlTreeMode.InSelect;\r\n                else if (tagName.IsOneOf(Tags.Th, Tags.Td))\r\n                    _currentMode = last ? HtmlTreeMode.InBody : HtmlTreeMode.InCell;\r\n                else if (tagName == Tags.Tr)\r\n                    _currentMode = HtmlTreeMode.InRow;\r\n                else if (tagName.IsOneOf(Tags.Thead, Tags.Tfoot, Tags.Tbody))\r\n                    _currentMode = HtmlTreeMode.InTableBody;\r\n                else if (tagName == Tags.Body)\r\n                    _currentMode = HtmlTreeMode.InBody;\r\n                else if (tagName == Tags.Table)\r\n                    _currentMode = HtmlTreeMode.InTable;\r\n                else if (tagName == Tags.Caption)\r\n                    _currentMode = HtmlTreeMode.InCaption;\r\n                else if (tagName == Tags.Colgroup)\r\n                    _currentMode = HtmlTreeMode.InColumnGroup;\r\n                else if (tagName == Tags.Template)\r\n                    _currentMode = _templateModes.Peek();\r\n                else if (tagName == Tags.Html)\r\n                    _currentMode = HtmlTreeMode.BeforeHead;\r\n                else if (tagName == Tags.Head)\r\n                    _currentMode = last ? HtmlTreeMode.InBody : HtmlTreeMode.InHead;\r\n                else if (tagName == Tags.Frameset)\r\n                    _currentMode = HtmlTreeMode.InFrameset;\r\n                else if (last)\r\n                    _currentMode = HtmlTreeMode.InBody;\r\n                else\r\n                    continue;\r\n\r\n                break;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Consumes a token and processes it.\r\n/// </summary>\r\n/// <param name = \"token\">The token to consume.</param>",
                    "signature": {
                        "name": "Consume",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var node = AdjustedCurrentNode;\r\n\r\n            if (node == null || token.Type == HtmlTokenType.EndOfFile || node.Flags.HasFlag(NodeFlags.HtmlMember) ||\r\n                (node.Flags.HasFlag(NodeFlags.HtmlTip) && token.IsHtmlCompatible) ||\r\n                (node.Flags.HasFlag(NodeFlags.MathTip) && token.IsMathCompatible) ||\r\n                (node.Flags.HasFlag(NodeFlags.MathMember) && token.IsSvg && node.LocalName == Tags.AnnotationXml))\r\n                Home(token);\r\n            else\r\n                Foreign(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Takes the method corresponding to the current insertation mode.\r\n/// </summary>\r\n/// <param name = \"token\">The token to insert / use.</param>",
                    "signature": {
                        "name": "Home",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (_currentMode)\r\n            {\r\n                case HtmlTreeMode.Initial:\r\n                    Initial(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.BeforeHtml:\r\n                    BeforeHtml(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.BeforeHead:\r\n                    BeforeHead(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InHead:\r\n                    InHead(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InHeadNoScript:\r\n                    InHeadNoScript(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.AfterHead:\r\n                    AfterHead(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InBody:\r\n                    InBody(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.Text:\r\n                    Text(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InTable:\r\n                    InTable(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InCaption:\r\n                    InCaption(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InColumnGroup:\r\n                    InColumnGroup(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InTableBody:\r\n                    InTableBody(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InRow:\r\n                    InRow(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InCell:\r\n                    InCell(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InSelect:\r\n                    InSelect(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InSelectInTable:\r\n                    InSelectInTable(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InTemplate:\r\n                    InTemplate(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.AfterBody:\r\n                    AfterBody(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.InFrameset:\r\n                    InFrameset(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.AfterFrameset:\r\n                    AfterFrameset(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.AfterAfterBody:\r\n                    AfterAfterBody(token);\r\n                    return;\r\n\r\n                case HtmlTreeMode.AfterAfterFrameset:\r\n                    AfterAfterFrameset(token);\r\n                    return;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.1 The \"initial\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "Initial",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        var doctype = (HtmlDoctypeToken)token;\r\n\r\n                        if (!doctype.IsValid)\r\n                            RaiseErrorOccurred(HtmlParseError.DoctypeInvalid, token);\r\n\r\n                        AddDoctype(doctype);\r\n\r\n                        if (doctype.IsFullQuirks)\r\n                            _document.QuirksMode = QuirksMode.On;\r\n                        else if (doctype.IsLimitedQuirks)\r\n                            _document.QuirksMode = QuirksMode.Limited;\r\n\r\n                        _currentMode = HtmlTreeMode.BeforeHtml;\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        token.TrimStart();\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        _document.AddComment(token);\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            if (_embedded == false)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.DoctypeMissing, token);\r\n                _document.QuirksMode = QuirksMode.On;\r\n            }\r\n\r\n            _currentMode = HtmlTreeMode.BeforeHtml;\r\n            BeforeHtml(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.2 The \"before html\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "BeforeHtml",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        token.TrimStart();\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        _document.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        if (token.Name != Tags.Html)\r\n                            break;\r\n\r\n                        AddRoot(token.AsTag());\r\n                        _currentMode = HtmlTreeMode.BeforeHead;\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name.IsOneOf(Tags.Html, Tags.Body, Tags.Br, Tags.Head))\r\n                            break;\r\n\r\n                        RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            BeforeHtml(HtmlTagToken.Open(Tags.Html));\r\n            BeforeHead(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.3 The \"before head\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "BeforeHead",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        token.TrimStart();\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                        {\r\n                            InBody(token);\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Head)\r\n                        {\r\n                            AddElement(new HtmlHeadElement(_document), token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InHead;\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name.IsOneOf(Tags.Html, Tags.Body, Tags.Br, Tags.Head))\r\n                            break;\r\n\r\n                        RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            BeforeHead(HtmlTagToken.Open(Tags.Head));\r\n            InHead(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.4 The \"in head\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InHead",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                        {\r\n                            InBody(token);\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Meta)\r\n                        {\r\n                            var element = new HtmlMetaElement(_document);\r\n                            AddElement(element, token.AsTag(), true);\r\n                            var encoding = element.GetEncoding();\r\n                            CloseCurrentNode();\r\n\r\n                            if (encoding != null)\r\n                            {\r\n                                try\r\n                                {\r\n                                    _document.Source.CurrentEncoding = encoding;\r\n                                }\r\n                                catch (NotSupportedException)\r\n                                {\r\n                                    Restart();\r\n                                }\r\n                            }\r\n\r\n                            return;\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Link, Tags.Base, Tags.BaseFont, Tags.Bgsound))\r\n                        {\r\n                            AddElement(token.AsTag(), true);\r\n                            CloseCurrentNode();\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Title)\r\n                        {\r\n                            RCDataAlgorithm(token.AsTag());\r\n                            return;\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Style, Tags.NoFrames) || (_scripting && tagName == Tags.NoScript))\r\n                        {\r\n                            RawtextAlgorithm(token.AsTag());\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.NoScript)\r\n                        {\r\n                            AddElement(token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InHeadNoScript;\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Script)\r\n                        {\r\n                            var script = new HtmlScriptElement(_document);\r\n                            AddElement(script, token.AsTag());\r\n                            script.IsParserInserted = true;\r\n                            script.IsAlreadyStarted = IsFragmentCase;\r\n                            _tokenizer.State = HtmlParseMode.Script;\r\n                            _previousMode = _currentMode;\r\n                            _currentMode = HtmlTreeMode.Text;\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Head)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.HeadTagMisplaced, token);\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Template)\r\n                        {\r\n                            AddElement(new HtmlTemplateElement(_document), token.AsTag());\r\n                            _formattingElements.AddScopeMarker();\r\n                            _frameset = false;\r\n                            _currentMode = HtmlTreeMode.InTemplate;\r\n                            _templateModes.Push(HtmlTreeMode.InTemplate);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Head)\r\n                        {\r\n                            CloseCurrentNode();\r\n\r\n                            _currentMode = HtmlTreeMode.AfterHead;\r\n                            _waiting = _document.WaitForReady();\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Template)\r\n                        {\r\n                            if (TagCurrentlyOpen(Tags.Template))\r\n                            {\r\n                                GenerateImpliedEndTags();\r\n\r\n                                if (CurrentNode is HtmlTemplateElement == false)\r\n                                    RaiseErrorOccurred(HtmlParseError.TagClosingMismatch, token);\r\n\r\n                                CloseTemplate();\r\n                            }\r\n                            else\r\n                                RaiseErrorOccurred(HtmlParseError.TagInappropriate, token);\r\n\r\n                            return;\r\n                        }\r\n                        else if (!tagName.IsOneOf(Tags.Html, Tags.Body, Tags.Br))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n            }\r\n\r\n            CloseCurrentNode();\r\n            _currentMode = HtmlTreeMode.AfterHead;\r\n            AfterHead(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.5 The \"in head noscript\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InHeadNoScript",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        InHead(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsOneOf(Tags.Style, Tags.Link, Tags.BaseFont, Tags.Meta, Tags.NoFrames, Tags.Bgsound))\r\n                            InHead(token);\r\n                        else if (tagName == Tags.Html)\r\n                            InBody(token);\r\n                        else if (tagName.IsOneOf(Tags.Head, Tags.NoScript))\r\n                            RaiseErrorOccurred(HtmlParseError.TagInappropriate, token);\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.NoScript)\r\n                        {\r\n                            CloseCurrentNode();\r\n                            _currentMode = HtmlTreeMode.InHead;\r\n                            return;\r\n                        }\r\n                        else if (tagName != Tags.Br)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n            CloseCurrentNode();\r\n            _currentMode = HtmlTreeMode.InHead;\r\n            InHead(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.6 The \"after head\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "AfterHead",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                        {\r\n                            InBody(token);\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Body)\r\n                        {\r\n                            AfterHeadStartTagBody(token.AsTag());\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Frameset)\r\n                        {\r\n                            AddElement(new HtmlFrameSetElement(_document), token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InFrameset;\r\n                            return;\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Link, Tags.Meta, Tags.Script, Tags.Style, Tags.Title) || tagName.IsOneOf(Tags.Base, Tags.BaseFont, Tags.Bgsound, Tags.NoFrames))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagMustBeInHead, token);\r\n                            var index = _openElements.Count;\r\n                            var head = _document.Head as Element;\r\n                            _openElements.Add(head);\r\n                            InHead(token);\r\n                            _openElements.Remove(head);\r\n                            return;\r\n                        }\r\n                        else if (tagName == Tags.Head)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.HeadTagMisplaced, token);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name.IsOneOf(Tags.Html, Tags.Body, Tags.Br))\r\n                            break;\r\n\r\n                        RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            AfterHeadStartTagBody(HtmlTagToken.Open(Tags.Body));\r\n            _frameset = true;\r\n            Home(token);\r\n        }"
                },
                {
                    "doc": "",
                    "signature": {
                        "name": "InBodyStartTag",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var tagName = tag.Name;\r\n\r\n            if (tagName == Tags.Div)\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName == Tags.A)\r\n            {\r\n                for (var i = _formattingElements.Count - 1; i >= 0; i--)\r\n                {\r\n                    if (_formattingElements[i] == null)\r\n                        break;\r\n\r\n                    if (_formattingElements[i] is HtmlAnchorElement)\r\n                    {\r\n                        var format = _formattingElements[i];\r\n                        RaiseErrorOccurred(HtmlParseError.AnchorNested, tag);\r\n                        HeisenbergAlgorithm(HtmlTagToken.Close(Tags.A));\r\n                        _openElements.Remove(format);\r\n                        _formattingElements.Remove(format);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                ReconstructFormatting();\r\n                var element = new HtmlAnchorElement(_document);\r\n                AddElement(element, tag);\r\n                _formattingElements.AddFormatting(element);\r\n            }\r\n            else if (tagName == Tags.Span)\r\n            {\r\n                ReconstructFormatting();\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName == Tags.Li)\r\n            {\r\n                InBodyStartTagListItem(tag);\r\n            }\r\n            else if (tagName == Tags.Img)\r\n            {\r\n                InBodyStartTagBreakrow(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Ul, Tags.P))\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName == Tags.Script)\r\n            {\r\n                InHead(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.H3, Tags.H2, Tags.H4, Tags.H1, Tags.H6, Tags.H5))\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                if (CurrentNode is HtmlHeadingElement)\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.HeadingNested, tag);\r\n                    CloseCurrentNode();\r\n                }\r\n\r\n                AddElement(new HtmlHeadingElement(_document, tagName), tag);\r\n            }\r\n            else if (tagName == Tags.Input)\r\n            {\r\n                ReconstructFormatting();\r\n                AddElement(new HtmlInputElement(_document), tag, true);\r\n                CloseCurrentNode();\r\n\r\n                if (!tag.GetAttribute(AttributeNames.Type).Equals(AttributeNames.Hidden, StringComparison.OrdinalIgnoreCase))\r\n                    _frameset = false;\r\n            }\r\n            else if (tagName == Tags.Form)\r\n            {\r\n                if (_currentFormElement == null)\r\n                {\r\n                    if (IsInButtonScope())\r\n                        InBodyEndTagParagraph(tag);\r\n\r\n                    _currentFormElement = new HtmlFormElement(_document);\r\n                    AddElement(_currentFormElement, tag);\r\n                }\r\n                else\r\n                    RaiseErrorOccurred(HtmlParseError.FormAlreadyOpen, tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Ol, Tags.Dl, Tags.Fieldset) ||\r\n                     tagName.IsOneOf(Tags.Figcaption, Tags.Figure, Tags.Article, Tags.Aside, Tags.BlockQuote, Tags.Center) ||\r\n                     tagName.IsOneOf(Tags.Address, Tags.Dialog, Tags.Dir, Tags.Summary, Tags.Details, Tags.Main) ||\r\n                     tagName.IsOneOf(Tags.Footer, Tags.Header, Tags.Nav, Tags.Section, Tags.Menu, Tags.Hgroup))\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.B, Tags.Strong, Tags.Code, Tags.Em, Tags.U, Tags.I) ||\r\n                     tagName.IsOneOf(Tags.Font, Tags.S, Tags.Small, Tags.Strike, Tags.Big, Tags.Tt))\r\n            {\r\n                ReconstructFormatting();\r\n                _formattingElements.AddFormatting(AddElement(tag));\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Caption, Tags.Col, Tags.Colgroup) ||\r\n                     tagName.IsOneOf(Tags.Frame, Tags.Head) ||\r\n                     tagName.IsOneOf(Tags.Tbody, Tags.Td, Tags.Tfoot, Tags.Th, Tags.Thead, Tags.Tr))\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TagCannotStartHere, tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Style, Tags.Link) ||\r\n                     tagName.IsOneOf(Tags.Meta, Tags.Title, Tags.NoFrames, Tags.Template) ||\r\n                     tagName.IsOneOf(Tags.Base, Tags.BaseFont, Tags.Bgsound))\r\n            {\r\n                InHead(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Pre, Tags.Listing))\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(tag);\r\n                _frameset = false;\r\n                PreventNewLine();\r\n            }\r\n            else if (tagName == Tags.Button)\r\n            {\r\n                if (IsInScope<HtmlButtonElement>())\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.ButtonInScope, tag);\r\n                    InBodyEndTagBlock(tag);\r\n                    InBody(tag);\r\n                }\r\n                else\r\n                {\r\n                    ReconstructFormatting();\r\n                    AddElement(new HtmlButtonElement(_document), tag);\r\n                    _frameset = false;\r\n                }\r\n            }\r\n            else if (tagName == Tags.Table)\r\n            {\r\n                if (_document.QuirksMode != QuirksMode.On && IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(new HtmlTableElement(_document), tag);\r\n                _frameset = false;\r\n                _currentMode = HtmlTreeMode.InTable;\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Br, Tags.Area, Tags.Embed, Tags.Keygen, Tags.Wbr))\r\n            {\r\n                InBodyStartTagBreakrow(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.MenuItem, Tags.Param, Tags.Source, Tags.Track))\r\n            {\r\n                AddElement(tag, true);\r\n                CloseCurrentNode();\r\n            }\r\n            else if (tagName == Tags.Hr)\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(new HtmlHrElement(_document), tag, true);\r\n                CloseCurrentNode();\r\n                _frameset = false;\r\n            }\r\n            else if (tagName == Tags.Textarea)\r\n            {\r\n                AddElement(new HtmlTextAreaElement(_document), tag);\r\n                _tokenizer.State = HtmlParseMode.RCData;\r\n                _previousMode = _currentMode;\r\n                _frameset = false;\r\n                _currentMode = HtmlTreeMode.Text;\r\n                PreventNewLine();\r\n            }\r\n            else if (tagName == Tags.Select)\r\n            {\r\n                ReconstructFormatting();\r\n                AddElement(new HtmlSelectElement(_document), tag);\r\n                _frameset = false;\r\n\r\n                switch (_currentMode)\r\n                {\r\n                    case HtmlTreeMode.InTable:\r\n                    case HtmlTreeMode.InTableBody:\r\n                    case HtmlTreeMode.InCaption:\r\n                    case HtmlTreeMode.InRow:\r\n                    case HtmlTreeMode.InCell:\r\n                        _currentMode = HtmlTreeMode.InSelectInTable;\r\n                        break;\r\n\r\n                    default:\r\n                        _currentMode = HtmlTreeMode.InSelect;\r\n                        break;\r\n                }\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Optgroup, Tags.Option))\r\n            {\r\n                if (CurrentNode is HtmlOptionElement)\r\n                    InBodyEndTagAnythingElse(HtmlTagToken.Close(Tags.Option));\r\n\r\n                ReconstructFormatting();\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Dd, Tags.Dt))\r\n            {\r\n                InBodyStartTagDefinitionItem(tag);\r\n            }\r\n            else if (tagName == Tags.Iframe)\r\n            {\r\n                _frameset = false;\r\n                RawtextAlgorithm(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Applet, Tags.Marquee, Tags.Object))\r\n            {\r\n                ReconstructFormatting();\r\n                AddElement(tag);\r\n                _formattingElements.AddScopeMarker();\r\n                _frameset = false;\r\n            }\r\n            else if (tagName == Tags.Image)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.ImageTagNamedWrong, tag);\r\n                tag.Name = Tags.Img;\r\n                InBodyStartTagBreakrow(tag);\r\n            }\r\n            else if (tagName == Tags.NoBr)\r\n            {\r\n                ReconstructFormatting();\r\n\r\n                if (IsInScope<HtmlNoNewlineElement>())\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.NobrInScope, tag);\r\n                    HeisenbergAlgorithm(tag);\r\n                    ReconstructFormatting();\r\n                }\r\n\r\n                _formattingElements.AddFormatting(AddElement(tag));\r\n            }\r\n            else if (tagName == Tags.Xmp)\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                ReconstructFormatting();\r\n                _frameset = false;\r\n                RawtextAlgorithm(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Rb, Tags.Rtc))\r\n            {\r\n                if (IsInScope<HtmlRubyElement>())\r\n                {\r\n                    GenerateImpliedEndTags();\r\n\r\n                    if (CurrentNode is HtmlRubyElement == false)\r\n                        RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n                }\r\n\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Rp, Tags.Rt))\r\n            {\r\n                if (IsInScope<HtmlRubyElement>())\r\n                {\r\n                    GenerateImpliedEndTagsExceptFor(Tags.Rtc);\r\n\r\n                    if (CurrentNode.LocalName.IsOneOf(Tags.Ruby, Tags.Rtc) == false)\r\n                        RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n                }\r\n\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName == Tags.NoEmbed)\r\n            {\r\n                RawtextAlgorithm(tag);\r\n            }\r\n            else if (tagName == Tags.NoScript)\r\n            {\r\n                if (_scripting)\r\n                {\r\n                    RawtextAlgorithm(tag);\r\n                    return;\r\n                }\r\n\r\n                ReconstructFormatting();\r\n                AddElement(tag);\r\n            }\r\n            else if (tagName == Tags.Math)\r\n            {\r\n                var element = new MathElement(_document, tagName);\r\n                ReconstructFormatting();\r\n\r\n                for (int i = 0; i < tag.Attributes.Count; i++)\r\n                {\r\n                    var name = tag.Attributes[i].Key;\r\n                    var value = tag.Attributes[i].Value;\r\n                    element.AdjustAttribute(name.AdjustToMathAttribute(), value);\r\n                }\r\n\r\n                AddElement(element);\r\n\r\n                if (tag.IsSelfClosing)\r\n                    _openElements.Remove(element);\r\n            }\r\n            else if (tagName == Tags.Svg)\r\n            {\r\n                var element = new SvgElement(_document, tagName);\r\n                ReconstructFormatting();\r\n\r\n                for (int i = 0; i < tag.Attributes.Count; i++)\r\n                {\r\n                    var name = tag.Attributes[i].Key;\r\n                    var value = tag.Attributes[i].Value;\r\n                    element.AdjustAttribute(name.AdjustToSvgAttribute(), value);\r\n                }\r\n\r\n                AddElement(element);\r\n\r\n                if (tag.IsSelfClosing)\r\n                    _openElements.Remove(element);\r\n            }\r\n            else if (tagName == Tags.Plaintext)\r\n            {\r\n                if (IsInButtonScope())\r\n                    InBodyEndTagParagraph(tag);\r\n\r\n                AddElement(tag);\r\n                _tokenizer.State = HtmlParseMode.Plaintext;\r\n            }\r\n            else if (tagName == Tags.Frameset)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.FramesetMisplaced, tag);\r\n\r\n                if (_openElements.Count != 1 && _openElements[1] is HtmlBodyElement && _frameset)\r\n                {\r\n                    _openElements[1].RemoveFromParent();\r\n\r\n                    while (_openElements.Count > 1)\r\n                        CloseCurrentNode();\r\n\r\n                    AddElement(new HtmlFrameSetElement(_document), tag);\r\n                    _currentMode = HtmlTreeMode.InFrameset;\r\n                }\r\n            }\r\n            else if (tagName == Tags.Html)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.HtmlTagMisplaced, tag);\r\n\r\n                if (_templateModes.Count == 0)\r\n                    _openElements[0].SetUniqueAttributes(tag.Attributes);\r\n            }\r\n            else if (tagName == Tags.Body)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.BodyTagMisplaced, tag);\r\n\r\n                if (_templateModes.Count == 0 && _openElements.Count > 1 && _openElements[1] is HtmlBodyElement)\r\n                {\r\n                    _frameset = false;\r\n                    _openElements[1].SetUniqueAttributes(tag.Attributes);\r\n                }\r\n            }\r\n            else if (tagName == Tags.IsIndex)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TagInappropriate, tag);\r\n\r\n                if (_currentFormElement == null)\r\n                {\r\n                    InBody(HtmlTagToken.Open(Tags.Form));\r\n\r\n                    if (tag.GetAttribute(AttributeNames.Action) != String.Empty)\r\n                        _currentFormElement.SetAttribute(null, AttributeNames.Action, tag.GetAttribute(AttributeNames.Action));\r\n\r\n                    InBody(HtmlTagToken.Open(Tags.Hr));\r\n                    InBody(HtmlTagToken.Open(Tags.Label));\r\n\r\n                    if (tag.GetAttribute(AttributeNames.Prompt) != String.Empty)\r\n                        AddCharacters(tag.GetAttribute(AttributeNames.Prompt));\r\n                    else\r\n                        AddCharacters(\"This is a searchable index. Enter search keywords: \");\r\n\r\n                    var input = HtmlTagToken.Open(Tags.Input);\r\n                    input.AddAttribute(AttributeNames.Name, Tags.IsIndex);\r\n\r\n                    for (int i = 0; i < tag.Attributes.Count; i++)\r\n                    {\r\n                        if (tag.Attributes[i].Key.IsOneOf(AttributeNames.Name, AttributeNames.Action, AttributeNames.Prompt) == false)\r\n                            input.AddAttribute(tag.Attributes[i].Key, tag.Attributes[i].Value);\r\n                    }\r\n\r\n                    InBody(input);\r\n                    InBody(HtmlTagToken.Close(Tags.Label));\r\n                    InBody(HtmlTagToken.Open(Tags.Hr));\r\n                    InBody(HtmlTagToken.Close(Tags.Form));\r\n                }\r\n            }\r\n            else\r\n            {\r\n                ReconstructFormatting();\r\n                AddElement(tag);\r\n            }\r\n        }"
                },
                {
                    "doc": "",
                    "signature": {
                        "name": "InBodyEndTag",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var tagName = tag.Name;\r\n\r\n            if (tagName == Tags.Div)\r\n            {\r\n                InBodyEndTagBlock(tag);\r\n            }\r\n            else if (tagName == Tags.A)\r\n            {\r\n                HeisenbergAlgorithm(tag);\r\n            }\r\n            else if (tagName == Tags.Li)\r\n            {\r\n                if (IsInListItemScope())\r\n                {\r\n                    GenerateImpliedEndTagsExceptFor(tagName);\r\n\r\n                    if (CurrentNode is HtmlListItemElement == false)\r\n                        RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n\r\n                    ClearStackBackTo<HtmlListItemElement>();\r\n                    CloseCurrentNode();\r\n                }\r\n                else\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.ListItemNotInScope, tag);\r\n                }\r\n            }\r\n            else if (tagName == Tags.P)\r\n            {\r\n                InBodyEndTagParagraph(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Ol, Tags.Ul, Tags.Dl, Tags.Fieldset, Tags.Button) ||\r\n                     tagName.IsOneOf(Tags.Figcaption, Tags.Figure, Tags.Article, Tags.Aside, Tags.BlockQuote, Tags.Center) ||\r\n                     tagName.IsOneOf(Tags.Address, Tags.Dialog, Tags.Dir, Tags.Summary, Tags.Details, Tags.Listing) ||\r\n                     tagName.IsOneOf(Tags.Footer, Tags.Header, Tags.Nav, Tags.Section, Tags.Menu, Tags.Hgroup) ||\r\n                     tagName.IsOneOf(Tags.Main, Tags.Pre))\r\n            {\r\n                InBodyEndTagBlock(tag);\r\n            }\r\n            else if (tagName.IsOneOf(Tags.B, Tags.Strong, Tags.Code) ||\r\n                     tagName.IsOneOf(Tags.NoBr, Tags.Em, Tags.U, Tags.I) ||\r\n                     tagName.IsOneOf(Tags.Font, Tags.S, Tags.Small, Tags.Strike, Tags.Big, Tags.Tt))\r\n            {\r\n                HeisenbergAlgorithm(tag);\r\n            }\r\n            else if (tagName == Tags.Form)\r\n            {\r\n                var node = _currentFormElement;\r\n                _currentFormElement = null;\r\n\r\n                if (node != null && IsInScope(node.LocalName))\r\n                {\r\n                    GenerateImpliedEndTags();\r\n\r\n                    if (CurrentNode != node)\r\n                        RaiseErrorOccurred(HtmlParseError.FormClosedWrong, tag);\r\n\r\n                    _openElements.Remove(node);\r\n                }\r\n                else\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.FormNotInScope, tag);\r\n                }\r\n            }\r\n            else if (tagName == Tags.Br)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, tag);\r\n                InBodyStartTagBreakrow(HtmlTagToken.Open(Tags.Br));\r\n            }\r\n            else if (tagName.IsOneOf(Tags.H3, Tags.H2, Tags.H4, Tags.H1, Tags.H6, Tags.H5))\r\n            {\r\n                if (IsInScope<HtmlHeadingElement>())\r\n                {\r\n                    GenerateImpliedEndTags();\r\n\r\n                    if (CurrentNode.LocalName != tagName)\r\n                        RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n\r\n                    ClearStackBackTo<HtmlHeadingElement>();\r\n                    CloseCurrentNode();\r\n                }\r\n                else\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.HeadingNotInScope, tag);\r\n                }\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Dd, Tags.Dt))\r\n            {\r\n                if (IsInScope(tagName))\r\n                {\r\n                    GenerateImpliedEndTagsExceptFor(tagName);\r\n\r\n                    if (CurrentNode.LocalName != tagName)\r\n                        RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n\r\n                    ClearStackBackTo(tagName);\r\n                    CloseCurrentNode();\r\n                }\r\n                else\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.ListItemNotInScope, tag);\r\n                }\r\n            }\r\n            else if (tagName.IsOneOf(Tags.Applet, Tags.Marquee, Tags.Object))\r\n            {\r\n                if (IsInScope(tagName))\r\n                {\r\n                    GenerateImpliedEndTags();\r\n\r\n                    if (CurrentNode.LocalName != tagName)\r\n                        RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n\r\n                    ClearStackBackTo(tagName);\r\n                    CloseCurrentNode();\r\n                    _formattingElements.ClearFormatting();\r\n                }\r\n                else\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.ObjectNotInScope, tag);\r\n                }\r\n            }\r\n            else if (tagName == Tags.Body)\r\n            {\r\n                InBodyEndTagBody(tag);\r\n            }\r\n            else if (tagName == Tags.Html)\r\n            {\r\n                if (InBodyEndTagBody(tag))\r\n                    AfterBody(tag);\r\n            }\r\n            else if (tagName == Tags.Template)\r\n            {\r\n                InHead(tag);\r\n            }\r\n            else\r\n            {\r\n                InBodyEndTagAnythingElse(tag);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.7 The \"in body\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InBody",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        ReconstructFormatting();\r\n                        AddCharacters(token.Data);\r\n\r\n                        if (token.HasContent)\r\n                            _frameset = false;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        InBodyStartTag(token.AsTag());\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        InBodyEndTag(token.AsTag());\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        CheckBodyOnClosing(token);\r\n\r\n                        if (_templateModes.Count != 0)\r\n                            InTemplate(token);\r\n                        else\r\n                            End();\r\n\r\n                        return;\r\n                    }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.8 The \"text\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "Text",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        AddCharacters(token.Data);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name != Tags.Script)\r\n                        {\r\n                            CloseCurrentNode();\r\n                            _currentMode = _previousMode;\r\n                        }\r\n                        else\r\n                        {\r\n                            _waiting = RunScript(CurrentNode as HtmlScriptElement);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.EOF, token);\r\n                        CloseCurrentNode();\r\n                        _currentMode = _previousMode;\r\n                        Consume(token);\r\n                        return;\r\n                    }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.9 The \"in table\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InTable",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Caption)\r\n                        {\r\n                            ClearStackBackTo<HtmlTableElement>();\r\n                            _formattingElements.AddScopeMarker();\r\n                            AddElement(new HtmlTableCaptionElement(_document), token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InCaption;\r\n                        }\r\n                        else if (tagName == Tags.Colgroup)\r\n                        {\r\n                            ClearStackBackTo<HtmlTableElement>();\r\n                            AddElement(new HtmlTableColgroupElement(_document), token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InColumnGroup;\r\n                        }\r\n                        else if (tagName == Tags.Col)\r\n                        {\r\n                            InTable(HtmlTagToken.Open(Tags.Colgroup));\r\n                            InColumnGroup(token);\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Tbody, Tags.Thead, Tags.Tfoot))\r\n                        {\r\n                            ClearStackBackTo<HtmlTableElement>();\r\n                            AddElement(new HtmlTableSectionElement(_document, tagName), token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InTableBody;\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Td, Tags.Th, Tags.Tr))\r\n                        {\r\n                            InTable(HtmlTagToken.Open(Tags.Tbody));\r\n                            InTableBody(token);\r\n                        }\r\n                        else if (tagName == Tags.Table)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TableNesting, token);\r\n\r\n                            if (InTableEndTagTable(token))\r\n                                Home(token);\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Script, Tags.Style, Tags.Template))\r\n                        {\r\n                            InHead(token);\r\n                        }\r\n                        else if (tagName == Tags.Input)\r\n                        {\r\n                            var tag = token.AsTag();\r\n\r\n                            if (tag.GetAttribute(AttributeNames.Type).Equals(AttributeNames.Hidden, StringComparison.OrdinalIgnoreCase))\r\n                            {\r\n                                RaiseErrorOccurred(HtmlParseError.InputUnexpected, token);\r\n                                AddElement(new HtmlInputElement(_document), tag, true);\r\n                                CloseCurrentNode();\r\n                            }\r\n                            else\r\n                            {\r\n                                RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n                                InBodyWithFoster(token);\r\n                            }\r\n                        }\r\n                        else if (tagName == Tags.Form)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.FormInappropriate, token);\r\n\r\n                            if (_currentFormElement == null)\r\n                            {\r\n                                _currentFormElement = new HtmlFormElement(_document);\r\n                                AddElement(_currentFormElement, token.AsTag());\r\n                                CloseCurrentNode();\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.IllegalElementInTableDetected, token);\r\n                            InBodyWithFoster(token);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Table)\r\n                        {\r\n                            InTableEndTagTable(token);\r\n                        }\r\n                        else if (tagName == Tags.Template)\r\n                        {\r\n                            InHead(token);\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Body, Tags.Colgroup, Tags.Col, Tags.Caption, Tags.Html) || tagName.IsOneOf(Tags.Tbody, Tags.Tr, Tags.Thead, Tags.Th, Tags.Tfoot, Tags.Td))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        }\r\n                        else\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.IllegalElementInTableDetected, token);\r\n                            InBodyWithFoster(token);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        if (CurrentNode.IsTableElement())\r\n                        {\r\n                            InTableText(token);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n            InBodyWithFoster(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.10 The \"in table text\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InTableText",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (token.HasContent)\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n                InBodyWithFoster(token);\r\n            }\r\n            else\r\n            {\r\n                AddCharacters(token.Data);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.11 The \"in caption\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InCaption",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Caption)\r\n                        {\r\n                            InCaptionEndTagCaption(token);\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Body, Tags.Th, Tags.Colgroup, Tags.Html) || tagName.IsOneOf(Tags.Tbody, Tags.Col, Tags.Tfoot, Tags.Td, Tags.Thead, Tags.Tr))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        }\r\n                        else if (tagName == Tags.Table)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TableNesting, token);\r\n\r\n                            if (InCaptionEndTagCaption(token))\r\n                                InTable(token);\r\n                        }\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsOneOf(Tags.Caption, Tags.Th, Tags.Colgroup) || tagName.IsOneOf(Tags.Tbody, Tags.Col, Tags.Tfoot, Tags.Td, Tags.Thead, Tags.Tr))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotStartHere, token);\r\n\r\n                            if (InCaptionEndTagCaption(token))\r\n                                InTable(token);\r\n                        }\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            InBody(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.12 The \"in column group\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InColumnGroup",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                        {\r\n                            InBody(token);\r\n                        }\r\n                        else if (tagName == Tags.Col)\r\n                        {\r\n                            AddElement(new HtmlTableColElement(_document), token.AsTag(), true);\r\n                            CloseCurrentNode();\r\n                        }\r\n                        else if (tagName == Tags.Template)\r\n                        {\r\n                            InHead(token);\r\n                        }\r\n                        else\r\n                        {\r\n                            break;\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Colgroup)\r\n                            InColumnGroupEndTagColgroup(token);\r\n                        else if (tagName == Tags.Col)\r\n                            RaiseErrorOccurred(HtmlParseError.TagClosedWrong, token);\r\n                        else if (tagName == Tags.Template)\r\n                            InHead(token);\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            if (InColumnGroupEndTagColgroup(token))\r\n                InTable(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.13 The \"in table body\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InTableBody",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Tr)\r\n                        {\r\n                            ClearStackBackTo<HtmlTableSectionElement>();\r\n                            AddElement(new HtmlTableRowElement(_document), token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InRow;\r\n                        }\r\n                        else if (tagName.IsTableCellElement())\r\n                        {\r\n                            InTableBody(HtmlTagToken.Open(Tags.Tr));\r\n                            InRow(token);\r\n                        }\r\n                        else if (tagName.IsGeneralTableElement())\r\n                            InTableBodyCloseTable(token.AsTag());\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsTableSectionElement())\r\n                        {\r\n                            if (IsInTableScope(tagName))\r\n                            {\r\n                                ClearStackBackTo<HtmlTableSectionElement>();\r\n                                CloseCurrentNode();\r\n                                _currentMode = HtmlTreeMode.InTable;\r\n                            }\r\n                            else\r\n                                RaiseErrorOccurred(HtmlParseError.TableSectionNotInScope, token);\r\n                        }\r\n                        else if (tagName.IsSpecialTableElement(true))\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        else if (tagName == Tags.Table)\r\n                            InTableBodyCloseTable(token.AsTag());\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            InTable(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.14 The \"in row\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InRow",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsTableCellElement())\r\n                        {\r\n                            ClearStackBackTo<HtmlTableRowElement>();\r\n                            AddElement(token.AsTag());\r\n                            _currentMode = HtmlTreeMode.InCell;\r\n                            _formattingElements.AddScopeMarker();\r\n                        }\r\n                        else if (tagName.IsGeneralTableElement(true))\r\n                        {\r\n                            if (InRowEndTagTablerow(token))\r\n                                InTableBody(token);\r\n                        }\r\n                        else\r\n                        {\r\n                            break;\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Tr)\r\n                        {\r\n                            InRowEndTagTablerow(token);\r\n                        }\r\n                        else if (tagName == Tags.Table)\r\n                        {\r\n                            if (InRowEndTagTablerow(token))\r\n                                InTableBody(token);\r\n                        }\r\n                        else if (tagName.IsTableSectionElement())\r\n                        {\r\n                            if (IsInTableScope(tagName))\r\n                            {\r\n                                InRowEndTagTablerow(token);\r\n                                InTableBody(token);\r\n                            }\r\n                            else\r\n                                RaiseErrorOccurred(HtmlParseError.TableSectionNotInScope, token);\r\n                        }\r\n                        else if (tagName.IsSpecialTableElement())\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        }\r\n                        else\r\n                        {\r\n                            break;\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            InTable(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.15 The \"in cell\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InCell",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsTableCellElement() || tagName.IsGeneralTableElement(true))\r\n                        {\r\n                            if (IsInTableScope(Tags.Td) || IsInTableScope(Tags.Th))\r\n                            {\r\n                                InCellEndTagCell(token);\r\n                                Home(token);\r\n                            }\r\n                            else\r\n                            {\r\n                                RaiseErrorOccurred(HtmlParseError.TableCellNotInScope, token);\r\n                            }\r\n\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsTableCellElement())\r\n                        {\r\n                            InCellEndTagCell(token);\r\n                        }\r\n                        else if (tagName.IsSpecialTableElement())\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n                        }\r\n                        else if (tagName.IsTableElement())\r\n                        {\r\n                            if (IsInTableScope(tagName))\r\n                            {\r\n                                InCellEndTagCell(token);\r\n                                Home(token);\r\n                            }\r\n                            else\r\n                                RaiseErrorOccurred(HtmlParseError.TableNotInScope, token);\r\n                        }\r\n                        else\r\n                        {\r\n                            InBody(token);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            InBody(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.16 The \"in select\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InSelect",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        AddCharacters(token.Data);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                        {\r\n                            InBody(token);\r\n                        }\r\n                        else if (tagName == Tags.Option)\r\n                        {\r\n                            if (CurrentNode is HtmlOptionElement)\r\n                                InSelectEndTagOption(token);\r\n\r\n                            AddElement(new HtmlOptionElement(_document), token.AsTag());\r\n                        }\r\n                        else if (tagName == Tags.Optgroup)\r\n                        {\r\n                            if (CurrentNode is HtmlOptionElement)\r\n                                InSelectEndTagOption(token);\r\n\r\n                            if (CurrentNode is HtmlOptionsGroupElement)\r\n                                InSelectEndTagOptgroup(token);\r\n\r\n                            AddElement(new HtmlOptionsGroupElement(_document), token.AsTag());\r\n                        }\r\n                        else if (tagName == Tags.Select)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.SelectNesting, token);\r\n                            InSelectEndTagSelect();\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Input, Tags.Keygen, Tags.Textarea))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.IllegalElementInSelectDetected, token);\r\n\r\n                            if (IsInSelectScope(Tags.Select))\r\n                            {\r\n                                InSelectEndTagSelect();\r\n                                Home(token);\r\n                            }\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.Template, Tags.Script))\r\n                        {\r\n                            InHead(token);\r\n                        }\r\n                        else\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.IllegalElementInSelectDetected, token);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Template)\r\n                            InHead(token);\r\n                        else if (tagName == Tags.Optgroup)\r\n                            InSelectEndTagOptgroup(token);\r\n                        else if (tagName == Tags.Option)\r\n                            InSelectEndTagOption(token);\r\n                        else if (tagName == Tags.Select && IsInSelectScope(Tags.Select))\r\n                            InSelectEndTagSelect();\r\n                        else if (tagName == Tags.Select)\r\n                            RaiseErrorOccurred(HtmlParseError.SelectNotInScope, token);\r\n                        else\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n                default:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n                        return;\r\n                    }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.17 The \"in select in table\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InSelectInTable",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsTableCellElement() || tagName.IsTableElement() || tagName == Tags.Caption)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.IllegalElementInSelectDetected, token);\r\n                            InSelectEndTagSelect();\r\n                            Home(token);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsTableCellElement() || tagName.IsTableElement() || tagName == Tags.Caption)\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n\r\n                            if (IsInTableScope(tagName))\r\n                            {\r\n                                InSelectEndTagSelect();\r\n                                Home(token);\r\n                            }\r\n\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n            }\r\n\r\n            InSelect(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.18 The \"in template\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InTemplate",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName.IsOneOf(Tags.Link, Tags.Meta, Tags.Script, Tags.Style) || tagName.IsOneOf(Tags.Base, Tags.BaseFont, Tags.Bgsound, Tags.NoFrames, Tags.Template, Tags.Title))\r\n                            InHead(token);\r\n                        else if (tagName.IsOneOf(Tags.Caption, Tags.Colgroup, Tags.Tbody, Tags.Tfoot, Tags.Thead))\r\n                            TemplateStep(token, HtmlTreeMode.InTable);\r\n                        else if (tagName == Tags.Col)\r\n                            TemplateStep(token, HtmlTreeMode.InColumnGroup);\r\n                        else if (tagName == Tags.Tr)\r\n                            TemplateStep(token, HtmlTreeMode.InTableBody);\r\n                        else if (tagName.IsOneOf(Tags.Td, Tags.Th))\r\n                            TemplateStep(token, HtmlTreeMode.InRow);\r\n                        else\r\n                            TemplateStep(token, HtmlTreeMode.InBody);\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name == Tags.Template)\r\n                            InHead(token);\r\n                        else\r\n                            RaiseErrorOccurred(HtmlParseError.TagCannotEndHere, token);\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        if (TagCurrentlyOpen(Tags.Template))\r\n                        {\r\n                            RaiseErrorOccurred(HtmlParseError.EOF, token);\r\n                            CloseTemplate();\r\n                            Home(token);\r\n                            return;\r\n                        }\r\n\r\n                        End();\r\n                        return;\r\n                    }\r\n                default:\r\n                    {\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.19 The \"after body\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "AfterBody",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        ReconstructFormatting();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        _openElements[0].AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        if (token.Name == Tags.Html)\r\n                        {\r\n                            InBody(token);\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name == Tags.Html)\r\n                        {\r\n                            if (IsFragmentCase)\r\n                                RaiseErrorOccurred(HtmlParseError.TagInvalidInFragmentMode, token);\r\n                            else\r\n                                _currentMode = HtmlTreeMode.AfterAfterBody;\r\n\r\n                            return;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        End();\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n            _currentMode = HtmlTreeMode.InBody;\r\n            InBody(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.20 The \"in frameset\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "InFrameset",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                            InBody(token);\r\n                        else if (tagName == Tags.Frameset)\r\n                            AddElement(new HtmlFrameSetElement(_document), token.AsTag());\r\n                        else if (tagName == Tags.Frame)\r\n                        {\r\n                            AddElement(new HtmlFrameElement(_document), token.AsTag(), true);\r\n                            CloseCurrentNode();\r\n                        }\r\n                        else if (tagName == Tags.NoFrames)\r\n                            InHead(token);\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name != Tags.Frameset)\r\n                            break;\r\n\r\n                        if (CurrentNode != _openElements[0])\r\n                        {\r\n                            CloseCurrentNode();\r\n\r\n                            if (!IsFragmentCase && CurrentNode is HtmlFrameSetElement == false)\r\n                                _currentMode = HtmlTreeMode.AfterFrameset;\r\n                        }\r\n                        else\r\n                            RaiseErrorOccurred(HtmlParseError.CurrentNodeIsRoot, token);\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        if (CurrentNode != _document.DocumentElement)\r\n                            RaiseErrorOccurred(HtmlParseError.CurrentNodeIsNotRoot, token);\r\n\r\n                        End();\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.21 The \"after frameset\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "AfterFrameset",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                            InBody(token);\r\n                        else if (tagName == Tags.NoFrames)\r\n                            InHead(token);\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        if (token.Name != Tags.Html)\r\n                            break;\r\n\r\n                        _currentMode = HtmlTreeMode.AfterAfterFrameset;\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        End();\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.22 The \"after after body\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "AfterAfterBody",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        _document.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        ReconstructFormatting();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        if (token.Name != Tags.Html)\r\n                            break;\r\n\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        End();\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n            _currentMode = HtmlTreeMode.InBody;\r\n            InBody(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// See 8.2.5.4.23 The \"after after frameset\" insertion mode.\r\n/// </summary>\r\n/// <param name = \"token\">The passed token.</param>",
                    "signature": {
                        "name": "AfterAfterFrameset",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        _document.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        var str = token.TrimStart();\r\n                        ReconstructFormatting();\r\n                        AddCharacters(str);\r\n\r\n                        if (token.IsEmpty)\r\n                            return;\r\n\r\n                        break;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        InBody(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n\r\n                        if (tagName == Tags.Html)\r\n                            InBody(token);\r\n                        else if (tagName == Tags.NoFrames)\r\n                            InHead(token);\r\n                        else\r\n                            break;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndOfFile:\r\n                    {\r\n                        End();\r\n                        return;\r\n                    }\r\n            }\r\n\r\n            RaiseErrorOccurred(HtmlParseError.TokenNotPossible, token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Inserting something in the template.\r\n/// </summary>\r\n/// <param name = \"token\">The token to insert.</param>\r\n/// <param name = \"mode\">The mode to push.</param>",
                    "signature": {
                        "name": "TemplateStep",
                        "returns": "void",
                        "params": [
                            "HtmlToken token",
                            "HtmlTreeMode mode"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            _templateModes.Pop();\r\n            _templateModes.Push(mode);\r\n            _currentMode = mode;\r\n            Home(token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Closes the template element.\r\n/// </summary>",
                    "signature": {
                        "name": "CloseTemplate",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            while (_openElements.Count > 0)\r\n            {\r\n                var template = CurrentNode as HtmlTemplateElement;\r\n                CloseCurrentNode();\r\n\r\n                if (template != null)\r\n                {\r\n                    template.PopulateFragment();\r\n                    break;\r\n                }\r\n            }\r\n\r\n            _formattingElements.ClearFormatting();\r\n            _templateModes.Pop();\r\n            Reset();\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Closes the table if the section is in table scope.\r\n/// </summary>\r\n/// <param name = \"tag\">The tag to insert (closes table).</param>",
                    "signature": {
                        "name": "InTableBodyCloseTable",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInTableScope<HtmlTableSectionElement>())\r\n            {\r\n                ClearStackBackTo<HtmlTableSectionElement>();\r\n                CloseCurrentNode();\r\n                _currentMode = HtmlTreeMode.InTable;\r\n                InTable(tag);\r\n            }\r\n            else\r\n                RaiseErrorOccurred(HtmlParseError.TableSectionNotInScope, tag);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Acts if a option end tag had been seen in the InSelect state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>",
                    "signature": {
                        "name": "InSelectEndTagOption",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (CurrentNode is HtmlOptionElement)\r\n                CloseCurrentNode();\r\n            else\r\n                RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Acts if a optgroup end tag had been seen in the InSelect state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>",
                    "signature": {
                        "name": "InSelectEndTagOptgroup",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (_openElements.Count > 1 && _openElements[_openElements.Count - 1] is HtmlOptionElement && _openElements[_openElements.Count - 2] is HtmlOptionsGroupElement)\r\n                CloseCurrentNode();\r\n\r\n            if (CurrentNode is HtmlOptionsGroupElement)\r\n                CloseCurrentNode();\r\n            else\r\n                RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, token);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an colgroup end tag has been found in the InColumnGroup state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InColumnGroupEndTagColgroup",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (CurrentNode.LocalName == Tags.Colgroup)\r\n            {\r\n                CloseCurrentNode();\r\n                _currentMode = HtmlTreeMode.InTable;\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if a body start tag has been found in the AfterHead state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>",
                    "signature": {
                        "name": "AfterHeadStartTagBody",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            AddElement(new HtmlBodyElement(_document), token);\r\n            _frameset = false;\r\n            _currentMode = HtmlTreeMode.InBody;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Follows the generic rawtext parsing algorithm.\r\n/// </summary>\r\n/// <param name = \"tag\">The given tag token.</param>",
                    "signature": {
                        "name": "RawtextAlgorithm",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            AddElement(tag);\r\n            _previousMode = _currentMode;\r\n            _currentMode = HtmlTreeMode.Text;\r\n            _tokenizer.State = HtmlParseMode.Rawtext;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Follows the generic RCData parsing algorithm.\r\n/// </summary>\r\n/// <param name = \"tag\">The given tag token.</param>",
                    "signature": {
                        "name": "RCDataAlgorithm",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            AddElement(tag);\r\n            _previousMode = _currentMode;\r\n            _currentMode = HtmlTreeMode.Text;\r\n            _tokenizer.State = HtmlParseMode.RCData;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Acts if a dd or dt start tag in the InBody state has been found.\r\n/// </summary>\r\n/// <param name = \"tag\">The actual tag given.</param>",
                    "signature": {
                        "name": "InBodyStartTagDefinitionItem",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            _frameset = false;\r\n            var index = _openElements.Count - 1;\r\n            var node = _openElements[index];\r\n\r\n            while (true)\r\n            {\r\n                if (node is HtmlListItemElement && (node.LocalName == Tags.Dd || node.LocalName == Tags.Dt))\r\n                {\r\n                    InBody(HtmlTagToken.Close(node.LocalName));\r\n                    break;\r\n                }\r\n\r\n                if (node.Flags.HasFlag(NodeFlags.Special) && node is HtmlAddressElement == false && node is HtmlDivElement == false && node is HtmlParagraphElement == false)\r\n                    break;\r\n\r\n                node = _openElements[--index];\r\n            }\r\n\r\n            if (IsInButtonScope())\r\n                InBodyEndTagParagraph(tag);\r\n\r\n            AddElement(tag);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Acts if a block (button) end tag had been seen in the InBody state.\r\n/// </summary>\r\n/// <param name = \"tag\">The actual tag given.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InBodyEndTagBlock",
                        "returns": "Boolean",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInScope(tag.Name))\r\n            {\r\n                GenerateImpliedEndTags();\r\n\r\n                if (CurrentNode.LocalName != tag.Name)\r\n                    RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, tag);\r\n\r\n                ClearStackBackTo(tag.Name);\r\n                CloseCurrentNode();\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.BlockNotInScope, tag);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Acts if a nobr tag had been seen in the InBody state.\r\n/// </summary>\r\n/// <param name = \"tag\">The actual tag given.</param>",
                    "signature": {
                        "name": "HeisenbergAlgorithm",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var outer = 0;\r\n            var inner = 0;\r\n            var bookmark = 0;\r\n            var index = 0;\r\n\r\n            while (outer < 8)\r\n            {\r\n                var formattingElement = default(Element);\r\n                var furthestBlock = default(Element);\r\n\r\n                outer++;\r\n                index = 0;\r\n                inner = 0;\r\n\r\n                for (var j = _formattingElements.Count - 1; j >= 0; j--)\r\n                {\r\n                    if (_formattingElements[j] == null)\r\n                        break;\r\n\r\n                    if (_formattingElements[j].LocalName == tag.Name)\r\n                    {\r\n                        index = j;\r\n                        formattingElement = _formattingElements[j];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (formattingElement == null)\r\n                {\r\n                    InBodyEndTagAnythingElse(tag);\r\n                    break;\r\n                }\r\n\r\n                var openIndex = _openElements.IndexOf(formattingElement);\r\n\r\n                if (openIndex == -1)\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.FormattingElementNotFound, tag);\r\n                    _formattingElements.Remove(formattingElement);\r\n                    break;\r\n                }\r\n\r\n                if (!IsInScope(formattingElement.LocalName))\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.ElementNotInScope, tag);\r\n                    break;\r\n                }\r\n\r\n                if (openIndex != _openElements.Count - 1)\r\n                    RaiseErrorOccurred(HtmlParseError.TagClosedWrong, tag);\r\n\r\n                bookmark = index;\r\n\r\n                for (var j = openIndex + 1; j < _openElements.Count; j++)\r\n                {\r\n                    if (_openElements[j].Flags.HasFlag(NodeFlags.Special))\r\n                    {\r\n                        index = j;\r\n                        furthestBlock = _openElements[j];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (furthestBlock == null)\r\n                {\r\n                    do\r\n                    {\r\n                        furthestBlock = CurrentNode;\r\n                        CloseCurrentNode();\r\n                    }\r\n                    while (furthestBlock != formattingElement);\r\n\r\n                    _formattingElements.Remove(formattingElement);\r\n                    break;\r\n                }\r\n\r\n                var commonAncestor = _openElements[openIndex - 1];\r\n                var node = furthestBlock;\r\n                var lastNode = furthestBlock;\r\n\r\n                while (true)\r\n                {\r\n                    inner++;\r\n                    node = _openElements[--index];\r\n\r\n                    if (node == formattingElement)\r\n                        break;\r\n\r\n                    if (inner > 3 && _formattingElements.Contains(node))\r\n                        _formattingElements.Remove(node);\r\n\r\n                    if (!_formattingElements.Contains(node))\r\n                    {\r\n                        _openElements.Remove(node);\r\n                        continue;\r\n                    }\r\n\r\n                    var newElement = CopyElement(node);\r\n                    commonAncestor.AddNode(newElement);\r\n                    _openElements[index] = newElement;\r\n\r\n                    for (var l = 0; l != _formattingElements.Count; l++)\r\n                    {\r\n                        if (_formattingElements[l] == node)\r\n                        {\r\n                            _formattingElements[l] = newElement;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    node = newElement;\r\n\r\n                    if (lastNode == furthestBlock)\r\n                        bookmark++;\r\n\r\n                    if (lastNode.Parent != null)\r\n                        lastNode.Parent.RemoveChild(lastNode);\r\n\r\n                    node.AddNode(lastNode);\r\n                    lastNode = node;\r\n                }\r\n\r\n                if (lastNode.Parent != null)\r\n                    lastNode.Parent.RemoveChild(lastNode);\r\n\r\n                if (!commonAncestor.IsTableElement())\r\n                    commonAncestor.AddNode(lastNode);\r\n                else\r\n                    AddElementWithFoster(lastNode);\r\n\r\n                var element = CopyElement(formattingElement);\r\n\r\n                while (furthestBlock.ChildNodes.Length > 0)\r\n                {\r\n                    var childNode = furthestBlock.ChildNodes[0];\r\n                    furthestBlock.RemoveNode(0, childNode);\r\n                    element.AddNode(childNode);\r\n                }\r\n\r\n                furthestBlock.AddNode(element);\r\n                _formattingElements.Remove(formattingElement);\r\n                _formattingElements.Insert(bookmark, element);\r\n                _openElements.Remove(formattingElement);\r\n                _openElements.Insert(_openElements.IndexOf(furthestBlock) + 1, element);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Copies the element and its attributes to create a new element.\r\n/// </summary>\r\n/// <param name = \"element\">The old element (source).</param>\r\n/// <returns>The new element (target).</returns>",
                    "signature": {
                        "name": "CopyElement",
                        "returns": "Element",
                        "params": [
                            "Element element"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            return (Element)element.Clone(false);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Performs the InBody state with foster parenting.\r\n/// </summary>\r\n/// <param name = \"token\">The given token.</param>",
                    "signature": {
                        "name": "InBodyWithFoster",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            _foster = true;\r\n            InBody(token);\r\n            _foster = false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an anything else end tag has been found in the InBody state.\r\n/// </summary>\r\n/// <param name = \"tag\">The actual tag found.</param>",
                    "signature": {
                        "name": "InBodyEndTagAnythingElse",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var index = _openElements.Count - 1;\r\n            var node = CurrentNode;\r\n\r\n            do\r\n            {\r\n                if (node.LocalName == tag.Name)\r\n                {\r\n                    GenerateImpliedEndTagsExceptFor(tag.Name);\r\n\r\n                    if (node.LocalName != tag.Name)\r\n                        RaiseErrorOccurred(HtmlParseError.TagClosedWrong, tag);\r\n\r\n                    for (int i = _openElements.Count - 1; index <= i; i--)\r\n                        CloseCurrentNode();\r\n\r\n                    break;\r\n                }\r\n                else if (node.Flags.HasFlag(NodeFlags.Special))\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.TagClosedWrong, tag);\r\n                    break;\r\n                }\r\n\r\n                node = _openElements[--index];\r\n            }\r\n            while (true);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an body end tag has been found in the InBody state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InBodyEndTagBody",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInScope<HtmlBodyElement>())\r\n            {\r\n                CheckBodyOnClosing(token);\r\n                _currentMode = HtmlTreeMode.AfterBody;\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.BodyNotInScope, token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an br start tag has been found in the InBody state.\r\n/// </summary>\r\n/// <param name = \"tag\">The actual tag found.</param>",
                    "signature": {
                        "name": "InBodyStartTagBreakrow",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            ReconstructFormatting();\r\n            AddElement(tag);\r\n            CloseCurrentNode();\r\n            _frameset = false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an p end tag has been found in the InBody state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was found, otherwise false.</returns>",
                    "signature": {
                        "name": "InBodyEndTagParagraph",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInButtonScope())\r\n            {\r\n                GenerateImpliedEndTagsExceptFor(Tags.P);\r\n\r\n                if (CurrentNode is HtmlParagraphElement == false)\r\n                    RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, token);\r\n\r\n                ClearStackBackTo<HtmlParagraphElement>();\r\n                CloseCurrentNode();\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.ParagraphNotInScope, token);\r\n                InBody(HtmlTagToken.Open(Tags.P));\r\n                InBodyEndTagParagraph(token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an table end tag has been found in the InTable state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InTableEndTagTable",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInTableScope<HtmlTableElement>())\r\n            {\r\n                ClearStackBackTo<HtmlTableElement>();\r\n                CloseCurrentNode();\r\n                Reset();\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TableNotInScope, token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an tr end tag has been found in the InRow state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InRowEndTagTablerow",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInTableScope<HtmlTableRowElement>())\r\n            {\r\n                ClearStackBackTo<HtmlTableRowElement>();\r\n                CloseCurrentNode();\r\n                _currentMode = HtmlTreeMode.InTableBody;\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TableRowNotInScope, token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an select end tag has been found in the InSelect state.\r\n/// </summary>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InSelectEndTagSelect",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            ClearStackBackTo<HtmlSelectElement>();\r\n            CloseCurrentNode();\r\n            Reset();\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an caption end tag has been found in the InCaption state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InCaptionEndTagCaption",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInTableScope<HtmlTableCaptionElement>())\r\n            {\r\n                GenerateImpliedEndTags();\r\n\r\n                if (CurrentNode is HtmlTableCaptionElement == false)\r\n                    RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, token);\r\n\r\n                ClearStackBackTo<HtmlTableCaptionElement>();\r\n                CloseCurrentNode();\r\n                _formattingElements.ClearFormatting();\r\n                _currentMode = HtmlTreeMode.InTable;\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.CaptionNotInScope, token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Act as if an td or th end tag has been found in the InCell state.\r\n/// </summary>\r\n/// <param name = \"token\">The actual tag token.</param>\r\n/// <returns>True if the token was not ignored, otherwise false.</returns>",
                    "signature": {
                        "name": "InCellEndTagCell",
                        "returns": "Boolean",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (IsInTableScope<HtmlTableCellElement>())\r\n            {\r\n                GenerateImpliedEndTags();\r\n\r\n                if (CurrentNode is HtmlTableCellElement == false)\r\n                    RaiseErrorOccurred(HtmlParseError.TagDoesNotMatchCurrentNode, token);\r\n\r\n                ClearStackBackTo<HtmlTableCellElement>();\r\n                CloseCurrentNode();\r\n                _formattingElements.ClearFormatting();\r\n                _currentMode = HtmlTreeMode.InRow;\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                RaiseErrorOccurred(HtmlParseError.TableCellNotInScope, token);\r\n                return false;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// 8.2.5.5 The rules for parsing tokens in foreign content\r\n/// </summary>\r\n/// <param name = \"token\">The token to examine.</param>",
                    "signature": {
                        "name": "Foreign",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            switch (token.Type)\r\n            {\r\n                case HtmlTokenType.Character:\r\n                    {\r\n                        AddCharacters(token.Data.Replace(Symbols.Null, Symbols.Replacement));\r\n\r\n                        if (token.HasContent)\r\n                            _frameset = false;\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Comment:\r\n                    {\r\n                        CurrentNode.AddComment(token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.Doctype:\r\n                    {\r\n                        RaiseErrorOccurred(HtmlParseError.DoctypeTagInappropriate, token);\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.StartTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n                        var tag = token.AsTag();\r\n\r\n                        if (tagName == Tags.Font)\r\n                        {\r\n                            for (var i = 0; i != tag.Attributes.Count; i++)\r\n                            {\r\n                                if (tag.Attributes[i].Key.IsOneOf(AttributeNames.Color, AttributeNames.Face, AttributeNames.Size))\r\n                                {\r\n                                    ForeignNormalTag(tag);\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            ForeignSpecialTag(tag);\r\n                        }\r\n                        else if (tagName.IsOneOf(Tags.B, Tags.Big, Tags.BlockQuote, Tags.Body, Tags.Br, Tags.Center) ||\r\n                                 tagName.IsOneOf(Tags.Code, Tags.Dd, Tags.Div, Tags.Dl, Tags.Dt, Tags.Em) ||\r\n                                 tagName.IsOneOf(Tags.Embed, Tags.Head, Tags.Hr, Tags.I, Tags.Img, Tags.Li, Tags.Ul) ||\r\n                                 tagName.IsOneOf(Tags.H3, Tags.H2, Tags.H4, Tags.H1, Tags.H6, Tags.H5) ||\r\n                                 tagName.IsOneOf(Tags.Listing, Tags.Menu, Tags.Meta, Tags.NoBr, Tags.Ol) ||\r\n                                 tagName.IsOneOf(Tags.P, Tags.Pre, Tags.Ruby, Tags.S, Tags.Small, Tags.Span, Tags.Strike) ||\r\n                                 tagName.IsOneOf(Tags.Strong, Tags.Sub, Tags.Sup, Tags.Table, Tags.Tt, Tags.U, Tags.Var))\r\n                        {\r\n                            ForeignNormalTag(tag);\r\n                        }\r\n                        else\r\n                        {\r\n                            ForeignSpecialTag(tag);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                case HtmlTokenType.EndTag:\r\n                    {\r\n                        var tagName = token.Name;\r\n                        var node = CurrentNode;\r\n                        var script = node as HtmlScriptElement;\r\n\r\n                        if (script == null)\r\n                        {\r\n                            if (node.LocalName != tagName)\r\n                                RaiseErrorOccurred(HtmlParseError.TagClosingMismatch, token);\r\n\r\n                            for (int i = _openElements.Count - 1; i > 0; i--)\r\n                            {\r\n                                if (node.LocalName.Equals(tagName, StringComparison.OrdinalIgnoreCase))\r\n                                {\r\n                                    _openElements.RemoveRange(i + 1, _openElements.Count - i - 1);\r\n                                    CloseCurrentNode();\r\n                                    break;\r\n                                }\r\n\r\n                                node = _openElements[i - 1];\r\n\r\n                                if (node.Flags.HasFlag(NodeFlags.HtmlMember))\r\n                                {\r\n                                    Home(token);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            _waiting = RunScript(script);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Processes a special start tag token.\r\n/// </summary>\r\n/// <param name = \"tag\">The tag token to process.</param>",
                    "signature": {
                        "name": "ForeignSpecialTag",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var node = CreateForeignElementFrom(tag);\r\n\r\n            if (node != null)\r\n            {\r\n                CurrentNode.AddNode(node);\r\n\r\n                if (!tag.IsSelfClosing)\r\n                {\r\n                    _openElements.Add(node);\r\n                    _tokenizer.IsAcceptingCharacterData = true;\r\n                }\r\n                else if (tag.Name == Tags.Script)\r\n                {\r\n                    Foreign(HtmlTagToken.Close(Tags.Script));\r\n                }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Creates a foreign element from the given html tag.\r\n/// </summary>\r\n/// <param name = \"tag\">The tag of the foreign element.</param>\r\n/// <returns>The element or NULL if it is no MathML or SVG element.</returns>",
                    "signature": {
                        "name": "CreateForeignElementFrom",
                        "returns": "Element",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (AdjustedCurrentNode.Flags.HasFlag(NodeFlags.MathMember))\r\n            {\r\n                var node = Factory.MathElements.Create(_document, tag.Name);\r\n\r\n                for (int i = 0; i < tag.Attributes.Count; i++)\r\n                {\r\n                    var name = tag.Attributes[i].Key;\r\n                    var value = tag.Attributes[i].Value;\r\n                    node.AdjustAttribute(name.AdjustToMathAttribute(), value);\r\n                }\r\n\r\n                return node;\r\n            }\r\n            else if (AdjustedCurrentNode.Flags.HasFlag(NodeFlags.SvgMember))\r\n            {\r\n                var node = Factory.SvgElements.CreateSanatized(_document, tag.Name);\r\n\r\n                for (int i = 0; i < tag.Attributes.Count; i++)\r\n                {\r\n                    var name = tag.Attributes[i].Key;\r\n                    var value = tag.Attributes[i].Value;\r\n                    node.AdjustAttribute(name.AdjustToSvgAttribute(), value);\r\n                }\r\n\r\n                return node;\r\n            }\r\n\r\n            return null;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Processes a normal start tag token.\r\n/// </summary>\r\n/// <param name = \"tag\">The token to process.</param>",
                    "signature": {
                        "name": "ForeignNormalTag",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            RaiseErrorOccurred(HtmlParseError.TagCannotStartHere, tag);\r\n\r\n            if (IsFragmentCase)\r\n            {\r\n                ForeignSpecialTag(tag);\r\n                return;\r\n            }\r\n\r\n            var node = CurrentNode;\r\n\r\n            do\r\n            {\r\n                if (node is MathAnnotationXmlElement)\r\n                {\r\n                    var value = node.GetAttribute(null, AttributeNames.Encoding);\r\n\r\n                    if (!String.IsNullOrEmpty(value) && (\r\n                        value.Equals(MimeTypes.Html, StringComparison.OrdinalIgnoreCase) ||\r\n                        value.Equals(MimeTypes.ApplicationXHtml, StringComparison.OrdinalIgnoreCase)))\r\n                    {\r\n                        AddElement(tag);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                CloseCurrentNode();\r\n                node = CurrentNode;\r\n            }\r\n            while ((node.Flags & (NodeFlags.HtmlTip | NodeFlags.MathTip | NodeFlags.HtmlMember)) == NodeFlags.None);\r\n\r\n            Consume(tag);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if the given tag name is in the global scope.\r\n/// </summary>\r\n/// <param name = \"tagName\">The tag name to check.</param>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInScope",
                        "returns": "Boolean",
                        "params": [
                            "String tagName"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node.LocalName == tagName)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.Scoped))\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if the given type is in the global scope.\r\n/// </summary>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInScope",
                        "returns": "Boolean",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": [
                            "T"
                        ]
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node is T)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.Scoped))\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if the given tag name is in the list scope.\r\n/// </summary>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInListItemScope",
                        "returns": "Boolean",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node is HtmlListItemElement)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.HtmlListScoped))\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if a paragraph is in the button scope.\r\n/// </summary>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInButtonScope",
                        "returns": "Boolean",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node is HtmlParagraphElement)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.Scoped) || node is HtmlButtonElement)\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if the given type is in the table scope.\r\n/// </summary>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInTableScope",
                        "returns": "Boolean",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": [
                            "T"
                        ]
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node is T)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.HtmlTableScoped))\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if the given tag name is in the table scope.\r\n/// </summary>\r\n/// <param name = \"tagName\">The tag name to check.</param>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInTableScope",
                        "returns": "Boolean",
                        "params": [
                            "String tagName"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node.LocalName == tagName)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.HtmlTableScoped))\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Determines if the given tag name is in the select scope.\r\n/// </summary>\r\n/// <param name = \"tagName\">The tag name to check.</param>\r\n/// <returns>True if it is in scope, otherwise false.</returns>",
                    "signature": {
                        "name": "IsInSelectScope",
                        "returns": "Boolean",
                        "params": [
                            "String tagName"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (int i = _openElements.Count - 1; i >= 0; i--)\r\n            {\r\n                var node = _openElements[i];\r\n\r\n                if (node.LocalName == tagName)\r\n                    return true;\r\n                else if (node.Flags.HasFlag(NodeFlags.HtmlSelectScoped))\r\n                    continue;\r\n                else\r\n                    return false;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// The kernel that is pulling the tokens into the parser.\r\n/// </summary>",
                    "signature": {
                        "name": "Kernel",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var token = default(HtmlToken);\r\n\r\n            do\r\n            {\r\n                if (_waiting != null && _waiting.Status == TaskStatus.Running)\r\n                    _waiting.Wait();\r\n\r\n                token = _tokenizer.Get();\r\n                Consume(token);\r\n            }\r\n            while (token.Type != HtmlTokenType.EndOfFile);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// The kernel that is pulling the tokens into the parser.\r\n/// </summary>\r\n/// <param name = \"cancelToken\">The cancellation token to consider.</param>\r\n/// <returns>The task to await.</returns>",
                    "signature": {
                        "name": "KernelAsync",
                        "returns": "Task<IHtmlDocument>",
                        "params": [
                            "CancellationToken cancelToken"
                        ],
                        "modifier": [
                            "async"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var source = _document.Source;\r\n            var token = default(HtmlToken);\r\n\r\n            do\r\n            {\r\n                if (source.Length - source.Index < 1024)\r\n                    await source.Prefetch(8192, cancelToken).ConfigureAwait(false);\r\n\r\n                if (_waiting != null && _waiting.Status == TaskStatus.Running)\r\n                    await _waiting.ConfigureAwait(false);\r\n\r\n                token = _tokenizer.Get();\r\n                Consume(token);\r\n            }\r\n            while (token.Type != HtmlTokenType.EndOfFile);\r\n\r\n            return _document;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Runs a script given by the current node.\r\n/// </summary>",
                    "signature": {
                        "name": "RunScript",
                        "returns": "Task",
                        "params": [
                            "HtmlScriptElement script"
                        ],
                        "modifier": [
                            "async"
                        ],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            //Disable scripting for HTML fragments (security reasons)\r\n            if (script == null || IsFragmentCase)\r\n                return;\r\n\r\n            _document.PerformMicrotaskCheckpoint();\r\n            _document.ProvideStableState();\r\n            CloseCurrentNode();\r\n            _currentMode = _previousMode;\r\n            _nested++;\r\n            script.Prepare();\r\n            _nested--;\r\n\r\n            if (_currentScriptElement == null || _nested != 0)\r\n                return;\r\n\r\n            do\r\n            {\r\n                script = _currentScriptElement;\r\n                _currentScriptElement = null;\r\n                await _document.WaitForReady().ConfigureAwait(false);\r\n                _nested++;\r\n                script.Run();\r\n                _nested--;\r\n                _tokenizer.ResetInsertionPoint();\r\n            }\r\n            while (_currentScriptElement != null);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// If there is a node in the stack of open elements that is not either a dd element, a dt element, an\r\n/// li element, a p element, a tbody element, a td element, a tfoot element, a th element, a thead\r\n/// element, a tr element, the body element, or the html element, then this is a parse error.\r\n/// </summary>",
                    "signature": {
                        "name": "CheckBodyOnClosing",
                        "returns": "void",
                        "params": [
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (var i = 0; i < _openElements.Count; i++)\r\n            {\r\n                if (!_openElements[i].Flags.HasFlag(NodeFlags.ImplicitelyClosed))\r\n                {\r\n                    RaiseErrorOccurred(HtmlParseError.BodyClosedWrong, token);\r\n                    break;\r\n                }\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Checks if a tag with the given name is currently open.\r\n/// </summary>\r\n/// <param name = \"tagName\">The name of the tag to check for.</param>\r\n/// <returns>True if such a tag is open, otherwise false.</returns>",
                    "signature": {
                        "name": "TagCurrentlyOpen",
                        "returns": "Boolean",
                        "params": [
                            "String tagName"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            for (int i = 0; i < _openElements.Count; i++)\r\n            {\r\n                if (_openElements[i].LocalName == tagName)\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Gets the next token and removes the starting newline, if it has one.\r\n/// </summary>",
                    "signature": {
                        "name": "PreventNewLine",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var temp = _tokenizer.Get();\r\n\r\n            if (temp.Type == HtmlTokenType.Character)\r\n                temp.RemoveNewLine();\r\n\r\n            Home(temp);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// 8.2.6 The end.\r\n/// </summary>",
                    "signature": {
                        "name": "End",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            while (_openElements.Count != 0)\r\n                CloseCurrentNode();\r\n\r\n            if (_document.ReadyState == DocumentReadyState.Loading)\r\n                _waiting = _document.FinishLoading();\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Appends the doctype token to the document.\r\n/// </summary>\r\n/// <param name = \"token\">The doctypen token.</param>",
                    "signature": {
                        "name": "AddDoctype",
                        "returns": "void",
                        "params": [
                            "HtmlDoctypeToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            _document.AddNode(new DocumentType(_document, token.Name ?? String.Empty)\r\n            {\r\n                SystemIdentifier = token.SystemIdentifier,\r\n                PublicIdentifier = token.PublicIdentifier\r\n            });\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Adds the root element (html) to the document.\r\n/// </summary>\r\n/// <param name = \"tag\">The token which started this process.</param>",
                    "signature": {
                        "name": "AddRoot",
                        "returns": "void",
                        "params": [
                            "HtmlTagToken tag"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var element = new HtmlHtmlElement(_document);\r\n            _document.AddNode(element);\r\n            SetupElement(element, tag, false);\r\n            _openElements.Add(element);\r\n            _tokenizer.IsAcceptingCharacterData = false;\r\n            _document.ApplyManifest(element);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Pops the last node from the stack of open nodes.\r\n/// </summary>",
                    "signature": {
                        "name": "CloseCurrentNode",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (_openElements.Count > 0)\r\n            {\r\n                _openElements.RemoveAt(_openElements.Count - 1);\r\n                var node = AdjustedCurrentNode;\r\n                _tokenizer.IsAcceptingCharacterData = node != null && !node.Flags.HasFlag(NodeFlags.HtmlMember);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Modifies the node by appending all attributes and\r\n/// acknowledging the self-closing flag if set.\r\n/// </summary>\r\n/// <param name = \"element\">The node which will be added to the list.</param>\r\n/// <param name = \"tag\">The associated tag token.</param>\r\n/// <param name = \"acknowledgeSelfClosing\">Should the self-closing be acknowledged?</param>",
                    "signature": {
                        "name": "SetupElement",
                        "returns": "void",
                        "params": [
                            "Element element",
                            "HtmlTagToken tag",
                            "Boolean acknowledgeSelfClosing"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (tag.IsSelfClosing && !acknowledgeSelfClosing)\r\n                RaiseErrorOccurred(HtmlParseError.TagCannotBeSelfClosed, tag);\r\n\r\n            element.SetAttributes(tag.Attributes);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Appends a node to the current node and\r\n/// modifies the node by appending all attributes and\r\n/// acknowledging the self-closing flag if set.\r\n/// </summary>\r\n/// <param name = \"tag\">The associated tag token.</param>\r\n/// <param name = \"acknowledgeSelfClosing\">Should the self-closing be acknowledged?</param>",
                    "signature": {
                        "name": "AddElement",
                        "returns": "Element",
                        "params": [
                            "HtmlTagToken tag",
                            "Boolean acknowledgeSelfClosing = false"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var element = Factory.HtmlElements.Create(_document, tag.Name);\r\n            SetupElement(element, tag, acknowledgeSelfClosing);\r\n            AddElement(element);\r\n            return element;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Appends a node to the current node and\r\n/// modifies the node by appending all attributes and\r\n/// acknowledging the self-closing flag if set.\r\n/// </summary>\r\n/// <typeparam name = \"TElement\">The type of element to create.</typeparam>\r\n/// <param name = \"tag\">The associated tag token.</param>\r\n/// <param name = \"acknowledgeSelfClosing\">Should the self-closing be acknowledged?</param>",
                    "signature": {
                        "name": "AddElement",
                        "returns": "TElement",
                        "params": [
                            "HtmlTagToken tag",
                            "Boolean acknowledgeSelfClosing = false"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": [
                            "TElement"
                        ]
                    },
                    "code": "{\r\n            var element = new TElement { Owner = _document };\r\n            SetupElement(element, tag, acknowledgeSelfClosing);\r\n            AddElement(element);\r\n            return element;\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Appends a node to the current node and\r\n/// modifies the node by appending all attributes and\r\n/// acknowledging the self-closing flag if set.\r\n/// </summary>\r\n/// <param name = \"element\">The node which will be added to the list.</param>\r\n/// <param name = \"tag\">The associated tag token.</param>\r\n/// <param name = \"acknowledgeSelfClosing\">Should the self-closing be acknowledged?</param>",
                    "signature": {
                        "name": "AddElement",
                        "returns": "void",
                        "params": [
                            "Element element",
                            "HtmlTagToken tag",
                            "Boolean acknowledgeSelfClosing = false"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            SetupElement(element, tag, acknowledgeSelfClosing);\r\n            AddElement(element);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Appends a configured node to the current node.\r\n/// </summary>\r\n/// <param name = \"element\">The node which will be added to the list.</param>",
                    "signature": {
                        "name": "AddElement",
                        "returns": "void",
                        "params": [
                            "Element element"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var node = CurrentNode;\r\n\r\n            if (_foster && node.IsTableElement())\r\n                AddElementWithFoster(element);\r\n            else\r\n                node.AddNode(element);\r\n\r\n            _openElements.Add(element);\r\n            _tokenizer.IsAcceptingCharacterData = !element.Flags.HasFlag(NodeFlags.HtmlMember);\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Appends a node to the appropriate foster parent.\r\n/// http://www.w3.org/html/wg/drafts/html/master/syntax.html#foster-parent\r\n/// </summary>\r\n/// <param name = \"element\">The node which will be added to the list.</param>",
                    "signature": {
                        "name": "AddElementWithFoster",
                        "returns": "void",
                        "params": [
                            "Element element"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var table = false;\r\n            var index = _openElements.Count;\r\n\r\n            while (--index != 0)\r\n            {\r\n                if (_openElements[index] is HtmlTemplateElement)\r\n                {\r\n                    _openElements[index].AddNode(element);\r\n                    return;\r\n                }\r\n                else if (_openElements[index] is HtmlTableElement)\r\n                {\r\n                    table = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            var foster = _openElements[index].Parent ?? _openElements[index + 1];\r\n\r\n            if (table && _openElements[index].Parent != null)\r\n            {\r\n                for (int i = 0; i < foster.ChildNodes.Length; i++)\r\n                {\r\n                    if (foster.ChildNodes[i] == _openElements[index])\r\n                    {\r\n                        foster.InsertNode(i, element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                foster.AddNode(element);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Inserts the given characters into the current node.\r\n/// </summary>\r\n/// <param name = \"text\">The characters to insert.</param>",
                    "signature": {
                        "name": "AddCharacters",
                        "returns": "void",
                        "params": [
                            "String text"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (!String.IsNullOrEmpty(text))\r\n            {\r\n                var node = CurrentNode;\r\n\r\n                if (_foster && node.IsTableElement())\r\n                    AddCharactersWithFoster(text);\r\n                else\r\n                    node.AppendText(text);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Inserts the given character into the foster parent.\r\n/// </summary>\r\n/// <param name = \"text\">The character to insert.</param>",
                    "signature": {
                        "name": "AddCharactersWithFoster",
                        "returns": "void",
                        "params": [
                            "String text"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var table = false;\r\n            var index = _openElements.Count;\r\n\r\n            while (--index != 0)\r\n            {\r\n                if (_openElements[index] is HtmlTemplateElement)\r\n                {\r\n                    _openElements[index].AppendText(text);\r\n                    return;\r\n                }\r\n                else if (_openElements[index] is HtmlTableElement)\r\n                {\r\n                    table = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            var foster = _openElements[index].Parent ?? _openElements[index + 1];\r\n\r\n            if (table && _openElements[index].Parent != null)\r\n            {\r\n                for (int i = 0; i < foster.ChildNodes.Length; i++)\r\n                {\r\n                    if (foster.ChildNodes[i] == _openElements[index])\r\n                    {\r\n                        foster.InsertText(i, text);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                foster.AppendText(text);\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Clears the stack of open elements back to the given element name.\r\n/// </summary>\r\n/// <param name = \"tagName\">The tag that will be the CurrentNode.</param>",
                    "signature": {
                        "name": "ClearStackBackTo",
                        "returns": "void",
                        "params": [
                            "String tagName"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var node = CurrentNode;\r\n\r\n            while (node.LocalName != tagName && node is HtmlHtmlElement == false && node is HtmlTemplateElement == false)\r\n            {\r\n                CloseCurrentNode();\r\n                node = CurrentNode;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Clears the stack of open elements back to any heading element.\r\n/// </summary>",
                    "signature": {
                        "name": "ClearStackBackTo",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": [
                            "T"
                        ]
                    },
                    "code": "{\r\n            var node = CurrentNode;\r\n\r\n            while (node is T == false && node is HtmlHtmlElement == false && node is HtmlTemplateElement == false)\r\n            {\r\n                CloseCurrentNode();\r\n                node = CurrentNode;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Generates the implied end tags for the dd, dt, li, option, optgroup, p, rp, rt elements except for\r\n/// the tag given.\r\n/// </summary>\r\n/// <param name = \"tagName\">The tag that will be excluded.</param>",
                    "signature": {
                        "name": "GenerateImpliedEndTagsExceptFor",
                        "returns": "void",
                        "params": [
                            "String tagName"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            var node = CurrentNode;\r\n\r\n            while (node.Flags.HasFlag(NodeFlags.ImpliedEnd) && node.LocalName != tagName)\r\n            {\r\n                CloseCurrentNode();\r\n                node = CurrentNode;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Generates the implied end tags for the dd, dt, li, option, optgroup, p, rp, rt elements.\r\n/// </summary>",
                    "signature": {
                        "name": "GenerateImpliedEndTags",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            while (CurrentNode.Flags.HasFlag(NodeFlags.ImpliedEnd))\r\n                CloseCurrentNode();\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Reconstruct the list of active formatting elements, if any.\r\n/// </summary>",
                    "signature": {
                        "name": "ReconstructFormatting",
                        "returns": "void",
                        "params": [],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            if (_formattingElements.Count == 0)\r\n                return;\r\n\r\n            var index = _formattingElements.Count - 1;\r\n            var entry = _formattingElements[index];\r\n\r\n            if (entry == null || _openElements.Contains(entry))\r\n                return;\r\n\r\n            while (index > 0)\r\n            {\r\n                entry = _formattingElements[--index];\r\n\r\n                if (entry == null || _openElements.Contains(entry))\r\n                {\r\n                    index++;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            for (; index < _formattingElements.Count; index++)\r\n            {\r\n                var element = CopyElement(_formattingElements[index]);\r\n                AddElement(element);\r\n                _formattingElements[index] = element;\r\n            }\r\n        }"
                },
                {
                    "doc": "/// <summary>\r\n/// Fires an error occurred event.\r\n/// </summary>\r\n/// <param name = \"code\">The associated error code.</param>\r\n/// <param name = \"token\">The associated token.</param>",
                    "signature": {
                        "name": "RaiseErrorOccurred",
                        "returns": "void",
                        "params": [
                            "HtmlParseError code",
                            "HtmlToken token"
                        ],
                        "modifier": [],
                        "annotations": [],
                        "generics": []
                    },
                    "code": "{\r\n            _tokenizer.RaiseErrorOccurred(code, token.Position);\r\n        }"
                }
            ],
            "variables": [
                "#region Fields\r\nreadonly HtmlTokenizer _tokenizer;",
                "readonly HtmlDocument _document;",
                "readonly List<Element> _openElements;",
                "readonly List<Element> _formattingElements;",
                "readonly Stack<HtmlTreeMode> _templateModes;",
                "readonly Object _syncGuard;",
                "HtmlFormElement _currentFormElement;",
                "HtmlScriptElement _currentScriptElement;",
                "HtmlTreeMode _currentMode;",
                "HtmlTreeMode _previousMode;",
                "Element _fragmentContext;",
                "Boolean _foster;",
                "Boolean _embedded;",
                "Boolean _frameset;",
                "Boolean _scripting;",
                "Int32 _nested;",
                "Boolean _started;",
                "Task<IHtmlDocument> _parsing;",
                "Task _waiting;"
            ],
            "generics": [],
            "imports": [],
            "constructors": [
                "#endregion\r\n#region ctor\r\n/// <summary>\r\n/// Creates a new instance of the HTML parser with an new document\r\n/// based on the given source.\r\n/// </summary>\r\n/// <param name = \"source\">The source code as a string.</param>\r\n/// <param name = \"configuration\">\r\n/// [Optional] The configuration to use.\r\n/// </param>\r\npublic HtmlParser(String source, IConfiguration configuration = null) : this(new HtmlDocument(BrowsingContext.New(configuration), new TextSource(source)))\r\n{\r\n}",
                "/// <summary>\r\n/// Creates a new instance of the HTML parser with an new document\r\n/// based on the given stream.\r\n/// </summary>\r\n/// <param name = \"stream\">The stream to use as source.</param>\r\n/// <param name = \"configuration\">\r\n/// [Optional] The configuration to use.\r\n/// </param>\r\npublic HtmlParser(Stream stream, IConfiguration configuration = null) : this(new HtmlDocument(BrowsingContext.New(configuration), new TextSource(stream, configuration.DefaultEncoding())))\r\n{\r\n}",
                "/// <summary>\r\n/// Creates a new instance of the HTML parser with the specified\r\n/// document based on the given source manager.\r\n/// </summary>\r\n/// <param name = \"document\">\r\n/// The document instance to be constructed.\r\n/// </param>\r\ninternal HtmlParser(HtmlDocument document)\r\n{\r\n    _tokenizer = new HtmlTokenizer(document.Source, document.Options.Events);\r\n    _syncGuard = new Object();\r\n    _started = false;\r\n    _document = document;\r\n    _openElements = new List<Element>();\r\n    _templateModes = new Stack<HtmlTreeMode>();\r\n    _formattingElements = new List<Element>();\r\n    _frameset = true;\r\n    _embedded = false;\r\n    _scripting = document.Options.IsScripting();\r\n    _currentMode = HtmlTreeMode.Initial;\r\n}"
            ],
            "extends": "",
            "implements": [],
            "namespace": "AngleSharp.Parser.Html"
        },
        "code": "{\r\n            var index = _openElements.Count - 1;\r\n            var node = _openElements[index];\r\n            _frameset = false;\r\n\r\n            while (true)\r\n            {\r\n                if (node is HtmlListItemElement && node.LocalName == Tags.Li)\r\n                {\r\n                    InBody(HtmlTagToken.Close(node.LocalName));\r\n                    break;\r\n                }\r\n\r\n                if (node is HtmlAddressElement == false && node is HtmlDivElement == false && node is HtmlParagraphElement == false && node.Flags.HasFlag(NodeFlags.Special))\r\n                    break;\r\n\r\n                node = _openElements[--index];\r\n            }\r\n\r\n            if (IsInButtonScope())\r\n                InBodyEndTagParagraph(tag);\r\n\r\n            AddElement(tag);\r\n        }",
        "code_file_path": "AngleSharp/Parser/Html/HtmlParser.cs",
        "called_functions": [
            "InBody(HtmlTagToken.Close(node.LocalName))",
            "HtmlTagToken.Close(node.LocalName)",
            "node.Flags.HasFlag(NodeFlags.Special)",
            "IsInButtonScope()",
            "InBodyEndTagParagraph(tag)",
            "AddElement(tag)"
        ],
        "id": 2237,
        "tests": [
            {
                "tests": "using System;\r\nusing AngleSharp.Core.Tests.Mocks;\r\nusing AngleSharp.Dom;\r\nusing AngleSharp.Parser.Html;\r\nusing NUnit.Framework;\r\n\r\nnamespace AngleSharp.Core.Tests\r\n{\r\n    /// <summary>\r\n    /// Tests from https://github.com/html5lib/html5lib-tests:\r\n    /// tree-construction/tests16.dat\r\n    /// </summary>\r\n    [TestFixture]\r\n    public class HtmlScriptTests\r\n    {\r\n        static IDocument Html(String code)\r\n        {\r\n            return code.ToHtmlDocument();\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptElementAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(0, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithTextAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script>a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n\r\n\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingUppercaseLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></S\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</S\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingTwoUppercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></SC\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</SC\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingThreeUppercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></SCR\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</SCR\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingFourUppercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></SCRI\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</SCRI\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingFiveUppercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></SCRIP\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</SCRIP\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingSixUppercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></SCRIPT\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</SCRIPT\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingSevenUppercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></SCRIPT \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(0, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingLowercaseLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></s\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</s\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingTwoLowercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></sc\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</sc\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingThreeLowercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></scr\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</scr\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingFourLowercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></scri\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</scri\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingFiveLowercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></scrip\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</scrip\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingSixLowercaseLettersAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></script\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</script\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenClosingSixLowercaseLettersAndSpaceAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script></script \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(0, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenBogusCommentAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenBogusCommentAndLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenBogusCommentAndDashAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!-\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!-\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenBogusCommentAndDashLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!-a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!-a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenSlashAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--</\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--</\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashClosingScriptUnfinishedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--</script\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--</script\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashClosingScriptUnfinishedSpacesAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--</script \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenLetterSAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<s\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<s\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenScriptUnfinishedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenScriptUnfinishedSpacesAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script \", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n\r\n\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenScriptUnfinishedSpacesOpenAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script <\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script <\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndDashDashOpenScriptUnfinishedSpacesOpenLetterAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script <a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script <a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentScriptTagInsideAndClosingAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndClosingSTagAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </s\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </s\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndClosingScriptTagUnfinishedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndClosingScriptMisspelledUnfinishedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </scripta\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </scripta\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndClosingScriptUnfinishedSpacesAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script \", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndClosedScriptAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script>\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenScriptTagAndTrailingSlashWhenClosingScriptAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script/\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script/\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenScriptTagAndOpenBracketAfterSpaceAfterClosingScriptAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script <\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script <\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagUnfinishedSpaceAndOpenLowercaseAAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script <a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script <a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagUnfinishedSpaceAndClosingTagAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script </\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script </\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagUnfinishedSpaceAndClosingScriptTagAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script </script\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script </script\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagUnfinishedSpaceAndClosingScriptTagUnfinishedWithSpacesAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script </script \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script \", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagUnfinishedSpaceAndClosingScriptTagUnfinishedTrailingSlashAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script </script/\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script \", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagUnfinishedSpaceAndClosedScriptTagAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script </script </script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script \", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptElementAndOneFinalDashAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script -\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptElementAndOneFinalDashAndLowercaseAAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script -a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptElementAndOneFinalDashAndOpenBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script -<\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -<\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptElementAndTwoFinalDashesAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptElementAndTwoFinalDashesLowercaseAAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --a\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --a\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptElementAndTwoFinalDashesOpenBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --<\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --<\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithCommentThatHostsScriptElementAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script -->\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithCommentThatHostsScriptElementAndOpenBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --><\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --><\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithCommentThatHostsScriptElementAndOpenClosingBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --></\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --></\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithCommentThatHostsScriptElementUnfinishedClosingBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --></script\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --></script\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithCommentThatHostsScriptElementUnfinishedClosingBracketWithSpacesAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --></script \");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosedCommentThatHostsUnfinishedScriptElementAndClosingUnfinishedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --></script/\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosedCommentThatHostsUnfinishedScriptElementClosedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script --></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosedCommentThatHostsScriptPairWithMistakeClosedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script><\\/script>--></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(@\"<!--<script><\\/script>-->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosedCommentThatHostsScriptPairWithMistakesClosedAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></scr'+'ipt>--></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></scr'+'ipt>-->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptPairAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></script><script></script></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptPairAndClosingBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></script><script></script>--><!--</script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>--><!--\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentThatHostsScriptPairAndHasASpaceBeforeClosingBracketAfterDoctype()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></script><script></script>-- ></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>-- >\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithMultipleEscapedCommentsWrongBarelyClosed()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></script><script></script>- -></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>- ->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithMultipleEscapedCommentsWrongClearlyClosed()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></script><script></script>- - ></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>- - >\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithMultipleEscapedCommentsWrongWronglyClosed()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></script><script></script>-></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>->\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithEscapedOpenedScriptTagFollowedByText()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script>--!></script>X\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script>--!></script>X\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithSpecialCharactersInWronglyEscapedScriptTag()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<scr'+'ipt></script>--></script>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<scr'+'ipt>\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(1, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n\r\n            var dochtml1body1Text0 = dochtml1body1.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1body1Text0.NodeType);\r\n            Assert.AreEqual(\"-->\", dochtml1body1Text0.TextContent);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithEscapedScriptTagClosedWrongWithSpecialCharacters()\r\n        {\r\n            var doc = Html(@\"<!doctype html><script><!--<script></scr'+'ipt></script>X\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0script0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml1head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0script0.NodeType);\r\n\r\n            var dochtml1head0script0Text0 = dochtml1head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></scr'+'ipt></script>X\", dochtml1head0script0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptNoScriptWithClosedCommentThatContainsAnotherClosedNoScriptElement()\r\n        {\r\n            var source = \"<!doctype html><noscript><!--<noscript></noscript>--></noscript>\";\r\n            var config = Configuration.Default.With(new EnableScripting());\r\n            var parser = new HtmlParser(source, config);\r\n            var doc = parser.Parse();\r\n\r\n            parser.InBodyStartTagListItem(null);\r\n            parser.InBodyEndTagAnythingElse(null);\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0noscript0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0noscript0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0noscript0.Attributes.Count);\r\n            Assert.AreEqual(\"noscript\", dochtml1head0noscript0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0noscript0.NodeType);\r\n\r\n            var dochtml1head0noscript0Text0 = dochtml1head0noscript0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0noscript0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<noscript>\", dochtml1head0noscript0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(1, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n\r\n            var dochtml1body1Text0 = dochtml1body1.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1body1Text0.NodeType);\r\n            Assert.AreEqual(\"-->\", dochtml1body1Text0.TextContent);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptNoScriptWithCommentStartAndTextInsideBeforeClosing()\r\n        {\r\n            var source = \"<!doctype html><noscript><!--</noscript>X<noscript>--></noscript>\";\r\n            var config = Configuration.Default.With(new EnableScripting());\r\n            var parser = new HtmlParser(source, config);\r\n            var doc = parser.Parse();\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0noscript0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0noscript0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0noscript0.Attributes.Count);\r\n            Assert.AreEqual(\"noscript\", dochtml1head0noscript0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0noscript0.NodeType);\r\n\r\n            var dochtml1head0noscript0Text0 = dochtml1head0noscript0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0noscript0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--\", dochtml1head0noscript0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n\r\n            var dochtml1body1Text0 = dochtml1body1.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1body1Text0.NodeType);\r\n            Assert.AreEqual(\"X\", dochtml1body1Text0.TextContent);\r\n\r\n            var dochtml1body1noscript1 = dochtml1body1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(1, dochtml1body1noscript1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1noscript1.Attributes.Count);\r\n            Assert.AreEqual(\"noscript\", dochtml1body1noscript1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1noscript1.NodeType);\r\n\r\n            var dochtml1body1noscript1Text0 = dochtml1body1noscript1.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1body1noscript1Text0.NodeType);\r\n            Assert.AreEqual(\"-->\", dochtml1body1noscript1Text0.TextContent);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptNoScriptAfterDoctypeWithIFrameContentAndTextAfter()\r\n        {\r\n            var source = \"<!doctype html><noscript><iframe></noscript>X\";\r\n            var config = Configuration.Default.With(new EnableScripting());\r\n            var parser = new HtmlParser(source, config);\r\n            var doc = parser.Parse();\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0noscript0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0noscript0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0noscript0.Attributes.Count);\r\n            Assert.AreEqual(\"noscript\", dochtml1head0noscript0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0noscript0.NodeType);\r\n\r\n            var dochtml1head0noscript0Text0 = dochtml1head0noscript0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0noscript0Text0.NodeType);\r\n            Assert.AreEqual(\"<iframe>\", dochtml1head0noscript0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(1, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n\r\n            var dochtml1body1Text0 = dochtml1body1.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1body1Text0.NodeType);\r\n            Assert.AreEqual(\"X\", dochtml1body1Text0.TextContent);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithinBodyThatisInsideNoframes()\r\n        {\r\n            var doc = Html(@\"<!doctype html><noframes><body><script><!--...</script></body></noframes></html>\");\r\n\r\n            var docType0 = doc.ChildNodes[0] as DocumentType;\r\n            Assert.IsNotNull(docType0);\r\n            Assert.AreEqual(NodeType.DocumentType, docType0.NodeType);\r\n            Assert.AreEqual(@\"html\", docType0.Name);\r\n\r\n            var dochtml1 = doc.ChildNodes[1] as Element;\r\n            Assert.AreEqual(2, dochtml1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1.NodeType);\r\n\r\n            var dochtml1head0 = dochtml1.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml1head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0.NodeType);\r\n\r\n            var dochtml1head0noframes0 = dochtml1head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml1head0noframes0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1head0noframes0.Attributes.Count);\r\n            Assert.AreEqual(\"noframes\", dochtml1head0noframes0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1head0noframes0.NodeType);\r\n\r\n            var dochtml1head0noframes0Text0 = dochtml1head0noframes0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml1head0noframes0Text0.NodeType);\r\n            Assert.AreEqual(\"<body><script><!--...</script></body>\", dochtml1head0noframes0Text0.TextContent);\r\n\r\n            var dochtml1body1 = dochtml1.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml1body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml1body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml1body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml1body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptStandalone()\r\n        {\r\n            var doc = Html(@\"<script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(0, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithTextLowercaseA()\r\n        {\r\n            var doc = Html(@\"<script>a\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"a\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithTextLt()\r\n        {\r\n            var doc = Html(@\"<script><\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithTextLtSlash()\r\n        {\r\n            var doc = Html(@\"<script></\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagSpace()\r\n        {\r\n            var doc = Html(@\"<script></SCRIPT \");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(0, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagLowercaseS()\r\n        {\r\n            var doc = Html(@\"<script></s\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</s\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagLowercaseSC()\r\n        {\r\n            var doc = Html(@\"<script></sc\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</sc\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagLowercaseSCR()\r\n        {\r\n            var doc = Html(@\"<script></scr\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</scr\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagLowercaseSCRI()\r\n        {\r\n            var doc = Html(@\"<script></scri\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</scri\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagLowercaseSCRIP()\r\n        {\r\n            var doc = Html(@\"<script></scrip\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</scrip\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptTagLowercaseSCRIPT()\r\n        {\r\n            var doc = Html(@\"<script></script\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"</script\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithClosingScriptSpaceInsteadOfGt()\r\n        {\r\n            var doc = Html(@\"<script></script \");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(0, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEm()\r\n        {\r\n            var doc = Html(@\"<script><!\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmLowercaseA()\r\n        {\r\n            var doc = Html(@\"<script><!a\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!a\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDash()\r\n        {\r\n            var doc = Html(@\"<script><!-\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!-\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashLowercaseA()\r\n        {\r\n            var doc = Html(@\"<script><!-a\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!-a\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashDash()\r\n        {\r\n            var doc = Html(@\"<script><!--\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashDashLowercaseA()\r\n        {\r\n            var doc = Html(@\"<script><!--a\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--a\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashDashLt()\r\n        {\r\n            var doc = Html(@\"<script><!--<\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashDashLtLowercaseA()\r\n        {\r\n            var doc = Html(@\"<script><!--<a\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<a\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashDashLtSlash()\r\n        {\r\n            var doc = Html(@\"<script><!--</\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--</\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptLtEmDashDashLtSlashLowercaseSCRIPT()\r\n        {\r\n            var doc = Html(@\"<script><!--</script\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--</script\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithStartCommentScriptInside()\r\n        {\r\n            var doc = Html(@\"<script><!--<script </s\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </s\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithStartCommentAndThreeEscapes()\r\n        {\r\n            var doc = Html(@\"<script><!--<script </script </script \");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script \", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithStartCommentAndEffectivelyClosed()\r\n        {\r\n            var doc = Html(@\"<script><!--<script </script </script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script </script \", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpeningCommentAndDashLowercaseA()\r\n        {\r\n            var doc = Html(@\"<script><!--<script -a\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script -a\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptThatTriesToEscapeAnotherScriptTag()\r\n        {\r\n            var doc = Html(@\"<script><!--<script --\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptThatContainsAnotherScriptTagInsideCommentAndIsNotFinished()\r\n        {\r\n            var doc = Html(@\"<script><!--<script --><\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --><\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptThatContainsAnotherScriptTagInsideAComment()\r\n        {\r\n            var doc = Html(@\"<script><!--<script --></script\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script --></script\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithCommentThatTriesToOpenCloseButMisspells()\r\n        {\r\n            var doc = Html(@\"<script><!--<script><\\/script>--></script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(@\"<!--<script><\\/script>-->\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithScriptsInCommentCommentBeforeClosing()\r\n        {\r\n            var doc = Html(@\"<script><!--<script></script><script></script>--><!--</script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>--><!--\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithScriptsInCommentSpaceBeforeBracket()\r\n        {\r\n            var doc = Html(@\"<script><!--<script></script><script></script>-- ></script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>-- >\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithScriptsInCommentSpaceBetweenDash()\r\n        {\r\n            var doc = Html(@\"<script><!--<script></script><script></script>- -></script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>- ->\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithScriptsInCommentDashMissing()\r\n        {\r\n            var doc = Html(@\"<script><!--<script></script><script></script>-></script>\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></script><script></script>->\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithValidCommentAndTextAfter()\r\n        {\r\n            var doc = Html(@\"<script><!--<script>--!></script>X\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script>--!></script>X\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n\r\n        [Test]\r\n        public void ScriptWithOpenCommentAndClosingMisspelledTextAfter()\r\n        {\r\n            var doc = Html(@\"<script><!--<script></scr'+'ipt></script>X\");\r\n\r\n            var dochtml0 = doc.ChildNodes[0] as Element;\r\n            Assert.AreEqual(2, dochtml0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0.Attributes.Count);\r\n            Assert.AreEqual(\"html\", dochtml0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0.NodeType);\r\n\r\n            var dochtml0head0 = dochtml0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0.Attributes.Count);\r\n            Assert.AreEqual(\"head\", dochtml0head0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0.NodeType);\r\n\r\n            var dochtml0head0script0 = dochtml0head0.ChildNodes[0] as Element;\r\n            Assert.AreEqual(1, dochtml0head0script0.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0head0script0.Attributes.Count);\r\n            Assert.AreEqual(\"script\", dochtml0head0script0.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0head0script0.NodeType);\r\n\r\n            var dochtml0head0script0Text0 = dochtml0head0script0.ChildNodes[0];\r\n            Assert.AreEqual(NodeType.Text, dochtml0head0script0Text0.NodeType);\r\n            Assert.AreEqual(\"<!--<script></scr'+'ipt></script>X\", dochtml0head0script0Text0.TextContent);\r\n\r\n            var dochtml0body1 = dochtml0.ChildNodes[1] as Element;\r\n            Assert.AreEqual(0, dochtml0body1.ChildNodes.Length);\r\n            Assert.AreEqual(0, dochtml0body1.Attributes.Count);\r\n            Assert.AreEqual(\"body\", dochtml0body1.GetTagName());\r\n            Assert.AreEqual(NodeType.Element, dochtml0body1.NodeType);\r\n        }\r\n    }\r\n}\r\n",
                "test_imports": [
                    "using System;",
                    "using AngleSharp.Core.Tests.Mocks;",
                    "using AngleSharp.Dom;",
                    "using AngleSharp.Parser.Html;",
                    "using NUnit.Framework;"
                ],
                "test_namespace": "AngleSharp.Core.Tests",
                "test_class_name": "HtmlScriptTests",
                "test_file_path": "AngleSharp.Core.Tests/Html/HtmlScript.cs",
                "test_runner": "NUnit",
                "project_path": "AngleSharp.Core.Tests/AngleSharp.Core.Tests.csproj"
            }
        ],
        "results": {
            "(code, new_tests)": [
                [],
                [],
                []
            ]
        },
        "new_tests": "using NUnit.Framework;\nusing System;\nusing AngleSharp.Core.Tests.Mocks;\nusing AngleSharp.Parser.Html;\nusing AngleSharp.Dom;\n\nnamespace AngleSharp.Core.Tests\n{\n\n[TestFixture]\npublic class HtmlScript\n{\n    [Test]\n    public void InBodyStartTagListItem_Test_1()\n{\n        // Arrange\n        var parser = new HtmlParser(\"<ul><li>Item 1</li></ul>\");\n        var token = new HtmlTagToken(\"li\", HtmlTagTokenType.StartTag);\n        \n        // Act\n        parser.InBodyStartTagListItem(token);\n        \n        // Assert\n        Assert.IsTrue(parser.IsInListItemScope());\n        Assert.AreEqual(1, parser.OpenElements.Count);\n        Assert.AreEqual(\"li\", parser.OpenElements[0].TagName);\n    }\n\n    [Test]\n    public void InBodyStartTagListItem_Test_2()\n    {\n        // Arrange\n        var parser = new HtmlParser(\"<ol><li>Item 1</li></ol>\");\n        var token = new HtmlTagToken(\"li\", HtmlTagTokenType.StartTag);\n        \n        // Act\n        parser.InBodyStartTagListItem(token);\n        \n        // Assert\n        Assert.IsTrue(parser.IsInListItemScope());\n        Assert.AreEqual(1, parser.OpenElements.Count);\n        Assert.AreEqual(\"li\", parser.OpenElements[0].TagName);\n    }\n\n    [Test]\n    public void InBodyStartTagListItem_Test_3()\n    {\n        // Arrange\n        var parser = new HtmlParser(\"<div><li>Item 1</li></div>\");\n        var token = new HtmlTagToken(\"li\", HtmlTagTokenType.StartTag);\n        \n        // Act\n        parser.InBodyStartTagListItem(token);\n        \n        // Assert\n        Assert.IsFalse(parser.IsInListItemScope());\n        Assert.AreEqual(1, parser.OpenElements.Count);\n        Assert.AreEqual(\"div\", parser.OpenElements[0].TagName);\n    }\n\n    [Test]\n    public void InBodyStartTagListItem_Test_4()\n    {\n        // Arrange\n        var parser = new HtmlParser(\"<ul><li>Item 1</li><li>Item 2</li></ul>\");\n        var token = new HtmlTagToken(\"li\", HtmlTagTokenType.StartTag);\n        \n        // Act\n        parser.InBodyStartTagListItem(token);\n        \n        // Assert\n        Assert.IsTrue(parser.IsInListItemScope());\n        Assert.AreEqual(2, parser.OpenElements.Count);\n        Assert.AreEqual(\"li\", parser.OpenElements[1].TagName);\n    }\n\n    [Test]\n    public void InBodyStartTagListItem_Test_5()\n    {\n        // Arrange\n        var parser = new HtmlParser(\"<ul></ul>\");\n        var token = new HtmlTagToken(\"li\", HtmlTagTokenType.StartTag);\n        \n        // Act\n        parser.InBodyStartTagListItem(token);\n        \n        // Assert\n        Assert.IsTrue(parser.IsInListItemScope());\n        Assert.AreEqual(1, parser.OpenElements.Count);\n        Assert.AreEqual(\"li\", parser.OpenElements[0].TagName);\n    }\n}}",
        "new_code": "{\n// Check if the current mode allows for list items\nif (_currentMode == HtmlTreeMode.InBody)\n{\n    // Generate implied end tags for the list item context\n    GenerateImpliedEndTagsExceptFor(\"li\");\n\n    // Create a new list item element\n    var listItem = AddElement<ListItemElement>(tag);\n\n    // Append the list item to the current node\n    AddElement(listItem);\n\n    // If the list item is not self-closing, we need to set the current mode accordingly\n    if (!tag.IsSelfClosing)\n    {\n        _openElements.Add(listItem);\n    }\n}\nelse\n{\n    // If the current mode does not allow for list items, raise an error\n    RaiseErrorOccurred(HtmlParseError.UnexpectedToken, tag);\n}}"
    }
]