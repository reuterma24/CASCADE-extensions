{
  "doc": "/// \u003Csummary\u003E\n/// Gets an item associated with the specified value.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022value\u0022\u003EThe value of the item to get.\u003C/param\u003E\n/// \u003Creturns\u003E\n/// The first item found that is associated with the specified value.\n/// If the specified value is not found, throws a \u003Csee cref = \u0022SmartEnumNotFoundException\u0022/\u003E.\n/// \u003C/returns\u003E\n/// \u003Cexception cref = \u0022SmartEnumNotFoundException\u0022\u003E\u003Cparamref name = \u0022value\u0022/\u003E does not exist.\u003C/exception\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.FromValue(TValue, TEnum)\u0022/\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.TryFromValue(TValue, out TEnum)\u0022/\u003E",
  "signature": {
    "name": "FromValue",
    "returns": "TEnum",
    "params": [
      "TValue value"
    ],
    "modifier": [
      "public",
      "static"
    ],
    "annotations": [
      "SuppressMessage"
    ],
    "generics": []
  },
  "language": "csharp",
  "parent": {
    "name": "SmartEnum",
    "doc": "/// \u003Csummary\u003E\n/// A base type to use for creating smart enums.\n/// \u003C/summary\u003E\n/// \u003Ctypeparam name = \u0022TEnum\u0022\u003EThe type that is inheriting from this class.\u003C/typeparam\u003E\n/// \u003Ctypeparam name = \u0022TValue\u0022\u003EThe type of the inner value.\u003C/typeparam\u003E\n/// \u003Cremarks\u003E\u003C/remarks\u003E",
    "other_methods": [
      {
        "doc": "",
        "signature": {
          "name": "GetAllOptions",
          "returns": "List\u003CTEnum\u003E",
          "params": [],
          "modifier": [
            "private",
            "static"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            Type baseType = typeof(TEnum);\n            return Assembly.GetAssembly(baseType)\n                .GetTypes()\n                .Where(t =\u003E baseType.IsAssignableFrom(t))\n                .SelectMany(t =\u003E t.GetFieldsOfType\u003CTEnum\u003E())\n                .OrderBy(t =\u003E t.Name)\n                .ToList();\n        }"
      },
      {
        "doc": "",
        "signature": {
          "name": "GetValueComparer",
          "returns": "IEqualityComparer\u003CTValue\u003E",
          "params": [],
          "modifier": [
            "private",
            "static"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            var comparer = typeof(TEnum).GetCustomAttribute\u003CSmartEnumComparerAttribute\u003CTValue\u003E\u003E();\n            return comparer?.Comparer;\n        }"
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Gets the item associated with the specified name.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022name\u0022\u003EThe name of the item to get.\u003C/param\u003E\n/// \u003Cparam name = \u0022ignoreCase\u0022\u003E\u003Cc\u003Etrue\u003C/c\u003E to ignore case during the comparison; otherwise, \u003Cc\u003Efalse\u003C/c\u003E.\u003C/param\u003E\n/// \u003Creturns\u003E\n/// The item associated with the specified name.\n/// If the specified name is not found, throws a \u003Csee cref = \u0022KeyNotFoundException\u0022/\u003E.\n/// \u003C/returns\u003E\n/// \u003Cexception cref = \u0022ArgumentException\u0022\u003E\u003Cparamref name = \u0022name\u0022/\u003E is \u003Cc\u003Enull\u003C/c\u003E.\u003C/exception\u003E\n/// \u003Cexception cref = \u0022SmartEnumNotFoundException\u0022\u003E\u003Cparamref name = \u0022name\u0022/\u003E does not exist.\u003C/exception\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.TryFromName(string, out TEnum)\u0022/\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.TryFromName(string, bool, out TEnum)\u0022/\u003E",
        "signature": {
          "name": "FromName",
          "returns": "TEnum",
          "params": [
            "string name",
            "bool ignoreCase = false"
          ],
          "modifier": [
            "public",
            "static"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            if (String.IsNullOrEmpty(name))\n                ThrowHelper.ThrowArgumentNullOrEmptyException(nameof(name));\n\n            if (ignoreCase)\n                return FromName(_fromNameIgnoreCase.Value);\n            else\n                return FromName(_fromName.Value);\n\n            TEnum FromName(Dictionary\u003Cstring, TEnum\u003E dictionary)\n            {\n                if (!dictionary.TryGetValue(name, out var result))\n                {\n                    ThrowHelper.ThrowNameNotFoundException\u003CTEnum, TValue\u003E(name);\n                }\n                return result;\n            }\n        }"
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Gets the item associated with the specified name.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022name\u0022\u003EThe name of the item to get.\u003C/param\u003E\n/// \u003Cparam name = \u0022result\u0022\u003E\n/// When this method returns, contains the item associated with the specified name, if the key is found;\n/// otherwise, \u003Cc\u003Enull\u003C/c\u003E. This parameter is passed uninitialized.\u003C/param\u003E\n/// \u003Creturns\u003E\n/// \u003Cc\u003Etrue\u003C/c\u003E if the \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E contains an item with the specified name; otherwise, \u003Cc\u003Efalse\u003C/c\u003E.\n/// \u003C/returns\u003E\n/// \u003Cexception cref = \u0022ArgumentException\u0022\u003E\u003Cparamref name = \u0022name\u0022/\u003E is \u003Cc\u003Enull\u003C/c\u003E.\u003C/exception\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.FromName(string, bool)\u0022/\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.TryFromName(string, bool, out TEnum)\u0022/\u003E",
        "signature": {
          "name": "TryFromName",
          "returns": "bool",
          "params": [
            "string name",
            "out TEnum result"
          ],
          "modifier": [
            "public",
            "static"
          ],
          "annotations": [
            "MethodImpl"
          ],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Gets the item associated with the specified name.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022name\u0022\u003EThe name of the item to get.\u003C/param\u003E\n/// \u003Cparam name = \u0022ignoreCase\u0022\u003E\u003Cc\u003Etrue\u003C/c\u003E to ignore case during the comparison; otherwise, \u003Cc\u003Efalse\u003C/c\u003E.\u003C/param\u003E\n/// \u003Cparam name = \u0022result\u0022\u003E\n/// When this method returns, contains the item associated with the specified name, if the name is found;\n/// otherwise, \u003Cc\u003Enull\u003C/c\u003E. This parameter is passed uninitialized.\u003C/param\u003E\n/// \u003Creturns\u003E\n/// \u003Cc\u003Etrue\u003C/c\u003E if the \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E contains an item with the specified name; otherwise, \u003Cc\u003Efalse\u003C/c\u003E.\n/// \u003C/returns\u003E\n/// \u003Cexception cref = \u0022ArgumentException\u0022\u003E\u003Cparamref name = \u0022name\u0022/\u003E is \u003Cc\u003Enull\u003C/c\u003E.\u003C/exception\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.FromName(string, bool)\u0022/\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.TryFromName(string, out TEnum)\u0022/\u003E",
        "signature": {
          "name": "TryFromName",
          "returns": "bool",
          "params": [
            "string name",
            "bool ignoreCase",
            "out TEnum result"
          ],
          "modifier": [
            "public",
            "static"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            if (String.IsNullOrEmpty(name))\n            {\n                result = default;\n                return false;\n            }\n\n            if (ignoreCase)\n                return _fromNameIgnoreCase.Value.TryGetValue(name, out result);\n            else\n                return _fromName.Value.TryGetValue(name, out result);\n        }"
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Gets an item associated with the specified value.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022value\u0022\u003EThe value of the item to get.\u003C/param\u003E\n/// \u003Cparam name = \u0022defaultValue\u0022\u003EThe value to return when item not found.\u003C/param\u003E\n/// \u003Creturns\u003E\n/// The first item found that is associated with the specified value.\n/// If the specified value is not found, returns \u003Cparamref name = \u0022defaultValue\u0022/\u003E.\n/// \u003C/returns\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.FromValue(TValue)\u0022/\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.TryFromValue(TValue, out TEnum)\u0022/\u003E",
        "signature": {
          "name": "FromValue",
          "returns": "TEnum",
          "params": [
            "TValue value",
            "TEnum defaultValue"
          ],
          "modifier": [
            "public",
            "static"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            if (value is null)\n                ThrowHelper.ThrowArgumentNullException(nameof(value));\n\n            if (!_fromValue.Value.TryGetValue(value, out var result))\n            {\n                return defaultValue;\n            }\n            return result;\n        }"
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Gets an item associated with the specified value.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022value\u0022\u003EThe value of the item to get.\u003C/param\u003E\n/// \u003Cparam name = \u0022result\u0022\u003E\n/// When this method returns, contains the item associated with the specified value, if the value is found;\n/// otherwise, \u003Cc\u003Enull\u003C/c\u003E. This parameter is passed uninitialized.\u003C/param\u003E\n/// \u003Creturns\u003E\n/// \u003Cc\u003Etrue\u003C/c\u003E if the \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E contains an item with the specified name; otherwise, \u003Cc\u003Efalse\u003C/c\u003E.\n/// \u003C/returns\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.FromValue(TValue)\u0022/\u003E\n/// \u003Cseealso cref = \u0022SmartEnum{TEnum, TValue}.FromValue(TValue, TEnum)\u0022/\u003E",
        "signature": {
          "name": "TryFromValue",
          "returns": "bool",
          "params": [
            "TValue value",
            "out TEnum result"
          ],
          "modifier": [
            "public",
            "static"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            if (value is null)\n            {\n                result = default;\n                return false;\n            }\n\n            return _fromValue.Value.TryGetValue(value, out result);\n        }"
      },
      {
        "doc": "/// \u003Csummary\u003E\n///\n/// \u003C/summary\u003E\n/// \u003Creturns\u003E\u003C/returns\u003E",
        "signature": {
          "name": "ToString",
          "returns": "string",
          "params": [],
          "modifier": [
            "public",
            "override"
          ],
          "annotations": [],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n///\n/// \u003C/summary\u003E\n/// \u003Creturns\u003E\u003C/returns\u003E",
        "signature": {
          "name": "GetHashCode",
          "returns": "int",
          "params": [],
          "modifier": [
            "public",
            "override"
          ],
          "annotations": [
            "MethodImpl"
          ],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n///\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022obj\u0022\u003E\u003C/param\u003E\n/// \u003Creturns\u003E\u003C/returns\u003E",
        "signature": {
          "name": "Equals",
          "returns": "bool",
          "params": [
            "object obj"
          ],
          "modifier": [
            "public",
            "override"
          ],
          "annotations": [],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Returns a value indicating whether this instance is equal to a specified \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E value.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022other\u0022\u003EAn \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E value to compare to this instance.\u003C/param\u003E\n/// \u003Creturns\u003E\u003Cc\u003Etrue\u003C/c\u003E if \u003Cparamref name = \u0022other\u0022/\u003E has the same value as this instance; otherwise, \u003Cc\u003Efalse\u003C/c\u003E.\u003C/returns\u003E",
        "signature": {
          "name": "Equals",
          "returns": "bool",
          "params": [
            "SmartEnum\u003CTEnum, TValue\u003E other"
          ],
          "modifier": [
            "public",
            "virtual"
          ],
          "annotations": [],
          "generics": []
        },
        "code": "{\n            // check if same instance\n            if (Object.ReferenceEquals(this, other))\n                return true;\n\n            // it\u0027s not same instance so\n            // check if it\u0027s not null and is same value\n            if (other is null)\n                return false;\n\n            return _value.Equals(other._value);\n        }"
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// When this instance is one of the specified \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E parameters.\n/// Execute the action in the subsequent call to Then().\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022smartEnumWhen\u0022\u003EA collection of \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E values to compare to this instance.\u003C/param\u003E\n/// \u003Creturns\u003EA executor object to execute a supplied action.\u003C/returns\u003E",
        "signature": {
          "name": "When",
          "returns": "SmartEnumThen\u003CTEnum, TValue\u003E",
          "params": [
            "SmartEnum\u003CTEnum, TValue\u003E smartEnumWhen"
          ],
          "modifier": [
            "public"
          ],
          "annotations": [],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// When this instance is one of the specified \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E parameters.\n/// Execute the action in the subsequent call to Then().\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022smartEnums\u0022\u003EA collection of \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E values to compare to this instance.\u003C/param\u003E\n/// \u003Creturns\u003EA executor object to execute a supplied action.\u003C/returns\u003E",
        "signature": {
          "name": "When",
          "returns": "SmartEnumThen\u003CTEnum, TValue\u003E",
          "params": [
            "params SmartEnum\u003CTEnum, TValue\u003E[] smartEnums"
          ],
          "modifier": [
            "public"
          ],
          "annotations": [],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// When this instance is one of the specified \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E parameters.\n/// Execute the action in the subsequent call to Then().\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022smartEnums\u0022\u003EA collection of \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E values to compare to this instance.\u003C/param\u003E\n/// \u003Creturns\u003EA executor object to execute a supplied action.\u003C/returns\u003E",
        "signature": {
          "name": "When",
          "returns": "SmartEnumThen\u003CTEnum, TValue\u003E",
          "params": [
            "IEnumerable\u003CSmartEnum\u003CTEnum, TValue\u003E\u003E smartEnums"
          ],
          "modifier": [
            "public"
          ],
          "annotations": [],
          "generics": []
        },
        "code": ""
      },
      {
        "doc": "/// \u003Csummary\u003E\n/// Compares this instance to a specified \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E and returns an indication of their relative values.\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022other\u0022\u003EAn \u003Csee cref = \u0022SmartEnum{TEnum, TValue}\u0022/\u003E value to compare to this instance.\u003C/param\u003E\n/// \u003Creturns\u003EA signed number indicating the relative values of this instance and \u003Cparamref name = \u0022other\u0022/\u003E.\u003C/returns\u003E",
        "signature": {
          "name": "CompareTo",
          "returns": "int",
          "params": [
            "SmartEnum\u003CTEnum, TValue\u003E other"
          ],
          "modifier": [
            "public",
            "virtual"
          ],
          "annotations": [
            "MethodImpl"
          ],
          "generics": []
        },
        "code": ""
      }
    ],
    "variables": [
      "static readonly Lazy\u003CList\u003CTEnum\u003E\u003E _enumOptions = new Lazy\u003CList\u003CTEnum\u003E\u003E(GetAllOptions, LazyThreadSafetyMode.ExecutionAndPublication);",
      "static readonly Lazy\u003CDictionary\u003Cstring, TEnum\u003E\u003E _fromName = new Lazy\u003CDictionary\u003Cstring, TEnum\u003E\u003E(() =\u003E _enumOptions.Value.ToDictionary(item =\u003E item.Name));",
      "static readonly Lazy\u003CDictionary\u003Cstring, TEnum\u003E\u003E _fromNameIgnoreCase = new Lazy\u003CDictionary\u003Cstring, TEnum\u003E\u003E(() =\u003E _enumOptions.Value.ToDictionary(item =\u003E item.Name, StringComparer.OrdinalIgnoreCase));",
      "static readonly Lazy\u003CDictionary\u003CTValue, TEnum\u003E\u003E _fromValue = new Lazy\u003CDictionary\u003CTValue, TEnum\u003E\u003E(() =\u003E\r\n{\r\n    // multiple enums with same value are allowed but store only one per value\r\n    var dictionary = new Dictionary\u003CTValue, TEnum\u003E(GetValueComparer());\r\n    foreach (var item in _enumOptions.Value)\r\n    {\r\n        if (item._value is not null \u0026\u0026 !dictionary.ContainsKey(item._value))\r\n            dictionary.Add(item._value, item);\r\n    }\r\n\r\n    return dictionary;\r\n});",
      "private readonly string _name;",
      "private readonly TValue _value;"
    ],
    "generics": [
      "TEnum",
      "TValue"
    ],
    "imports": [
      "using System.Runtime.InteropServices.ComTypes;"
    ],
    "constructors": [
      "/// \u003Csummary\u003E\n///\n/// \u003C/summary\u003E\n/// \u003Cparam name = \u0022name\u0022\u003E\u003C/param\u003E\n/// \u003Cparam name = \u0022value\u0022\u003E\u003C/param\u003E\nprotected SmartEnum(string name, TValue value)\r\n{\r\n    if (String.IsNullOrEmpty(name))\r\n        ThrowHelper.ThrowArgumentNullOrEmptyException(nameof(name));\r\n    _name = name;\r\n    _value = value;\r\n}"
    ],
    "extends": "ISmartEnum",
    "implements": [
      "IEquatable\u003CSmartEnum\u003CTEnum, TValue\u003E\u003E",
      "IComparable\u003CSmartEnum\u003CTEnum, TValue\u003E\u003E"
    ],
    "namespace": "Ardalis.SmartEnum"
  },
  "code": "{\n            TEnum result;\n\n            if (value is not null)\n            {\n                if (!_fromValue.Value.TryGetValue(value, out result))\n                {\n                    ThrowHelper.ThrowValueNotFoundException\u003CTEnum, TValue\u003E(value);\n                }\n            }\n            else\n            {\n                result = _enumOptions.Value.FirstOrDefault(x =\u003E x.Value is null);\n                if (result == null)\n                {\n                    ThrowHelper.ThrowValueNotFoundException\u003CTEnum, TValue\u003E(value);\n                }\n            }\n            return result;\n        }",
  "code_file_path": "src/SmartEnum/SmartEnum.cs",
  "called_functions": [
    "_fromValue.Value.TryGetValue(value, out result)",
    "ThrowHelper.ThrowValueNotFoundException\u003CTEnum, TValue\u003E(value)",
    "_enumOptions.Value.FirstOrDefault(x =\u003E x.Value is null)",
    "ThrowHelper.ThrowValueNotFoundException\u003CTEnum, TValue\u003E(value)"
  ],
  "id": 5,
  "tests": [
    {
      "tests": "namespace Ardalis.SmartEnum.UnitTests\n{\n    using FluentAssertions;\n    using System;\n    using Xunit;\n\n    public class SmartEnumComparerAttribute\n    {\n        public class VanillaStringEnum : SmartEnum\u003CVanillaStringEnum, string\u003E\n        {\n            protected VanillaStringEnum(string name, string value) : base(name, value) { }\n\n            public static VanillaStringEnum One = new VanillaStringEnum(\u0022One\u0022, \u0022one\u0022);\n            public static VanillaStringEnum Two = new VanillaStringEnum(\u0022Two\u0022, \u0022two\u0022);\n        }\n\n        [SmartEnumStringComparer(StringComparison.InvariantCultureIgnoreCase)]\n        public class CaseInsensitiveEnum : SmartEnum\u003CCaseInsensitiveEnum, string\u003E\n        {\n            protected CaseInsensitiveEnum(string name, string value) : base(name, value) { }\n\n            public static CaseInsensitiveEnum One = new CaseInsensitiveEnum(\u0022One\u0022, \u0022one\u0022);\n            public static CaseInsensitiveEnum Two = new CaseInsensitiveEnum(\u0022Two\u0022, \u0022two\u0022);\n        }\n\n        [SmartEnumStringComparer(StringComparison.InvariantCulture)]\n        public class CaseSensitiveEnum : SmartEnum\u003CCaseSensitiveEnum, string\u003E\n        {\n            protected CaseSensitiveEnum(string name, string value) : base(name, value) { }\n\n            public static CaseSensitiveEnum One = new CaseSensitiveEnum(\u0022One\u0022, \u0022one\u0022);\n            public static CaseSensitiveEnum Two = new CaseSensitiveEnum(\u0022Two\u0022, \u0022two\u0022);\n        }\n\n        [Fact]\n        public void VanillaStringEnum_FromValue_WhenStringDoesNotMatchCase_Throws()\n        {\n            //act\n            Assert.Throws\u003CSmartEnumNotFoundException\u003E(() =\u003E\n            {\n                var actual = VanillaStringEnum.FromValue(\u0022ONE\u0022);\n            });\n        }\n\n        [Fact]\n        public void CaseInsensitiveEnum_FromValue_WhenStringDoesNotMatchCase_ReturnsItem()\n        {\n            //act\n            var actual = CaseInsensitiveEnum.FromValue(\u0022ONE\u0022);\n\n            //assert\n            actual.Should().Be(CaseInsensitiveEnum.One);\n        }\n\n        [Fact]\n        public void CaseSensitiveEnum_FromValue_WhenStringDoesNotMatchCase_Throws()\n        {\n            //act\n            Assert.Throws\u003CSmartEnumNotFoundException\u003E(() =\u003E\n            {\n                var actual = CaseSensitiveEnum.FromValue(\u0022ONE\u0022);\n            });\n        }\n\n        [Fact]\n        public void VanillaStringEnum_FromValue_WhenStringMatchesCase_ReturnsItem()\n        {\n            //act\n            var actual = VanillaStringEnum.FromValue(\u0022one\u0022);\n\n            //assert\n            actual.Should().Be(VanillaStringEnum.One);\n        }\n\n        [Fact]\n        public void CaseInsensitiveEnum_FromValue_WhenStringMatchesCase_ReturnsItem()\n        {\n            //act\n            var actual = CaseInsensitiveEnum.FromValue(\u0022one\u0022);\n\n            //assert\n            actual.Should().Be(CaseInsensitiveEnum.One);\n        }\n\n        [Fact]\n        public void CaseSensitiveEnum_FromValue_WhenStringMatchesCase_ReturnsItem()\n        {\n            //act\n            var actual = CaseSensitiveEnum.FromValue(\u0022one\u0022);\n\n            //assert\n            actual.Should().Be(CaseSensitiveEnum.One);\n        }\n    }\n}\n",
      "test_imports": [
        "using FluentAssertions;",
        "using System;",
        "using Xunit;"
      ],
      "test_namespace": "Ardalis.SmartEnum.UnitTests",
      "test_class_name": "SmartEnumComparerAttribute",
      "test_file_path": "test/SmartEnum.UnitTests/SmartEnumComparerAttribute.cs",
      "test_runner": "xUnit",
      "project_path": "test/SmartEnum.UnitTests/SmartEnum.UnitTests.csproj"
    },
    {
      "tests": "namespace Ardalis.SmartEnum.UnitTests\n{\n    using System;\n    using FluentAssertions;\n    using Xunit;\n\n    public class SmartEnumFromValue\n    {\n        [Fact]\n        public void ReturnsEnumGivenMatchingValue()\n        {\n            var result = TestEnum.FromValue(1);\n\n            result.Should().BeSameAs(TestEnum.One);\n        }\n\n        [Fact]\n        public void ReturnsEnumGivenDerivedClass()\n        {\n            var result = TestDerivedEnum.FromValue(1);\n\n            result.Should().NotBeNull().And.BeSameAs(TestDerivedEnum.One);\n        }\n\n        [Fact]\n        public void ThrowsGivenNonMatchingValue()\n        {\n            var value = -1;\n\n            Action action = () =\u003E TestEnum.FromValue(value);\n\n            action.Should()\n            .ThrowExactly\u003CSmartEnumNotFoundException\u003E()\n            .WithMessage($\u0022No {typeof(TestEnum).Name} with Value {value} found.\u0022);\n\n        }\n\n        [Fact]\n        public void ReturnsDefaultEnumGivenNonMatchingValue()\n        {\n            var value = -1;\n            var defaultEnum = TestEnum.One;\n\n            var result = TestEnum.FromValue(value, defaultEnum);\n\n            result.Should().BeSameAs(defaultEnum);\n        }\n    }\n}",
      "test_imports": [
        "using System;",
        "using FluentAssertions;",
        "using Xunit;"
      ],
      "test_namespace": "Ardalis.SmartEnum.UnitTests",
      "test_class_name": "SmartEnumFromValue",
      "test_file_path": "test/SmartEnum.UnitTests/SmartEnumFromValue.cs",
      "test_runner": "xUnit",
      "project_path": "test/SmartEnum.UnitTests/SmartEnum.UnitTests.csproj"
    },
    {
      "tests": "namespace Ardalis.SmartEnum.UnitTests\n{\n    using FluentAssertions;\n    using System;\n    using Xunit;\n\n    public class SmartEnumStringFromValue\n    {\n        public static TheoryData\u003Cstring, TestStringEnum\u003E TestStringEnumData =\u003E\n            new TheoryData\u003Cstring, TestStringEnum\u003E\n            {\n                { nameof(TestStringEnum.One), TestStringEnum.One },\n                { nameof(TestStringEnum.Two), TestStringEnum.Two },\n            };\n\n        [Theory]\n        [MemberData(nameof(TestStringEnumData))]\n        public void ReturnsEnumGivenMatchingValue(string value, TestStringEnum expected)\n        {\n            var result = TestStringEnum.FromValue(value);\n\n            result.Should().BeSameAs(expected);\n        }\n\n        [Fact]\n        public void ReturnsEnumGivenMatchingNullValue()\n        {\n            var result = TestNullableStringEnum.FromValue(null);\n\n            result.Should().BeSameAs(TestNullableStringEnum.None);\n        }\n\n        [Theory]\n        [InlineData(\u0022invalid\u0022)]\n        [InlineData(null)]\n        public void ThrowsGivenNonMatchingValue(string value)\n        {\n            Action action = () =\u003E TestStringEnum.FromValue(value);\n\n            action.Should()\n            .ThrowExactly\u003CSmartEnumNotFoundException\u003E()\n            .WithMessage($\u0022No {typeof(TestStringEnum).Name} with Value {value} found.\u0022);\n\n        }\n\n        [Fact]\n        public void ReturnsDefaultEnumGivenNonMatchingValue()\n        {\n            var value = \u0022invalid\u0022;\n            var defaultEnum = TestStringEnum.One;\n\n            var result = TestStringEnum.FromValue(value, defaultEnum);\n\n            result.Should().BeSameAs(defaultEnum);\n        }\n\n\n        [Fact]\n        public void ReturnsDerivedEnumByValue()\n        {\n            TestBaseEnumWithDerivedValues result = DerivedTestEnumWithValues1.FromValue(1);\n\n            Assert.Equal(DerivedTestEnumWithValues1.A, result);\n        }\n    }\n}\n",
      "test_imports": [
        "using FluentAssertions;",
        "using System;",
        "using Xunit;"
      ],
      "test_namespace": "Ardalis.SmartEnum.UnitTests",
      "test_class_name": "SmartEnumStringFromValue",
      "test_file_path": "test/SmartEnum.UnitTests/SmartEnumStringFromValue.cs",
      "test_runner": "xUnit",
      "project_path": "test/SmartEnum.UnitTests/SmartEnum.UnitTests.csproj"
    }
  ]
}