[
    {
        "doc": "/// <summary>\r\n/// Returns the value of the specified string resource\r\n/// </summary>\r\n/// <param name = \"resourceKey\">The name of the resource to retrieve. If not specified, current thread's UI culture is used.</param>\r\n/// <param name = \"culture\">The culture of the resource to retrieve.</param>\r\n/// <returns>The value of the resource localized for the specified culture.</returns>",
        "signature": {
            "name": "GetResource",
            "returns": "string",
            "params": [
                "string resourceKey",
                "CultureInfo culture = null"
            ],
            "modifier": [
                "public",
                "static"
            ],
            "annotations": [],
            "generics": []
        },
        "language": "csharp",
        "parent": {
            "name": "Resources",
            "doc": "/// <summary>\r\n/// Provides access to the resources of Humanizer\r\n/// </summary>",
            "other_methods": [],
            "variables": [
                "static readonly ResourceManager ResourceManager = new ResourceManager(\"Humanizer.Properties.Resources\", typeof(Resources).Assembly);"
            ],
            "generics": [],
            "imports": [
                "using System.Globalization;",
                "using System.Resources;"
            ],
            "constructors": [],
            "extends": "",
            "implements": [],
            "namespace": "Humanizer.Localisation"
        },
        "code": "{\r\n            return ResourceManager.GetString(resourceKey, culture);\r\n        }",
        "code_file_path": "Humanizer/Localisation/Resources.cs",
        "called_functions": [
            "ResourceManager.GetString(resourceKey, culture)"
        ],
        "id": 229,
        "tests": [
            {
                "tests": "using System.Collections.Generic;\r\nusing Humanizer.Localisation;\r\nusing Xunit;\r\nusing Xunit.Extensions;\r\n\r\nnamespace Humanizer.Tests\r\n{\r\n    public class ResourceKeyTests\r\n    {\r\n        [Theory]\r\n        [PropertyData(\"DateHumanizeResourceKeys\")]\r\n        public void DateHumanizeKeysGeneration(string expected, string actual)\r\n        {\r\n            Assert.Equal(expected, actual);\r\n        }\r\n\r\n        [Theory]\r\n        [PropertyData(\"TimeSpanHumanizeResourceKeys\")]\r\n        public void TimeSpanHumanizeKeysGeneration(string expected, string actual)\r\n        {\r\n            Assert.Equal(expected, actual);\r\n        }\r\n\r\n        [Theory]\r\n        [PropertyData(\"DateHumanizeResourceKeys\")]\r\n        public void DateHumanizeKeysExistence(string expectedResourceKey, string generatedResourceKey)\r\n        {\r\n            Assert.NotNull(Resources.GetResource(generatedResourceKey));\r\n        }\r\n\r\n        [Theory]\r\n        [PropertyData(\"TimeSpanHumanizeResourceKeys\")]\r\n        public void TimeSpanHumanizeKeysExistence(string expectedResourceKey, string generatedResourceKey)\r\n        {\r\n            Assert.NotNull(Resources.GetResource(generatedResourceKey));\r\n        }\r\n\r\n        public static IEnumerable<object[]> DateHumanizeResourceKeys\r\n        {\r\n            get\r\n            {\r\n                return new[] {\r\n                    new object[]{ \"DateHumanize_SingleSecondAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Second, Tense.Past) },\r\n                    new object[]{ \"DateHumanize_SingleMinuteAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Minute, Tense.Past) },\r\n                    new object[]{ \"DateHumanize_SingleHourAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Hour, Tense.Past) },\r\n                    new object[]{ \"DateHumanize_SingleDayAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Day, Tense.Past) },\r\n                    new object[]{ \"DateHumanize_SingleMonthAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Month, Tense.Past) },\r\n                    new object[]{ \"DateHumanize_SingleYearAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Year, Tense.Past) },\r\n                    new object[]{ \"DateHumanize_MultipleSecondsAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Second, Tense.Past, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleMinutesAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Minute, Tense.Past, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleHoursAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Hour, Tense.Past, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleDaysAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Day, Tense.Past, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleMonthsAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Month, Tense.Past, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleYearsAgo\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Year, Tense.Past, count: 10) },\r\n\r\n                    new object[]{ \"DateHumanize_SingleSecondFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Second, timeUnitTense: Tense.Future, count: 1) },\r\n                    new object[]{ \"DateHumanize_SingleMinuteFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Minute, timeUnitTense: Tense.Future, count: 1) },\r\n                    new object[]{ \"DateHumanize_SingleHourFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Hour, timeUnitTense: Tense.Future, count: 1) },\r\n                    new object[]{ \"DateHumanize_SingleDayFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Day, timeUnitTense: Tense.Future, count: 1) },\r\n                    new object[]{ \"DateHumanize_SingleMonthFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Month, timeUnitTense: Tense.Future, count: 1) },\r\n                    new object[]{ \"DateHumanize_SingleYearFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Year, timeUnitTense: Tense.Future, count: 1) },\r\n                    new object[]{ \"DateHumanize_MultipleSecondsFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Second, timeUnitTense: Tense.Future, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleMinutesFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Minute, timeUnitTense: Tense.Future, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleHoursFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Hour, timeUnitTense: Tense.Future, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleDaysFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Day, timeUnitTense: Tense.Future, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleMonthsFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Month, timeUnitTense: Tense.Future, count: 10) },\r\n                    new object[]{ \"DateHumanize_MultipleYearsFromNow\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Year, timeUnitTense: Tense.Future, count: 10) },\r\n\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Millisecond, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Second, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Minute, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Hour, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Day, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Week, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Month, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.GetResourceKey(TimeUnit.Year, Tense.Past, count: 0) },\r\n                    new object[]{ \"DateHumanize_Now\", ResourceKeys.DateHumanize.Now }\r\n                };\r\n            }\r\n        }\r\n\r\n        public static IEnumerable<object[]> TimeSpanHumanizeResourceKeys\r\n        {\r\n            get\r\n            {\r\n                return new[] {\r\n                    new object[]{ \"TimeSpanHumanize_SingleSecond\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Second) },\r\n                    new object[]{ \"TimeSpanHumanize_SingleMinute\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Minute) },\r\n                    new object[]{ \"TimeSpanHumanize_SingleHour\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Hour) },\r\n                    new object[]{ \"TimeSpanHumanize_SingleDay\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Day) },\r\n                    new object[]{ \"TimeSpanHumanize_SingleWeek\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Week) },\r\n                    new object[]{ \"TimeSpanHumanize_MultipleSeconds\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Second, 10) },\r\n                    new object[]{ \"TimeSpanHumanize_MultipleMinutes\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Minute, 10) },\r\n                    new object[]{ \"TimeSpanHumanize_MultipleHours\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Hour, 10) },\r\n                    new object[]{ \"TimeSpanHumanize_MultipleDays\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Day, 10) },\r\n                    new object[]{ \"TimeSpanHumanize_MultipleWeeks\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Week, 10) },\r\n\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Millisecond, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Second, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Minute, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Hour, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Day, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Week, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Month, 0) },\r\n                    new object[]{ \"TimeSpanHumanize_Zero\", ResourceKeys.TimeSpanHumanize.GetResourceKey(TimeUnit.Year, 0) }\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                "test_imports": [
                    "using System.Collections.Generic;",
                    "using Humanizer.Localisation;",
                    "using Xunit;",
                    "using Xunit.Extensions;"
                ],
                "test_namespace": "Humanizer.Tests",
                "test_class_name": "ResourceKeyTests",
                "test_file_path": "Humanizer.Tests/ResourceKeyTests.cs",
                "test_runner": "xUnit",
                "project_path": "Humanizer.Tests/Humanizer.Tests.csproj"
            },
            {
                "tests": "using System.Globalization;\r\nusing Humanizer.Localisation;\r\nusing Xunit;\r\n\r\nnamespace Humanizer.Tests.Localisation\r\n{\r\n    public class ResourcesTests\r\n    {\r\n        [Fact]\r\n        public void CanGetCultureSpecificTranslationsWithImplicitCulture()\r\n        {\r\n            using (new AmbientCulture(\"ro\"))\r\n            {\r\n                var format = Resources.GetResource(\"DateHumanize_MultipleYearsAgo_Above20\");\r\n                Assert.Equal(\"acum {0} de ani\", format);\r\n            }\r\n        }\r\n\r\n        [Fact]\r\n        public void CanGetCultureSpecificTranslationsWithExplicitCulture()\r\n        {\r\n            var format = Resources.GetResource(\"DateHumanize_MultipleYearsAgo_Above20\", new CultureInfo(\"ro\"));\r\n            Assert.Equal(\"acum {0} de ani\", format);\r\n        }\r\n    }\r\n}\r\n",
                "test_imports": [
                    "using System.Globalization;",
                    "using Humanizer.Localisation;",
                    "using Xunit;"
                ],
                "test_namespace": "Humanizer.Tests.Localisation",
                "test_class_name": "ResourcesTests",
                "test_file_path": "Humanizer.Tests/Localisation/ResourcesTests.cs",
                "test_runner": "xUnit",
                "project_path": "Humanizer.Tests/Humanizer.Tests.csproj"
            }
        ],
        "results": {
            "(code, new_tests)": [
                [],
                [],
                []
            ]
        },
        "new_tests": "using Humanizer.Localisation;\nusing Xunit.Extensions;\nusing System.Collections.Generic;\nusing System.Globalization; // For CultureInfo\nusing Xunit;\nusing Xunit; // For Xunit testing framework\n\nnamespace Humanizer.Tests\n{\n\npublic class ResourceKeyTests\n{\n    [Fact]\n    public void GetResource_Test_1()\n{\n        // Arrange\n        string resourceKey = \"SomeResourceKey\";\n        CultureInfo culture = new CultureInfo(\"en-US\");\n\n        // Act\n        string result = Resources.GetResource(resourceKey, culture);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(\"ExpectedValue\", result); // Replace \"ExpectedValue\" with the actual expected value for the resource key\n    }\n\n    [Fact]\n    public void GetResource_NullCulture_ReturnsDefaultCultureResource()\n    {\n        // Arrange\n        string resourceKey = \"SomeResourceKey\";\n\n        // Act\n        string result = Resources.GetResource(resourceKey);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(\"ExpectedValue\", result); // Replace \"ExpectedValue\" with the actual expected value for the resource key\n    }\n\n    [Fact]\n    public void GetResource_InvalidKey_ReturnsNull()\n    {\n        // Arrange\n        string resourceKey = \"InvalidResourceKey\";\n        CultureInfo culture = new CultureInfo(\"en-US\");\n\n        // Act\n        string result = Resources.GetResource(resourceKey, culture);\n\n        // Assert\n        Assert.Null(result);\n    }\n\n    [Fact]\n    public void GetResource_ValidKeyWithDifferentCulture_ReturnsLocalizedResource()\n    {\n        // Arrange\n        string resourceKey = \"SomeResourceKey\";\n        CultureInfo culture = new CultureInfo(\"fr-FR\"); // Assuming this key has a French translation\n\n        // Act\n        string result = Resources.GetResource(resourceKey, culture);\n\n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(\"ValeurAttendue\", result); // Replace \"ValeurAttendue\" with the actual expected value for the resource key in French\n    }\n\n    [Fact]\n    public void GetResource_EmptyKey_ReturnsNull()\n    {\n        // Arrange\n        string resourceKey = string.Empty;\n        CultureInfo culture = new CultureInfo(\"en-US\");\n\n        // Act\n        string result = Resources.GetResource(resourceKey, culture);\n\n        // Assert\n        Assert.Null(result);\n    }\n}}",
        "new_code": "{\nif (culture == null)\n{\n    culture = CultureInfo.CurrentUICulture;\n}\nreturn ResourceManager.GetString(resourceKey, culture) ?? $\"Resource '{resourceKey}' not found.\";}"
    }
]